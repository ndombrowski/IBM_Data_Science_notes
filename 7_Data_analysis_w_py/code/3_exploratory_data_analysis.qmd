# Exploratory data analysis (EDA) in python

Exploratory data analysis is a preliminary step in data analysis to:

-   Summarize main characteristics of the data
-   Gain better understanding of the data set
-   Uncover relationships between different variables
-   Extract important variables for the problem we're trying to solve

In this tutorial we want to answer the key question: What are the main characteristics that have the most impact on the car price?

## Notebook setup 

```{python}
#load libs
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

#load data
df = pd.read_csv("../data/automobileEDA.csv")
df.head()
```

## Analyzing Individual Feature Patterns Using Visualization

How to choose the right visualization method?¶

When visualizing individual variables, it is important to first understand what type of variable you are dealing with. This will help us find the right visualization method for that variable.

```{python}
df.dtypes.head()
```
We can calculate the correlation between variables  of type "int64" or "float64" using the method "corr". The diagonal elements are always one; we will study correlation more precisely Pearson correlation in-depth at the end of the notebook.

```{python}
df.corr()
```


## Descriptive statistics

-   Describe basic features of data
-   Give short summaries about the sample and measures of the data

Examples of useful tools in python:

### The describe function

The describe function automatically computes basic statistics for all continuous variables. Any NaN values are automatically skipped in these statistics.

This will show:

- the count of that variable
- the mean
- the standard deviation (std)
- the minimum value
- the IQR (Interquartile Range: 25%, 50% and 75%)
- the maximum value
- We can apply the method "describe" as follows:

```{python}
df.describe()
```

The default setting of "describe" skips variables of type object. We can apply the method "describe" on the variables of type 'object' as follows:

```{python}
df.describe(include = ['object'])
```


### The value_counts function

Value counts is a good way of understanding how many units of each characteristic/variable we have. We can apply the "value_counts" method on the column "drive-wheels". Don’t forget the method "value_counts" only works on pandas series, not pandas dataframes. As a result, we only include one bracket df['drive-wheels'], not two brackets df[['drive-wheels']].

```{python}
df['drive-wheels'].value_counts()
```

We can convert the series to a dataframe as follows:

```{python}
df['drive-wheels'].value_counts().to_frame()
```

Let's repeat the above steps but save the results to the dataframe "drive_wheels_counts" and rename the column 'drive-wheels' to 'value_counts'.

```{python}
drive_wheels_counts = df['drive-wheels'].value_counts().to_frame()
drive_wheels_counts.rename(columns={'drive-wheels': 'value_counts'}, inplace=True)
drive_wheels_counts
```
Now let's rename the index to 'drive-wheels':

```{python}
drive_wheels_counts.index.name = "drive-wheels"
drive_wheels_counts
```

We can repeat the above process for the variable 'engine-location'.

```{python}
engine_loc_counts = df['engine-location'].value_counts().to_frame()
engine_loc_counts.rename(columns={'engine-location': 'value_counts'}, inplace=True)
engine_loc_counts.index.name = 'engine-location'
engine_loc_counts.head(10)
```

After examining the value counts of the engine location, we see that engine location would not be a good predictor variable for the price. This is because we only have three cars with a rear engine and 198 with an engine in the front, so this result is skewed. Thus, we are not able to draw any conclusions about the engine location.


### Boxplots

-   [*Boxplot*]{.underline} allow to plot the distribution of numerical data and make it easy to compare between groups.
    The boxplot shows:

    -   The **median**: represents where the middle data point is.
    -   The **upper quartile** shows where the 75th percentile is.
    -   The **lower quartile** shows where the 25th percentile is.
    -   The data between the upper and lower quartile represents the **interquartile range**.
    -   The **lower and upper extremes** are calculated as 1.5 times the interquartile range, above the 75th percentile, and as 1.5 times the IQR below the 25th percentile.
    -   **Outliers** are individual dots that occur outside the upper and lower extremes.

Let's look at the relationship between "body-style" and "price".

```{python}
sns.boxplot(x = "body-style", y = "price", data = df)
plt.show()
plt.close()
```

We see that the distributions of price between the different body-style categories have a significant overlap, so body-style would not be a good predictor of price. Let's examine engine "engine-location" and "price":

```{python}
sns.boxplot(x = "engine-location", y = "price", data = df)
plt.show()
plt.close()
```

Here we see that the distribution of price between these two engine-location categories, front and rear, are distinct enough to take engine-location as a potential good predictor of price.

Let's examine "drive-wheels" and "price".

```{python}
sns.boxplot(x = "drive-wheels", y = "price", data = df)
plt.show()
plt.close()
```

Here we see that the distribution of price between the different drive-wheels categories differs. As such, drive-wheels could potentially be a predictor of price.


### Scatterplots

-   [*Scatter plots*]{.underline} allow the representation of observations as data points and allows to show the relationships between two variables.
    Could engine size possibly predict the price of a car?
    Scatterplots show the relationship between two variables:

    -   **Predictor/independent variable** on the x-axis, i.e. the variable that we are using to predict an outcome, i.e. the engine size
    -   **Target/dependent variable** on the y-axis, i.e. the price


```{python}
sns.regplot(x = "engine-size", y = "price", data = df)
plt.ylim
plt.show()
plt.close()
```

As the engine-size goes up, the price goes up: this indicates a positive direct correlation between these two variables. Engine size seems like a pretty good predictor of price since the regression line is almost a perfect diagonal line.

We can examine the correlation between 'engine-size' and 'price' and see that it's approximately 0.87.

```{python}
df[["engine-size", "price"]].corr()
```

Highway mpg is a potential predictor variable of price. Let's find the scatterplot of "highway-mpg" and "price".

```{python}
sns.regplot(x = "highway-mpg", y = "price", data = df)
plt.ylim
plt.show()
plt.close()
```

As highway-mpg goes up, the price goes down: this indicates an inverse/negative relationship between these two variables. Highway mpg could potentially be a predictor of price.

We can examine the correlation between 'highway-mpg' and 'price' and see it's approximately -0.704.

```{python}
df[["highway-mpg", "price"]].corr()
```

Let's see if "peak-rpm" is a predictor variable of "price".


```{python}
sns.regplot(x = "peak-rpm", y = "price", data = df)
plt.ylim
plt.show()
plt.close()
```

```{python}
df[["peak-rpm", "price"]].corr()
```

Peak rpm does not seem like a good predictor of the price at all since the regression line is close to horizontal. Also, the data points are very scattered and far from the fitted line, showing lots of variability. Therefore, it's not a reliable variable.




## GroupBy in python

Assume we want to know, is there any relationship between the different types of drive system, forward, rear, and four-wheel drive, and the price of the vehicles?

If so, which type of drive system adds the most value to a vehicle?
It would be nice if we could group all the data by the different types of drive wheels and compare the results of these different drive wheels against each other.

To do this we can use pandas groupby() method, which:

- groups data by different categories
- Can be applied on categorical values
- Allows to group data into categories
- Accepts single multiple variables

For example, let's group by the variable "drive-wheels". We see that there are 3 different categories of drive wheels.

```{python}
df['drive-wheels'].unique()
```

If we want to know, on average, which type of drive wheel is most valuable, we can group "drive-wheels" and then average them.

We can select the columns 'drive-wheels', 'body-style' and 'price', then assign it to the variable "df_group_one".


```{python}
df_group_one = df[['drive-wheels', 'body-style', 'price']]
```

We can then calculate the average price for each of the different categories of data.

```{python}
df_group_one = df_group_one.groupby(['drive-wheels'], as_index = False).mean()
df_group_one
```

From our data, it seems rear-wheel drive vehicles are, on average, the most expensive, while 4-wheel and front-wheel are approximately the same in price.

You can also group by multiple variables. For example, let's group by both 'drive-wheels' and 'body-style'. This groups the dataframe by the unique combination of 'drive-wheels' and 'body-style'. We can store the results in the variable 'grouped_test1'.


```{python}
df_gptest = df[['drive-wheels','body-style','price']]
grouped_test1 = df_gptest.groupby(['drive-wheels','body-style'],as_index=False).mean()
grouped_test1
```


### Pivot() in python

To make the output of the groupby method easier to read, we can transform this table to a pivot table by using the pivot method. A pivot table has one variable displayed along the columns and the other variable displayed along the rows.

In our case, we will leave the drive-wheels variable as the rows of the table, and pivot body-style to become the columns of the table:

```{python}
grouped_pivot = grouped_test1.pivot(index = "drive-wheels", columns = "body-style")
grouped_pivot
```
Often, we won't have data for some of the pivot cells. We can fill these missing cells with the value 0, but any other value could potentially be used as well. It should be mentioned that missing data is quite a complex subject and is an entire course on its own.

```{python}
grouped_pivot = grouped_pivot.fillna(0)
grouped_pivot
```


### Heatmap plots

Heatmap plots:

-   Another way to visualize tables and plot the target variable over multiple variables
-   Takes a rectangular grid of data and assigns a color intensity based on the data value at the grid points

### Correlation heatmap

Taking all variables into account, we can now create a heatmap that indicates the correlation between each of the variables with one another. The color scheme indicates the Pearson correlation coefficient, indicating the strength of the correlation between two variables.

Let's use a heat map to visualize the relationship between Body Style vs Price.

```{python}
plt.pcolor(grouped_pivot, cmap = 'RdBu')
plt.colorbar()
plt.show()
plt.close()
```

The heatmap plots the target variable (price) proportional to colour with respect to the variables 'drive-wheel' and 'body-style' on the vertical and horizontal axis, respectively. This allows us to visualize how the price is related to 'drive-wheel' and 'body-style'.

The default labels convey no useful information to us. Let's change that:

```{python}
fig, ax = plt.subplots()
im = ax.pcolor(grouped_pivot, cmap='RdBu')

#label names
row_labels = grouped_pivot.columns.levels[1]
col_labels = grouped_pivot.index

#move ticks and labels to the center
ax.set_xticks(np.arange(grouped_pivot.shape[1]) + 0.5, minor=False)
ax.set_yticks(np.arange(grouped_pivot.shape[0]) + 0.5, minor=False)

#insert labels
ax.set_xticklabels(row_labels, minor=False)
ax.set_yticklabels(col_labels, minor=False)

#rotate label if too long
plt.xticks(rotation=90)

fig.colorbar(im)

plt.show()
plt.close()
```

Visualization is very important in data science, and Python visualization packages provide great freedom. We will go more in-depth in a separate Python visualizations course.

The main question we want to answer in this module is, "What are the main characteristics which have the most impact on the car price?".

To get a better measure of the important characteristics, we look at the correlation of these variables with the car price. In other words: how is the car price dependent on this variable?


## Correlation

Correlation is a statistical metric for measuring to what extent different variables are interdependent.

In other words, when we look at two variables over time, if one variable changes how does this affect change in the other variable?

For example, there is a correlation between umbrella and rain variables where more precipitation means more people use umbrellas.
Also, if it doesn't rain people would not carry umbrellas.
Therefore, we can say that umbrellas and rain are interdependent and by definition they are correlated.

**It is important to know that correlation doesn't imply causation.**

**Correlation**: a measure of the extent of interdependence between variables.
**Causation**: the relationship between cause and effect between two variables.

In fact, we can say that umbrella and rain are correlated but we would not have enough information to say whether the umbrella caused the rain or the rain caused the umbrella.


#### Pearson correlation

Measures the strength of the correlation between a continuous numerical variable.

This method will give us two values:

-   Correlation coefficient, a value:

    -   Close to 1: Large positive relationship
    -   Close to -1 : Large negative relationship
    -   Close to 0: No relationship
 
Pearson Correlation is the default method of the function "corr". Like before, we can calculate the Pearson Correlation of the of the 'int64' or 'float64' variables.

```{python}
df.corr().head()
```
 
What is this P-value? The P-value is the probability value that the correlation between these two variables is statistically significant. Normally, we choose a significance level of 0.05, which means that we are 95% confident that the correlation between the variables is significant.
    
-   P-value of:

    - < 0.001 : strong certainty of the result
    - < 0.05 : moderate certainty of the result
    - < 0.1 : weak certainty of the result
    - > 0.1 : no certainty of the result

Let's calculate the Pearson Correlation Coefficient and P-value of 'wheel-base' and 'price'.


```{python}
pearson_coef, p_value = stats.pearsonr(df['wheel-base'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =", p_value)  
```

Since the p-value is  <  0.001, the correlation between wheel-base and price is statistically significant, although the linear relationship isn't extremely strong (~0.585).

Let's calculate the  Pearson Correlation Coefficient and P-value of 'horsepower' and 'price'.

```{python}
pearson_coef, p_value = stats.pearsonr(df['horsepower'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =", p_value)  
```

Since the p-value is  <  0.001, the correlation between horsepower and price is statistically significant, and the linear relationship is quite strong (~0.809, close to 1).

Let's calculate the Pearson Correlation Coefficient and P-value of 'length' and 'price'.

```{python}
pearson_coef, p_value = stats.pearsonr(df['length'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =", p_value)  
```

Since the p-value is  <  0.001, the correlation between length and price is statistically significant, and the linear relationship is moderately strong (~0.691).

Let's calculate the Pearson Correlation Coefficient and P-value of 'width' and 'price':

```{python}
pearson_coef, p_value = stats.pearsonr(df['width'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P =", p_value)  
```


#### Anova

ANOVA: Analysis of Variance

The Analysis of Variance (ANOVA) is a statistical method used to test whether there are significant differences between the means of two or more groups. ANOVA returns two parameters:

F-test score: ANOVA assumes the means of all groups are the same, calculates how much the actual means deviate from the assumption, and reports it as the F-test score. A larger score means there is a larger difference between the means.

P-value: P-value tells how statistically significant our calculated score value is.

If our price variable is strongly correlated with the variable we are analyzing, we expect ANOVA to return a sizeable F-test score and a small p-value.

Since ANOVA analyzes the difference between different groups of the same variable, the groupby function will come in handy. Because the ANOVA algorithm averages the data automatically, we do not need to take the average before hand.

To see if different types of 'drive-wheels' impact 'price', we group the data.

```{python}
grouped_test2=df_gptest[['drive-wheels', 'price']].groupby(['drive-wheels'])
grouped_test2.head(2)
```
```{python}
df_gptest.head(2)
```

We can obtain the values of the method group using the method "get_group".

```{python}
grouped_test2.get_group('4wd')['price']
```

We can use the function 'f_oneway' in the module 'stats' to obtain the F-test score and P-value.

```{python}
# ANOVA
f_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'], grouped_test2.get_group('4wd')['price'])  
 
print( "ANOVA results: F=", f_val, ", P =", p_val)   
```


This is a great result with a large F-test score showing a strong correlation and a P-value of almost 0 implying almost certain statistical significance. But does this mean all three tested groups are all this highly correlated?

Let's examine them separately.

**fwd and rwd**

```{python}
f_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'])  
 
print( "ANOVA results: F=", f_val, ", P =", p_val )
```


**4wd and rwd**

```{python}
f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('rwd')['price'])  
   
print( "ANOVA results: F=", f_val, ", P =", p_val)   
```


**4wd and fwd**

```{python}
f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('fwd')['price'])  
 
print("ANOVA results: F=", f_val, ", P =", p_val)   
```


We now have a better idea of what our data looks like and which variables are important to take into account when predicting the car price. We have narrowed it down to the following variables:

Continuous numerical variables:

Length
Width
Curb-weight
Engine-size
Horsepower
City-mpg
Highway-mpg
Wheel-base
Bore
Categorical variables:

Drive-wheels
As we now move into building machine learning models to automate our analysis, feeding the model with variables that meaningfully affect our target variable will improve our model's prediction performance.


## Association between two categorical variables: Chi-Square

- Chi-square test for association allows to find out if there is a relationship between two categorical variables.
- Intended to test how likely it is that an observed distribution is due to chance.
- Measures how well the observed distribution of data fits with the distribution that is expected if the variables are independent = i.e. it tests the null hypothesis that the variables are independent.
-  Compares the observed data to the values that the model expects if the data was distributed in different categories by chance. Anytime the observed data doesn't fit within the model of the expected values, the probability that the variables are dependent becomes stronger, thus proving the null hypothesis incorrect.
- The chi-square doesn't tell us what type of relationship exists between the two variables, only that a relationship exists.
- **P-value < 0.05**: We reject the null hypothesis that the two variables are independent and can conclude that there is evidence for an association between variable A and variable B.

(Row total * Column total) / grand total

degree of freedom = (row-1)*(column-1)

```
scipy.stats.chi2_contingency(cont_table, correction = True)
```

