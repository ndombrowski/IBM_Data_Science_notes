# Model Development in python

## Introduction

- Model : A mathematical equation used to predict a value given one or more values
- Relating one or more independent variables to dependent variables. For example we can input a cars highway-mpg as independent variable (ore feature). The output of the model or the dependent variable is the predicted price.
- The more relevant data we have, the more accurate a model usually is. For example, we can input multiple independent variables (highway-mpg, engine-size, etc) and therefore our model might predict a more accurate price for a car.

Some questions we want to ask in this module

Do I know if the dealer is offering fair value for my trade-in?
Do I know if I put a fair value on my car?

```{python}
#setup general libs
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import numpy as np

#setup lib for linear regression
from sklearn.linear_model import LinearRegression

#model vis
import seaborn as sns
```

```{python}
#read in example data
df = pd.read_csv("../data/automobileEDA.csv.1")
df.head()
```


## Linear Regression and Multiple Linear Regression

**Linear regression** will refer to one independent variable to make a prediction.
**Multiple linear regression** will refer to multiple independent variables to make a prediction.


### Simple linear regression (SLR)

- A method to help us understand the relationship between two variables:
    - The predictor (independent) variable **x** and 
    - the target (dependent) variable **y**

The result of Linear Regression is a linear function that predicts the response (dependent) variable as a function of the predictor (independent) variable.

$\begin{aligned}
    y = b_0 + b_1x\\
\end{aligned}$  

b<sub>o</sub>: the intercept of the regression line, in other words: the value of Y when X is 0
b<sub>1</sub>:  the slope of the regression line, in other words: the value with which Y changes when X increases by 1 unit

If we assume there is a linear relationship between the highway-mpg and the price, we can use this relationship to formulate a model to determine the price of the car. I.e. for a given car for which we know the price, we can check the highway-mpg in the manual. If the highway miles per gallon is 20, we can input this value into the model to obtain a prediction of $22,000. 

In order to determine the line, we take data points from our data set. We then use these training points to fit our model. The results of the training points are the parameters, b<sub>o</sub> and b<sub>1</sub>.

In many cases, many factors influence how much people pay for a car. For example, make or how old the car is. In this model, this uncertainty is taken into account by assuming a small random value is added to the point on the line. This is called **noise**.

In short:

- We have a set of training points. 
- We use these training points to fit or train the model and get parameters. 
- We then use these parameters in the model. 
- We now have a model. 
- We use the hat on the y to denote the model is an estimate. 
- We can use this model to predict values that we haven't seen.

```{python}
#create a linear regression object
lm = LinearRegression()
lm
```

**Question**: How could "highway-mpg" help us predict car price?

For this example, we want to look at how highway-mpg can help us predict car price. Using simple linear regression, we will create a linear function with "highway-mpg" as the predictor variable and the "price" as the response variable.

```{python}
#set the predictor variable (X), highway-mpg , and response variable (Y), price
X = df[['highway-mpg']]
Y = df[['price']]

#fit the linear model using highway-mpg
lm.fit(X,Y)
```

```{python}
#output a prediction
Yhat = lm.predict(X)
Yhat[0:5]
```

```{python}
#What is the value of the intercept (a)?
lm.intercept_
```

```{python}
#What is the value of the slope?
lm.coef_
```

With these values we get a final linear model with the structure:

**Price** = 38423.31 -821.73 * **highway-mpg**



### Multiple linear regression (MLR)

What if we want to predict car price using more than one variable?

If we want to use more variables in our model to predict car price, we can use Multiple Linear Regression. Multiple Linear Regression is very similar to Simple Linear Regression, but this method is used to explain the relationship between:

- One continuous target (Y) variable
- Two or more predictor (X) variables

If we would have four predictor variables, we would have something like this

$\begin{aligned}
    y = b_0 + b_1x_1+b_2x_2+b_3x_3+b_4x_4\\
\end{aligned}$  

b<sub>o</sub>: the intercept  (x=0) <br>
b<sub>1</sub>: the coefficient or parameter of x<sub>1</sub> <br>
b<sub>2</sub>: the coefficient or parameter of x<sub>2</sub> and so on

From the previous section we know that other good predictors of price could be:

- Horsepower
- Curb-weight
- Engine-size
- Highway-mpg

```{python}
#use the variables above as predictor variables
Z = df[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']]

#fit the linear model
lm = LinearRegression()
lm.fit(Z, df[['price']])

#get the intercept
print(lm.intercept_)

#get the coefficients
print(lm.coef_)
```

The final model we get with these values is:

**Price** = -15806.62 + 53.50 * **horsepower** + 4.71 * **curb-weight** + 81.52 * **engine-size** + 36.01 * **highway-mpg**



## Model Evaluation using Visualization

Now that we've developed some models, how do we evaluate our models and choose the best one? One way to do this is by using a visualization.

### Regression plots

When it comes to simple linear regression, an excellent way to visualize the fit of our model is by using regression plots.

This plot will show a combination of a scattered data points (a scatterplot), as well as the fitted linear regression line going through the data. This will give us a reasonable estimate of the relationship between the two variables, the strength of the correlation, as well as the direction (positive or negative correlation).

Give good estimates of:

- Relationships between 2 variables
- The strength of the correlation
- The direction of the relatioship (positive or negative)

A regression plot shows us:

- The horizontal axis is the independent variable
- The vertical axis is the dependent variable 
- Each point represents a different target point
- The fitted line represents the predicted value

Let's visualize highway-mpg as potential predictor variable of price:

```{python}
width = 6
height = 5

plt.figure(figsize=(width, height))
sns.regplot(x = "highway-mpg", y = "price", data = df)
#plt.ylim((0,))

plt.show()
plt.close()
```

We can see from this plot that price is negatively correlated to highway-mpg since the regression slope is negative.

One thing to keep in mind when looking at a regression plot is to pay attention to how scattered the data points are around the regression line. This will give you a good indication of the variance of the data and whether a linear model would be the best fit or not. If the data is too far off from the line, this linear model might not be the best model for this data.

Let's compare this plot to the regression plot of "peak-rpm".

```{python}
plt.figure(figsize=(width, height))
sns.regplot(x="peak-rpm", y="price", data=df)
#plt.ylim((0,))

plt.show()
plt.close()
```

Comparing the regression plot of "peak-rpm" and "highway-mpg", we see that the points for "highway-mpg" are much closer to the generated line and, on average, decrease. The points for "peak-rpm" have more spread around the predicted line and it is much harder to determine if the points are decreasing or increasing as the "peak-rpm" increases.

**Given the regression plots above, is "peak-rpm" or "highway-mpg" more strongly correlated with "price"?**

```{python}
df[['price', 'highway-mpg', 'peak-rpm']].corr()
```

We see that the variable "highway-mpg" has a stronger correlation with "price", it is approximate -0.704692 compared to "peak-rpm" which is approximate -0.101616. You can verify it using the following command:
 
 

### Residual plot

A good way to visualize the variance of the data is to use a residual plot.

**Residual** : The difference between the observed value (y) and the predicted value (Yhat) is called the residual (e). When we look at a regression plot, the residual is the distance from the data point to the fitted regression line.

**Residual plot**: A residual plot is a graph that shows the residuals on the vertical y-axis and the independent variable on the horizontal x-axis.

**What to look for**: We look at the spread of the residuals --> If the points in a residual plot are randomly spread out around the x-axis, then a linear model is appropriate for the data.Randomly spread out residuals means that the variance is constant, and thus the linear model is a good fit for this data.


#### Single linear regression

```{python}
width = 6
height = 5

plt.figure(figsize=(width, height))
sns.residplot(x = df['highway-mpg'], y = df['price'])

plt.show()
plt.close()
```
We can see from this residual plot that the residuals are not randomly spread around the x-axis, leading us to believe that maybe a non-linear model is more appropriate for this data.


### Distribution plots

How do we visualize a model for Multiple Linear Regression? This gets a bit more complicated because you can't visualize it with regression or residual plot.

One way to look at the fit of the model is by looking at the distribution plot. We can look at the distribution of the fitted values that result from the model and compare it to the distribution of the actual values.

```{python}
#make a prediction using 4 variables
Y_hat = lm.predict(Z)

#prepare the plot
plt.figure(figsize=(width, height))

ax1 = sns.distplot(df['price'], hist = False, color = 'r', label = 'Actual Value')
sns.distplot(Y_hat, hist = False, color = "b", label = "Fitted Values", ax = ax1)

plt.title("Actual vs fitted values for price")
plt.xlabel("Price (in dollars")
plt.ylabel("Proportion of cars")

plt.show()
plt.close()
```
We can see that the fitted values are reasonably close to the actual values since the two distributions overlap a bit. However, there is definitely some room for improvement.



## Polynomial Regression and Pipelines

What do we do when a linear model is not the best fit for our data?

### Polynomial Regression

Polynomial regression is a special case of the general linear regression or multiple linear regression models. We get non-linear relationships by squaring or setting higher-order terms of the predictor variables. This method is beneficial for describing curvilinear relationships.

Curvilinear relationship: what you get by squaring or setting higher order terms of the predictor variables in the model transforming the data. The model can be quadratic, which means that the predictor variable in the model is squared.

<center><b>Quadratic - 2nd Order</b></center>
$$
Yhat = a + b_1 X +b_2 X^2 
$$

<center><b>Cubic - 3rd Order</b></center>
$$
Yhat = a + b_1 X +b_2 X^2 +b_3 X^3\\\\\\\\\\
$$

<center><b>Higher-Order</b>:</center>
$$
Y = a + b_1 X +b_2 X^2 +b_3 X^3 ....\\\\
$$

We saw earlier that a linear model did not provide the best fit while using "highway-mpg" as the predictor variable. Let's see if we can try fitting a polynomial model to the data instead.

We will use the following function to plot the data:

```{python}
def PlotPolly(model, independent_variable, dependent_variabble, Name):
    x_new = np.linspace(15, 55, 100)
    y_new = model(x_new)

    plt.plot(independent_variable, dependent_variabble, '.', x_new, y_new, '-')
    plt.title('Polynomial Fit with Matplotlib for Price ~ Length')
    ax = plt.gca()
    ax.set_facecolor((0.898, 0.898, 0.898))
    fig = plt.gcf()
    plt.xlabel(Name)
    plt.ylabel('Price of Cars')

    plt.show()
    plt.close()
```

```{python}
#get the variables
x = df['highway-mpg']
y = df['price']
```

Let's fit the polynomial using the function polyfit, then use the function poly1d to display the polynomial function

```{python}
#use a polynomal of the 3rd order (cubic)
f = np.polyfit(x, y, 3)
p = np.poly1d(f)
print(p)
```

```{python}
#plot 
PlotPolly(p, x, y, 'highway-mpg')
```

```{python}
np.polyfit(x, y, 3)
```

We can already see from plotting that this polynomial model performs better than the linear model. This is because the generated polynomial function "hits" more of the data points.

The analytical expression for Multivariate Polynomial function gets complicated. For example, the expression for a second-order (degree=2) polynomial with two variables is given by:

$$
Yhat = a + b\_1 X\_1 +b\_2 X\_2 +b\_3 X\_1 X\_2+b\_4 X\_1^2+b\_5 X\_2^2
$$

We can perform a polynomial transform on multiple features. 

```{python}
#import module
from sklearn.preprocessing import PolynomialFeatures
```

```{python}
#We create a PolynomialFeatures object of degree 2
pr=PolynomialFeatures(degree=2)

#transform data
Z_pr=pr.fit_transform(Z)

#view data before transformation
print(Z.shape)

#view data after the transformation
print(Z_pr.shape)
```


### Pipelines

We can simplify our code by using a pipeline library. 

There are many steps to getting a prediction. For example, normalization, polynomial transform, and linear regression. 

We simplify the process using a pipeline, which sequentially performs a series of transformations and were the last step carries out a prediction. 

A pipeline could look as follows:

- First we import all the modules we need
- then we import the library pipeline
- We create a list of tuples, the first element in the tuple contains the name of the estimator model. The second element contains model constructor. 
- We input the list in the pipeline constructor. We now have a pipeline object. 
- We can train the pipeline by applying the train method to the pipeline object. 
- We can also produce a prediction as well. 
- The method normalizes the data, performs a polynomial transform, then outputs a prediction.

```{python}
#import libs
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
```

We create the pipeline by creating a list of tuples including the name of the model or estimator and its corresponding constructor.

```{python}
Input=[('scale',StandardScaler()), ('polynomial', PolynomialFeatures(include_bias=False)), ('model',LinearRegression())]
```

We input the list as an argument to the pipeline constructor:

```{python}
pipe=Pipeline(Input)
pipe
```
First, we convert the data type Z to type float to avoid conversion warnings that may appear as a result of StandardScaler taking float inputs.

Then, we can normalize the data, perform a transform and fit the model simultaneously.

```{python}
Z = Z.astype(float)
pipe.fit(Z,y)
```

Similarly, we can normalize the data, perform a transform and produce a prediction simultaneously.

```{python}
ypipe=pipe.predict(Z)
ypipe[0:4]
```


## Measures for In-Sample Evaluation

These measures are a way to numerically determine how good the model fits on our data. 

Two important measures that we often use to determine the fit of a model are: 

- Mean Square Error (MSE): To measure the MSE, we find the difference between the actual value y and the predicted value then then square it. In this case, the actual value is 150; the predicted value is 50. Subtracting these points we get 100. We then square the number. We then take the Mean or average of all the errors by adding then all together and dividing by the number of samples. 

- R-squared: R-squared is also called the coefficient of determination. It’s a measure to determine how close the data is to the fitted regression line. So how close is our actual data to our estimated model?

### Example R-square for SLR

```{python}
#highway_mpg_fit
lm.fit(X, Y)

# Find the R^2
print('The R-square is: ', lm.score(X, Y))
```

We can say that ~49.659% of the variation of the price is explained by this simple linear model "horsepower_fit".

Let's calculate the MSE:

We can predict the output i.e., "yhat" using the predict method, where X is the input variable:


```{python}
Yhat=lm.predict(X)
print('The output of the first four predicted value is: ', Yhat[0:4])
```

Let's import the function mean_squared_error from the module metrics:

```{python}
from sklearn.metrics import mean_squared_error
```

```{python}
mse = mean_squared_error(df['price'], Yhat)
print('The mean square error of price and predicted value is: ', mse)
```


### Example R-square for MLR

```{python}
# fit the model 
lm.fit(Z, df['price'])

# Find the R^2
print('The R-square is: ', lm.score(Z, df['price']))
```

We can say that ~80.896 % of the variation of price is explained by this multiple linear regression "multi_fit".

Let's calculate the MSE.

```{python}
# We produce a prediction: 
Y_predict_multifit = lm.predict(Z)

#We compare the predicted results with the actual results:
print('The mean square error of price and predicted value using multifit is: ', mean_squared_error(df['price'], Y_predict_multifit))
```

### Example R-square for polynomial fit

```{python}
# import the function r2_score from the module metrics as we are using a different function
from sklearn.metrics import r2_score
```

```{python}
# We apply the function to get the value of R^2:
r_squared = r2_score(y, p(x))
print('The R-square value is: ', r_squared)
```

We can say that ~67.419 % of the variation of price is explained by this polynomial fit.

We can also calculate the MSE:

```{python}
mean_squared_error(df['price'], p(x))
```



## Prediction and Decision Making

How can we make sure our model is correct?

To determine the best fit, we look at a combination of:

- do our model results make sense
- visualize the data
- use numerical measures for evaluation
- compare models


### Prediction

In the previous section, we trained the model using the method fit. Now we will use the method predict to produce a prediction. Lets import pyplot for plotting; we will also be using some functions from numpy.

```{python}
#create a new input 
new_input=np.arange(1, 100, 1).reshape(-1, 1)

#fit the model
lm.fit(X,Y)
lm
```

```{python}
#produce a prediction
yhat=lm.predict(new_input)
yhat[0:5]
```


```{python}
#plot data
plt.plot(new_input, yhat)
plt.show()
plt.close()
```

### Decision Making: Determining a Good Model Fit¶

Now that we have visualized the different models, and generated the R-squared and MSE values for the fits, how do we determine a good model fit?

- What is a good R-squared value?

When comparing models, the model with the higher R-squared value is a better fit for the data.

- What is a good MSE?

When comparing models, the model with the smallest MSE value is a better fit for the data.

**Let's take a look at the values for the different models.**

Simple Linear Regression: Using Highway-mpg as a Predictor Variable of Price.

- R-squared: 0.49659118843391759
- MSE: 3.16 x10^7

Multiple Linear Regression: Using Horsepower, Curb-weight, Engine-size, and Highway-mpg as Predictor Variables of Price.

- R-squared: 0.80896354913783497
- MSE: 1.2 x10^7

Polynomial Fit: Using Highway-mpg as a Predictor Variable of Price.

- R-squared: 0.6741946663906514
- MSE: 2.05 x 10^7


####  Simple Linear Regression Model (SLR) vs Multiple Linear Regression Model (MLR)

Usually, the more variables you have, the better your model is at predicting, but this is not always true. Sometimes you may not have enough data, you may run into numerical problems, or many of the variables may not be useful and even act as noise. As a result, you should always check the MSE and R^2.

In order to compare the results of the MLR vs SLR models, we look at a combination of both the R-squared and MSE to make the best conclusion about the fit of the model.

- MSE: The MSE of SLR is 3.16x10^7 while MLR has an MSE of 1.2 x10^7. The MSE of MLR is much smaller.
0 R-squared: In this case, we can also see that there is a big difference between the R-squared of the SLR and the R-squared of the MLR. The R-squared for the SLR (~0.497) is very small compared to the R-squared for the MLR (~0.809).

This R-squared in combination with the MSE show that MLR seems like the better model fit in this case compared to SLR.


#### Simple Linear Model (SLR) vs. Polynomial Fit

- MSE: We can see that Polynomial Fit brought down the MSE, since this MSE is smaller than the one from the SLR.
- R-squared: The R-squared for the Polynomial Fit is larger than the R-squared for the SLR, so the Polynomial Fit also brought up the R-squared quite a bit.

Since the Polynomial Fit resulted in a lower MSE and a higher R-squared, we can conclude that this was a better fit model than the simple linear regression for predicting "price" with "highway-mpg" as a predictor variable.

#### Multiple Linear Regression (MLR) vs. Polynomial Fit¶

- MSE: The MSE for the MLR is smaller than the MSE for the Polynomial Fit.
- R-squared: The R-squared for the MLR is also much larger than for the Polynomial Fit.

#### Conclusion

Comparing these three models, we conclude that the MLR model is the best model to be able to predict price from our dataset. This result makes sense since we have 27 variables in total and we know that more than one of those variables are potential predictors of the final car price.

