{
  "hash": "9846a188e13b47b490fb60b00e7c3140",
  "result": {
    "markdown": "# Pre-processing of data in python\n\n## Introduction\n\nData pre-processing is a necessary step in data analysis. It is the process of converting or mapping data from one raw form into another format to make it ready for further analysis. \n\nData pre-processing is often called data cleaning or data wrangling.\n\n- Identifying and handle missing values. A missing value condition occurs whenever a data entry is left empty.\n- Data formatting. Data from different sources maybe in various formats, in different units, or in various conventions. \n- Data normalization (centering/scaling). Different columns of numerical data may have very different ranges and direct comparison is often not meaningful. Normalization is a way to bring all data into a similar range for more useful comparison.\n- Data binning. Binning creates bigger categories from a set of numerical values. It is particularly useful for comparison between groups of data.\n- Turning categorical values to numeric variables to make statistical modeling easier\n\nLet's start with loading our test data\n\n\nYou can find the \"Automobile Dataset\" from the following link: https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data. We will be using this dataset throughout this course.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nsys.executable\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'/opt/anaconda3/bin/python3'\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#load libs\nimport pandas as pd\nimport numpy as np\n\n#get the data url\nurl = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/auto.csv\"\n\n#add a header\nheaders = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]\n\n#download data\ndf = pd.read_csv(url, names = headers)\ndf.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=tex}\n\\begin{tabular}{lrllllllllrrrrrllrlllrllrrl}\n\\toprule\n{} &  symboling & normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &  length &  width &  height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore & stroke &  compression-ratio & horsepower & peak-rpm &  city-mpg &  highway-mpg &  price \\\\\n\\midrule\n0 &          3 &                 ? &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  13495 \\\\\n1 &          3 &                 ? &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  16500 \\\\\n2 &          1 &                 ? &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &   171.2 &   65.5 &    52.4 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &   3.47 &                9.0 &        154 &     5000 &        19 &           26 &  16500 \\\\\n3 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &   176.6 &   66.2 &    54.3 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &   3.40 &               10.0 &        102 &     5500 &        24 &           30 &  13950 \\\\\n4 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &   176.6 &   66.4 &    54.3 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.0 &        115 &     5500 &        18 &           22 &  17450 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Dealing with missing values\n\n- A missing value condition occurs whenever a data entry is left empty\n- Can be represented as: ?, N/A, 0 or a blank cell\n\nTypical options to consider to deal with missing data:\n\n- Check with the collection source to find missing values\n- Remove data were missing value is found, here we can do either drop the whole row or column (decide on what has the least amount of impact)\n    - drop the variable\n    - drop the data entry\n- Replace the missing values\n    - replace with the average (of similar data points)\n    - replace it by frequency\n    - replace it based on other functions\n- Leave it as missing data\n\nNext, let's first convert ? to NaN\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# replace \"?\" to NaN\ndf.replace(\"?\", np.nan, inplace = True)\ndf.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=tex}\n\\begin{tabular}{lrllllllllrrrrrllrlllrllrrl}\n\\toprule\n{} &  symboling & normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &  length &  width &  height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore & stroke &  compression-ratio & horsepower & peak-rpm &  city-mpg &  highway-mpg &  price \\\\\n\\midrule\n0 &          3 &               NaN &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  13495 \\\\\n1 &          3 &               NaN &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  16500 \\\\\n2 &          1 &               NaN &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &   171.2 &   65.5 &    52.4 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &   3.47 &                9.0 &        154 &     5000 &        19 &           26 &  16500 \\\\\n3 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &   176.6 &   66.2 &    54.3 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &   3.40 &               10.0 &        102 &     5500 &        24 &           30 &  13950 \\\\\n4 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &   176.6 &   66.4 &    54.3 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.0 &        115 &     5500 &        18 &           22 &  17450 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n### Using `dropna()`\n\nTo remove data that contains missing values Panda's library has a built-in method called dropna. Essentially, with the dropna method, you can choose to drop rows or columns that contain missing values like NaN.\n\n- axis = 0 --> drop the entire row (default)\n- axis = 1 --> drop the entire column\n- inpalce = True --> modification is done on the dataset directly\n\n```\ndataframes.dropna()\n```\n\nIf we want to remove rows based on a specific column\n\n```\ndataframes.dropna(subset = ['price'], axis = 0, inplace = True)\n```\n\n\n### Replace missing values using `replace()`\n\n```\ndataframe.replace(missing_value, new_value)\n```\n\nReplace a value with the mean of a column:\n\n```\nmean = df['prices'].mean()\ndf['prices'].replace(np.nan, mean)\n```\n\n\n### Practical\n\n#### Identify missing data\n\nNow, let's find out if we have any missing data.\n\nThe missing values are converted by default. We use the following functions to identify these missing values. There are two methods to detect missing data:\n\n- .isnull()\n- .notnull()\n\nThe output is a boolean value indicating whether the value that is passed into the argument is in fact missing data. \"True\" means the value is a missing value while \"False\" means the value is not a missing value\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nmissing_data = df.isnull()\nmissing_data.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=tex}\n\\begin{tabular}{lllllllllllllllllllllllllll}\n\\toprule\n{} &  symboling &  normalized-losses &   make &  fuel-type &  aspiration &  num-of-doors &  body-style &  drive-wheels &  engine-location &  wheel-base &  length &  width &  height &  curb-weight &  engine-type &  num-of-cylinders &  engine-size &  fuel-system &   bore &  stroke &  compression-ratio &  horsepower &  peak-rpm &  city-mpg &  highway-mpg &  price \\\\\n\\midrule\n0 &      False &               True &  False &      False &       False &         False &       False &         False &            False &       False &   False &  False &   False &        False &        False &             False &        False &        False &  False &   False &              False &       False &     False &     False &        False &  False \\\\\n1 &      False &               True &  False &      False &       False &         False &       False &         False &            False &       False &   False &  False &   False &        False &        False &             False &        False &        False &  False &   False &              False &       False &     False &     False &        False &  False \\\\\n2 &      False &               True &  False &      False &       False &         False &       False &         False &            False &       False &   False &  False &   False &        False &        False &             False &        False &        False &  False &   False &              False &       False &     False &     False &        False &  False \\\\\n3 &      False &              False &  False &      False &       False &         False &       False &         False &            False &       False &   False &  False &   False &        False &        False &             False &        False &        False &  False &   False &              False &       False &     False &     False &        False &  False \\\\\n4 &      False &              False &  False &      False &       False &         False &       False &         False &            False &       False &   False &  False &   False &        False &        False &             False &        False &        False &  False &   False &              False &       False &     False &     False &        False &  False \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nUsing a for loop in Python, we can quickly figure out the number of missing values in each column. As mentioned above, \"True\" represents a missing value and \"False\" means the value is present in the dataset. In the body of the for loop the method \".value_counts()\" counts the number of \"True\" values.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print (missing_data[column].value_counts())\n    print(\"\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsymboling\nFalse    205\nName: symboling, dtype: int64\n\nnormalized-losses\nFalse    164\nTrue      41\nName: normalized-losses, dtype: int64\n\nmake\nFalse    205\nName: make, dtype: int64\n\nfuel-type\nFalse    205\nName: fuel-type, dtype: int64\n\naspiration\nFalse    205\nName: aspiration, dtype: int64\n\nnum-of-doors\nFalse    203\nTrue       2\nName: num-of-doors, dtype: int64\n\nbody-style\nFalse    205\nName: body-style, dtype: int64\n\ndrive-wheels\nFalse    205\nName: drive-wheels, dtype: int64\n\nengine-location\nFalse    205\nName: engine-location, dtype: int64\n\nwheel-base\nFalse    205\nName: wheel-base, dtype: int64\n\nlength\nFalse    205\nName: length, dtype: int64\n\nwidth\nFalse    205\nName: width, dtype: int64\n\nheight\nFalse    205\nName: height, dtype: int64\n\ncurb-weight\nFalse    205\nName: curb-weight, dtype: int64\n\nengine-type\nFalse    205\nName: engine-type, dtype: int64\n\nnum-of-cylinders\nFalse    205\nName: num-of-cylinders, dtype: int64\n\nengine-size\nFalse    205\nName: engine-size, dtype: int64\n\nfuel-system\nFalse    205\nName: fuel-system, dtype: int64\n\nbore\nFalse    201\nTrue       4\nName: bore, dtype: int64\n\nstroke\nFalse    201\nTrue       4\nName: stroke, dtype: int64\n\ncompression-ratio\nFalse    205\nName: compression-ratio, dtype: int64\n\nhorsepower\nFalse    203\nTrue       2\nName: horsepower, dtype: int64\n\npeak-rpm\nFalse    203\nTrue       2\nName: peak-rpm, dtype: int64\n\ncity-mpg\nFalse    205\nName: city-mpg, dtype: int64\n\nhighway-mpg\nFalse    205\nName: highway-mpg, dtype: int64\n\nprice\nFalse    201\nTrue       4\nName: price, dtype: int64\n\n```\n:::\n:::\n\n\nBased on the summary above, each column has 205 rows of data and seven of the columns containing missing data:\n\n\"normalized-losses\": 41 missing data\n\"num-of-doors\": 2 missing data\n\"bore\": 4 missing data\n\"stroke\" : 4 missing data\n\"horsepower\": 2 missing data\n\"peak-rpm\": 2 missing data\n\"price\": 4 missing data\n\nNow, we have to decide what to do with this missing data. Whole columns should be dropped only if most entries in the column are empty. In our dataset, none of the columns are empty enough to drop entirely. We have some freedom in choosing which method to replace data; however, some methods may seem more reasonable than others. We will apply each method to many different columns:\n\nReplace by mean:\n\n- \"normalized-losses\": 41 missing data, replace them with mean\n- \"stroke\": 4 missing data, replace them with mean\n- \"bore\": 4 missing data, replace them with mean\n- \"horsepower\": 2 missing data, replace them with mean\n- \"peak-rpm\": 2 missing data, replace them with mean\n\nReplace by frequency:\n\n- \"num-of-doors\": 2 missing data, replace them with \"four\".\n    - Reason: 84% sedans is four doors. Since four doors is most frequent, it is most likely to occur\n\nDrop the whole row:\n\n- \"price\": 4 missing data, simply delete the whole row\n    - Reason: price is what we want to predict. Any data entry without price data cannot be used for prediction; therefore any row now without price data is not useful to us\n\n#### Deal with the \"normalized-losses\" column\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\navg_norm_loss = df['normalized-losses'].astype('float').mean(axis = 0)\nprint(\"Average of normalized losses:\", avg_norm_loss)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage of normalized losses: 122.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf['normalized-losses'].replace(np.nan, avg_norm_loss, inplace = True)\n```\n:::\n\n\n#### Deal with the \"bore\" column¶\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\navg_bore = df['bore'].astype('float').mean(axis = 0)\nprint(\"Average of bore:\", avg_bore)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage of bore: 3.3297512437810957\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf['bore'].replace(np.nan, avg_bore, inplace = True)\n```\n:::\n\n\n#### Deal with the \"stroke\" column\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\navg_bore = df['bore'].astype('float').mean(axis = 0)\nprint(\"Average of bore:\", avg_bore)\n\ndf['bore'].replace(np.nan, avg_bore, inplace = True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage of bore: 3.329751243781096\n```\n:::\n:::\n\n\n#### Deal with the \"horsepower\" column\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\navg_horsepower = df['horsepower'].astype('float').mean(axis = 0)\nprint(\"Average of horsepower:\", avg_horsepower)\n\ndf['horsepower'].replace(np.nan, avg_horsepower, inplace = True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage of horsepower: 104.25615763546799\n```\n:::\n:::\n\n\n#### Deal with the \"peak-rpm\" column\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\navg_peakrpm = df['peak-rpm'].astype('float').mean(axis = 0)\nprint(\"Average of peak-rpm:\", avg_peakrpm)\n\ndf['peak-rpm'].replace(np.nan, avg_peakrpm, inplace = True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage of peak-rpm: 5125.369458128079\n```\n:::\n:::\n\n\n#### Replace missing door values with frequency\n\nTo see which values are present in a particular column, we can use the `.value_counts()` method:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf['num-of-doors'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &  num-of-doors \\\\\n\\midrule\nfour &           114 \\\\\ntwo  &            89 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nWe can see that four doors are the most common type. We can also use the \".idxmax()\" method to calculate the most common type automatically:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndoors_to_replace = df['num-of-doors'].value_counts().idxmax()\ndoors_to_replace\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'four'\n```\n:::\n:::\n\n\nNow we can replace our missing values:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf['num-of-doors'].replace(np.nan,doors_to_replace, inplace = True )\n```\n:::\n\n\n#### Drop rows for the price column\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n#drop nan\ndf.dropna(subset = ['price'], axis = 0 , inplace = True)\n\n#reset index, because we dropped two ros\ndf.reset_index(drop = True, inplace = True)\n\n#view df\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=tex}\n\\begin{tabular}{lrllllllllrrrrrllrlllrllrrl}\n\\toprule\n{} &  symboling & normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &  length &  width &  height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore & stroke &  compression-ratio & horsepower & peak-rpm &  city-mpg &  highway-mpg &  price \\\\\n\\midrule\n0 &          3 &             122.0 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  13495 \\\\\n1 &          3 &             122.0 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  16500 \\\\\n2 &          1 &             122.0 &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &   171.2 &   65.5 &    52.4 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &   3.47 &                9.0 &        154 &     5000 &        19 &           26 &  16500 \\\\\n3 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &   176.6 &   66.2 &    54.3 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &   3.40 &               10.0 &        102 &     5500 &        24 &           30 &  13950 \\\\\n4 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &   176.6 &   66.4 &    54.3 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.0 &        115 &     5500 &        18 &           22 &  17450 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Data formatting\n\nData is usually collected from different places by different people which may be stored in different formats. Data formatting means bringing data into a common standard of expression that allows users to make meaningful comparisons.  As a part of dataset cleaning, data formatting ensures the data is consistent and easily understandable. \n\nFor example, people may use different expressions to represent New York City, such as uppercase N uppercase Y, uppercase N lowercase y, uppercase N uppercase Y and New York. \n\n\nFormatted data is:\n\n- more clear\n- easier to aggregate\n- easier to compare\n\n\n### Incorrect data types\n\nSometimes the wrong data type is assigned to a feature. For example a number might be stored in an object, thus we could not use the mean function, without correcting this.\n\nTo identify a datatype:\n\n```\ndf.dtypes()\n```\n\nTo convert dataframes:\n\n```\ndf.astype()\n```\n\n\n\n### Practical\n\n#### Deal with incorrect data types\n\nThe last step in data cleaning is checking and making sure that all data is in the correct format (int, float, text or other).\n\nIn Pandas, we use:\n\n- .dtype() to check the data type\n- .astype() to change the data type\n\n\nLet's check the data types for each column:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=tex}\n\\begin{tabular}{ll}\n\\toprule\n{} &        0 \\\\\n\\midrule\nsymboling         &    int64 \\\\\nnormalized-losses &   object \\\\\nmake              &   object \\\\\nfuel-type         &   object \\\\\naspiration        &   object \\\\\nnum-of-doors      &   object \\\\\nbody-style        &   object \\\\\ndrive-wheels      &   object \\\\\nengine-location   &   object \\\\\nwheel-base        &  float64 \\\\\nlength            &  float64 \\\\\nwidth             &  float64 \\\\\nheight            &  float64 \\\\\ncurb-weight       &    int64 \\\\\nengine-type       &   object \\\\\nnum-of-cylinders  &   object \\\\\nengine-size       &    int64 \\\\\nfuel-system       &   object \\\\\nbore              &   object \\\\\nstroke            &   object \\\\\ncompression-ratio &  float64 \\\\\nhorsepower        &   object \\\\\npeak-rpm          &   object \\\\\ncity-mpg          &    int64 \\\\\nhighway-mpg       &    int64 \\\\\nprice             &   object \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nAs we can see above, some columns are not of the correct data type. Numerical variables should have type 'float' or 'int', and variables with strings such as categories should have type 'object'. \n\nFor example, 'bore' and 'stroke' variables are numerical values that describe the engines, so we should expect them to be of the type 'float' or 'int'; however, they are shown as type 'object'. We have to convert data types into a proper format for each column using the \"astype()\" method.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf[['bore', 'stroke']] = df[['bore', 'stroke']].astype('float')\ndf[[\"normalized-losses\"]] = df[[\"normalized-losses\"]].astype(\"int\")\ndf[[\"price\"]] = df[[\"price\"]].astype(\"float\")\ndf[[\"peak-rpm\"]] = df[[\"peak-rpm\"]].astype(\"float\")\n\n#check if that worked \ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=tex}\n\\begin{tabular}{ll}\n\\toprule\n{} &        0 \\\\\n\\midrule\nsymboling         &    int64 \\\\\nnormalized-losses &    int64 \\\\\nmake              &   object \\\\\nfuel-type         &   object \\\\\naspiration        &   object \\\\\nnum-of-doors      &   object \\\\\nbody-style        &   object \\\\\ndrive-wheels      &   object \\\\\nengine-location   &   object \\\\\nwheel-base        &  float64 \\\\\nlength            &  float64 \\\\\nwidth             &  float64 \\\\\nheight            &  float64 \\\\\ncurb-weight       &    int64 \\\\\nengine-type       &   object \\\\\nnum-of-cylinders  &   object \\\\\nengine-size       &    int64 \\\\\nfuel-system       &   object \\\\\nbore              &  float64 \\\\\nstroke            &  float64 \\\\\ncompression-ratio &  float64 \\\\\nhorsepower        &   object \\\\\npeak-rpm          &  float64 \\\\\ncity-mpg          &    int64 \\\\\nhighway-mpg       &    int64 \\\\\nprice             &  float64 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Data normalization\n\n- Uniforms the features value with different ranges: if data are in different ranges, such as age 20-40 and income 10000 to 50000, are hard to compare and income will influence the result more but it might not be more important as a data predictor.\n- We could normalize all values to be in a range from 0-1\n\nThere are several approches:\n\n- **Simple feature scaling**: divides each value by the maximum value for that feature. This makes the new values range between zero and one.\n    \n```\ndf['length'] = df['length'] /df['length'].max()\n```\n\n- **Min-max**: each value X_old subtract it from the minimum value of that feature, then divides by the range of that feature\n\n```\ndf['length'] = (df['length'] - df['length'].min())/\n                (df['length'].max()-df['length'].min())\n```\n\n- **Z-score**: for each value you subtract the mu which is the average of the feature, and then divide by the standard deviation sigma.\n\n```\ndf['length'] = (df['length']-df['length'],mean()).df['length'].std()\n```\n\n### Practical\n\n#### Data Standardization\n\nIn our dataset, the fuel consumption columns \"city-mpg\" and \"highway-mpg\" are represented by mpg (miles per gallon) unit. Assume we are developing an application in a country that accepts the fuel consumption with L/100km standard.\n\nWe will need to apply data transformation to transform mpg into L/100km.\n\nThe formula for unit conversion is:\n\nL/100km = 235 / mpg\n\nWe can do many mathematical operations directly in Pandas.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Convert mpg to L/100km by mathematical operation (235 divided by mpg)\ndf['city-L/100km'] = 235/df['city-mpg']\n\n#view transformed data\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=tex}\n\\begin{tabular}{lrrlllllllrrrrrllrlrrrlrrrrr}\n\\toprule\n{} &  symboling &  normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &  length &  width &  height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore &  stroke &  compression-ratio & horsepower &  peak-rpm &  city-mpg &  highway-mpg &    price &  city-L/100km \\\\\n\\midrule\n0 &          3 &                122 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &        111 &    5000.0 &        21 &           27 &  13495.0 &     11.190476 \\\\\n1 &          3 &                122 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &        111 &    5000.0 &        21 &           27 &  16500.0 &     11.190476 \\\\\n2 &          1 &                122 &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &   171.2 &   65.5 &    52.4 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &    3.47 &                9.0 &        154 &    5000.0 &        19 &           26 &  16500.0 &     12.368421 \\\\\n3 &          2 &                164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &   176.6 &   66.2 &    54.3 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &    3.40 &               10.0 &        102 &    5500.0 &        24 &           30 &  13950.0 &      9.791667 \\\\\n4 &          2 &                164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &   176.6 &   66.4 &    54.3 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &    3.40 &                8.0 &        115 &    5500.0 &        18 &           22 &  17450.0 &     13.055556 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nNext, transform mpg to L/100km in the column of \"highway-mpg\" and change the name of column to \"highway-L/100km\".\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Convert mpg to L/100km by mathematical operation (235 divided by mpg)\ndf['highway-L/100km'] = 235/df['highway-mpg']\n\n#view transformed data\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=tex}\n\\begin{tabular}{lrrlllllllrrrrrllrlrrrlrrrrrr}\n\\toprule\n{} &  symboling &  normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &  length &  width &  height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore &  stroke &  compression-ratio & horsepower &  peak-rpm &  city-mpg &  highway-mpg &    price &  city-L/100km &  highway-L/100km \\\\\n\\midrule\n0 &          3 &                122 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &        111 &    5000.0 &        21 &           27 &  13495.0 &     11.190476 &         8.703704 \\\\\n1 &          3 &                122 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &        111 &    5000.0 &        21 &           27 &  16500.0 &     11.190476 &         8.703704 \\\\\n2 &          1 &                122 &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &   171.2 &   65.5 &    52.4 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &    3.47 &                9.0 &        154 &    5000.0 &        19 &           26 &  16500.0 &     12.368421 &         9.038462 \\\\\n3 &          2 &                164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &   176.6 &   66.2 &    54.3 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &    3.40 &               10.0 &        102 &    5500.0 &        24 &           30 &  13950.0 &      9.791667 &         7.833333 \\\\\n4 &          2 &                164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &   176.6 &   66.4 &    54.3 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &    3.40 &                8.0 &        115 &    5500.0 &        18 &           22 &  17450.0 &     13.055556 &        10.681818 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n#### Data normalization\n\nTo demonstrate normalization, let's say we want to scale the columns \"length\", \"width\" and \"height\".\n\nTarget: would like to normalize those variables so their value ranges from 0 to 1\nApproach: replace original value by (original value)/(maximum value)\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# replace (original value) by (original value)/(maximum value)\ndf['length'] = df['length']/df['length'].max()\ndf['width'] = df['width']/df['width'].max()\ndf['height'] = df['height']/df['height'].max()\n\n\ndf[['length','width', 'height']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=tex}\n\\begin{tabular}{lrrr}\n\\toprule\n{} &    length &     width &    height \\\\\n\\midrule\n0 &  0.811148 &  0.890278 &  0.816054 \\\\\n1 &  0.811148 &  0.890278 &  0.816054 \\\\\n2 &  0.822681 &  0.909722 &  0.876254 \\\\\n3 &  0.848630 &  0.919444 &  0.908027 \\\\\n4 &  0.848630 &  0.922222 &  0.908027 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Binning\n\n- Binning: Grouping values into bins, i.e. we can bin “age” into [0 to 5], [6 to 10], [11 to 15] and so on\n- Can sometimes increase the accuracy of models\n- Converts numeric into categorical variables, i.e. the different prices can be grouped into low, medium and high\n- Group a set of numerical values into a set of bins\n\nWe can use the numpy function “linspace” to return the array “bins” that contains 4 equally spaced numbers over the specified interval of the price. We create a list “group_names “ that contains the different bin names. We use the pandas function ”cut” to segment and sort the data values into bins.\n\n```\nbin = np.linspace(min(df['price']),max(df['price']),4)\ngroup_names = ['Low', 'Medium', 'High']\ndf['price_binned'] = pd.cut(df['price'], bins, labels = group_names, include_lowest = True)\n```\n\nThe distribution of data can be visualized using histograms.\n\n### Practical\n\n#### Defining bins\n\nIn our dataset, \"horsepower\" is a real valued variable ranging from 48 to 288 and it has 59 unique values. What if we only care about the price difference between cars with high horsepower, medium horsepower, and little horsepower (3 types)? Can we rearrange them into three ‘bins' to simplify analysis?\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n#check data format\nprint(df['horsepower'].dtypes)\n\n#convert the data to the correct format\ndf['horsepower'] = df['horsepower'].astype(int, copy=True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nobject\n```\n:::\n:::\n\n\nLet's plot the histogram of horsepower to see what the distribution of horsepower looks like.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n#define what we want to plot\nplt.hist(df[\"horsepower\"])\n\n#set axis labels\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")\n\n#plot\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_preprocessing_of_data_files/figure-pdf/cell-24-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe would like 3 bins of equal size bandwidth so we use numpy's linspace(start_value, end_value, numbers_generated function.\n\n- Since we want to include the minimum value of horsepower, we want to set start_value = min(df[\"horsepower\"]).\n- Since we want to include the maximum value of horsepower, we want to set end_value = max(df[\"horsepower\"]).\n-  Since we are building 3 bins of equal length, there should be 4 dividers, so numbers_generated = 4.\n\nWe build a bin array with a minimum value to a maximum value by using the bandwidth calculated above. The values will determine when one bin ends and another begins.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nbins = np.linspace(min(df['horsepower']), max(df['horsepower']),4)\nbins\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\narray([ 48.        , 119.33333333, 190.66666667, 262.        ])\n```\n:::\n:::\n\n\nWe set group names:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ngroup_names = ['Low' , 'Medium', 'High']\n```\n:::\n\n\nWe apply the function \"cut\" to determine what each value of df['horsepower'] belongs to.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndf['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels = group_names, include_lowest = True)\ndf[['horsepower', 'horsepower-binned']].head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=tex}\n\\begin{tabular}{lrl}\n\\toprule\n{} &  horsepower & horsepower-binned \\\\\n\\midrule\n0 &         111 &               Low \\\\\n1 &         111 &               Low \\\\\n2 &         154 &            Medium \\\\\n3 &         102 &               Low \\\\\n4 &         115 &               Low \\\\\n5 &         110 &               Low \\\\\n6 &         110 &               Low \\\\\n7 &         110 &               Low \\\\\n8 &         140 &            Medium \\\\\n9 &         101 &               Low \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nLet's see the number of vehicles in each bin:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndf['horsepower-binned'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &  horsepower-binned \\\\\n\\midrule\nLow    &                153 \\\\\nMedium &                 43 \\\\\nHigh   &                  5 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nLet's plot the distribution of each bin:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n#define the bargraph\nplt.bar(group_names, df['horsepower-binned'].value_counts())\n\n#set labels\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")\n\n#print\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_preprocessing_of_data_files/figure-pdf/cell-29-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n#### Visualizing bins\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# draw historgram of attribute \"horsepower\" with bins = 3\nplt.hist(df[\"horsepower\"], bins = 3)\n\n# set x/y labels and plot title\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_preprocessing_of_data_files/figure-pdf/cell-30-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Turning categorical variables into quantitative variables\n\n- Most statistical models cannot take in objects or strings as input and for model training only take the numbers as inputs. \n- We encode the values by adding new features corresponding to each unique element in the original feature we would like to encode. I.e if we have two unique values, gas and diesel, we create two new features and assign 0 and 1 to each category. This technique is also called one-hot encoding.\n- `pd.get_dummies()` method converts categorical variables to dummy variables, such as 0 and 1\n\nIndicator value: An indicator variable (or dummy variable) is a numerical variable used to label categories. They are called 'dummies' because the numbers themselves don't have inherent meaning.\n\nWe use indicator variables so we can use categorical variables for regression analysis in the later modules.\n\n```\npd.get_dummies(df['fuel'])\n```\n\n\n### Practical\n\nIn this practical we want to answer the question: What is the fuel consumption (L/100k) rate for the diesel car?\n\nWe see the column \"fuel-type\" has two unique values: \"gas\" or \"diesel\". Regression doesn't understand words, only numbers. To use this attribute in regression analysis, we convert \"fuel-type\" to indicator variables.\n\nWe will use pandas' method 'get_dummies' to assign numerical values to different categories of fuel type.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndummy_variable_1 = pd.get_dummies(df['fuel-type'])\ndummy_variable_1.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=tex}\n\\begin{tabular}{lrr}\n\\toprule\n{} &  diesel &  gas \\\\\n\\midrule\n0 &       0 &    1 \\\\\n1 &       0 &    1 \\\\\n2 &       0 &    1 \\\\\n3 &       0 &    1 \\\\\n4 &       0 &    1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nChange the column names for clarity\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndummy_variable_1.rename(columns={'gas':'fuel-type-gas', 'diesel':'fuel-type-diesel'}, inplace=True)\ndummy_variable_1.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=tex}\n\\begin{tabular}{lrr}\n\\toprule\n{} &  fuel-type-diesel &  fuel-type-gas \\\\\n\\midrule\n0 &                 0 &              1 \\\\\n1 &                 0 &              1 \\\\\n2 &                 0 &              1 \\\\\n3 &                 0 &              1 \\\\\n4 &                 0 &              1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nReplace the dummy df with our original gas column\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# merge data frame \"df\" and \"dummy_variable_1\" \ndf = pd.concat([df, dummy_variable_1], axis = 1)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=tex}\n\\begin{tabular}{lrrlllllllrrrrrllrlrrrrrrrrrrlrr}\n\\toprule\n{} &  symboling &  normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &    length &     width &    height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore &  stroke &  compression-ratio &  horsepower &  peak-rpm &  city-mpg &  highway-mpg &    price &  city-L/100km &  highway-L/100km & horsepower-binned &  fuel-type-diesel &  fuel-type-gas \\\\\n\\midrule\n0 &          3 &                122 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &  0.811148 &  0.890278 &  0.816054 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &         111 &    5000.0 &        21 &           27 &  13495.0 &     11.190476 &         8.703704 &               Low &                 0 &              1 \\\\\n1 &          3 &                122 &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &  0.811148 &  0.890278 &  0.816054 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &         111 &    5000.0 &        21 &           27 &  16500.0 &     11.190476 &         8.703704 &               Low &                 0 &              1 \\\\\n2 &          1 &                122 &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &  0.822681 &  0.909722 &  0.876254 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &    3.47 &                9.0 &         154 &    5000.0 &        19 &           26 &  16500.0 &     12.368421 &         9.038462 &            Medium &                 0 &              1 \\\\\n3 &          2 &                164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &  0.848630 &  0.919444 &  0.908027 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &    3.40 &               10.0 &         102 &    5500.0 &        24 &           30 &  13950.0 &      9.791667 &         7.833333 &               Low &                 0 &              1 \\\\\n4 &          2 &                164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &  0.848630 &  0.922222 &  0.908027 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &    3.40 &                8.0 &         115 &    5500.0 &        18 &           22 &  17450.0 &     13.055556 &        10.681818 &               Low &                 0 &              1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nDrop original column \"fuel-type\" from \"df\"\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndf.drop(\"fuel-type\", axis = 1, inplace = True)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=tex}\n\\begin{tabular}{lrrllllllrrrrrllrlrrrrrrrrrrlrr}\n\\toprule\n{} &  symboling &  normalized-losses &         make & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &    length &     width &    height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore &  stroke &  compression-ratio &  horsepower &  peak-rpm &  city-mpg &  highway-mpg &    price &  city-L/100km &  highway-L/100km & horsepower-binned &  fuel-type-diesel &  fuel-type-gas \\\\\n\\midrule\n0 &          3 &                122 &  alfa-romero &        std &          two &  convertible &          rwd &           front &        88.6 &  0.811148 &  0.890278 &  0.816054 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &         111 &    5000.0 &        21 &           27 &  13495.0 &     11.190476 &         8.703704 &               Low &                 0 &              1 \\\\\n1 &          3 &                122 &  alfa-romero &        std &          two &  convertible &          rwd &           front &        88.6 &  0.811148 &  0.890278 &  0.816054 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &    2.68 &                9.0 &         111 &    5000.0 &        21 &           27 &  16500.0 &     11.190476 &         8.703704 &               Low &                 0 &              1 \\\\\n2 &          1 &                122 &  alfa-romero &        std &          two &    hatchback &          rwd &           front &        94.5 &  0.822681 &  0.909722 &  0.876254 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &    3.47 &                9.0 &         154 &    5000.0 &        19 &           26 &  16500.0 &     12.368421 &         9.038462 &            Medium &                 0 &              1 \\\\\n3 &          2 &                164 &         audi &        std &         four &        sedan &          fwd &           front &        99.8 &  0.848630 &  0.919444 &  0.908027 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &    3.40 &               10.0 &         102 &    5500.0 &        24 &           30 &  13950.0 &      9.791667 &         7.833333 &               Low &                 0 &              1 \\\\\n4 &          2 &                164 &         audi &        std &         four &        sedan &          4wd &           front &        99.4 &  0.848630 &  0.922222 &  0.908027 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &    3.40 &                8.0 &         115 &    5500.0 &        18 &           22 &  17450.0 &     13.055556 &        10.681818 &               Low &                 0 &              1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nSimilar to before, create an indicator variable for the column \"aspiration\"\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n#create dummy\ndummy_variable_2 = pd.get_dummies(df['aspiration'])\n\n#change the columns\ndummy_variable_2.rename(columns = {'std': 'aspiration-std', 'turbo':'aspiration-turbo'}, inplace = True)\n\nprint(dummy_variable_2.head())\n\n#combine with previous df\ndf = pd.concat([df,dummy_variable_2], axis = 1)\n\n#drop original aspiration column\ndf.drop('aspiration', axis = 1, inplace = True)\n\nprint(df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   aspiration-std  aspiration-turbo\n0               1                 0\n1               1                 0\n2               1                 0\n3               1                 0\n4               1                 0\n   symboling  normalized-losses         make num-of-doors   body-style  \\\n0          3                122  alfa-romero          two  convertible   \n1          3                122  alfa-romero          two  convertible   \n2          1                122  alfa-romero          two    hatchback   \n3          2                164         audi         four        sedan   \n4          2                164         audi         four        sedan   \n\n  drive-wheels engine-location  wheel-base    length     width  ...  city-mpg  \\\n0          rwd           front        88.6  0.811148  0.890278  ...        21   \n1          rwd           front        88.6  0.811148  0.890278  ...        21   \n2          rwd           front        94.5  0.822681  0.909722  ...        19   \n3          fwd           front        99.8  0.848630  0.919444  ...        24   \n4          4wd           front        99.4  0.848630  0.922222  ...        18   \n\n   highway-mpg    price city-L/100km  highway-L/100km horsepower-binned  \\\n0           27  13495.0    11.190476         8.703704               Low   \n1           27  16500.0    11.190476         8.703704               Low   \n2           26  16500.0    12.368421         9.038462            Medium   \n3           30  13950.0     9.791667         7.833333               Low   \n4           22  17450.0    13.055556        10.681818               Low   \n\n   fuel-type-diesel  fuel-type-gas  aspiration-std  aspiration-turbo  \n0                 0              1               1                 0  \n1                 0              1               1                 0  \n2                 0              1               1                 0  \n3                 0              1               1                 0  \n4                 0              1               1                 0  \n\n[5 rows x 31 columns]\n```\n:::\n:::\n\n\nStore clean df\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndf.to_csv(\"../data/clean_df.csv\")\n```\n:::\n\n\n",
    "supporting": [
      "2_preprocessing_of_data_files/figure-pdf"
    ],
    "filters": []
  }
}