{
  "hash": "d2bb3651f8fff549a4c4ba3182e12d8f",
  "result": {
    "markdown": "# Importing datasets\n\nData analysis and, in essence,data science, helps us unlock the information and insights from raw data to answer our questions. So data analysis plays an important role by helping us to discover useful information from the data, answer questions, and even predict the future or the unknown.\n\nThere are various formats for a dataset: .csv, .json, .xlsx etc. The dataset can be stored in different places, on your local machine or sometimes online.\n\nIn our case, the Automobile Dataset is an online source, and it is in a CSV (comma separated value) format. Let's use this dataset as an example to practice data reading.\n\nData source: https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data\nData type: csv\n\n\n## Understanding the data\n\nThe dataset used in this course is an open csv dataset by Jeffrey C. Schlemmer.\n\n**Symboling** =  the insurance risk level of a car. Cars are initially assigned a risk factor symbol associated with their price. Then, if an automobile is more risky, this symbol is adjusted by moving it up the scale. A value of plus three indicates that the auto is risky. Minus three, that is probably pretty safe.\n\n**Normalized-losses** =  the relative average loss payment per insured vehicle year. This value is normalized for all autos within a particular size classification, two door small, station wagons, sports specialty, etc., and represents the average loss per car per year. \n\n**Price** =  our target value or label. This means price is the value that we want to predict from the dataset and the predictors should be all the other variables listed like symboling, normalized-losses, make, and so on.\n\n\n## Python packages for data science\n\nA Python library is a collection of functions and methods that allow you to perform lots of actions without writing any code. The libraries usually contain built in modules providing different functionalities which you can use directly.\n\n### Scientific computing libs\n\n- Pandas:  offers data structure and tools for effective data manipulation and analysis. It provides facts, access to structured data. The primary instrument of Pandas is the two dimensional table consisting of column and row labels, which are called a data frame.\n- Numpy: uses arrays for its inputs and outputs. It can be extended to objects for matrices and with minor coding changes, developers can perform fast array processing.\n- SciPy: ncludes functions for some advanced math problems as listed on this slide, as well as data visualization.\n\n\n### Data vis libs\n\n- Matplotlib: great for making graphs and plots. The graphs are also highly customizable. \n- Seaborn: based on Matplotlib. It's very easy to generate various plots such as heat maps, time series and violin plots.\n\n\n### Algorithm libs\n\n- Scikit-learn: contains tools statistical modeling, including regression, classification, clustering, and so on. \n- Statsmodels: a Python module that allows users to explore data, estimate statistical models and perform statistical tests. \n\n\n\n## Importing an exporting data in python\n\nProcess of loading and reading data into python from various resources.\n\nImportant properties:\n\n- Format\n- File path\n\n\n### Importing a csv in pandas\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#import lib\nimport pandas as pd\nimport numpy as np\n\n#store url were we want to retrieve our data in a variable\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data\"\n\n#read in the data\ndf = pd.read_csv(url, header = None)\n\n#view first rows of the data\ndf.head(n=4)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=tex}\n\\begin{tabular}{lrllllllllrrrrrllrlllrllrrl}\n\\toprule\n{} &  0  &   1  &           2  &   3  &   4  &    5  &           6  &   7  &     8  &    9  &     10 &    11 &    12 &    13 &    14 &    15 &   16 &    17 &    18 &    19 &    20 &   21 &    22 &  23 &  24 &     25 \\\\\n\\midrule\n0 &   3 &    ? &  alfa-romero &  gas &  std &   two &  convertible &  rwd &  front &  88.6 &  168.8 &  64.1 &  48.8 &  2548 &  dohc &  four &  130 &  mpfi &  3.47 &  2.68 &   9.0 &  111 &  5000 &  21 &  27 &  13495 \\\\\n1 &   3 &    ? &  alfa-romero &  gas &  std &   two &  convertible &  rwd &  front &  88.6 &  168.8 &  64.1 &  48.8 &  2548 &  dohc &  four &  130 &  mpfi &  3.47 &  2.68 &   9.0 &  111 &  5000 &  21 &  27 &  16500 \\\\\n2 &   1 &    ? &  alfa-romero &  gas &  std &   two &    hatchback &  rwd &  front &  94.5 &  171.2 &  65.5 &  52.4 &  2823 &  ohcv &   six &  152 &  mpfi &  2.68 &  3.47 &   9.0 &  154 &  5000 &  19 &  26 &  16500 \\\\\n3 &   2 &  164 &         audi &  gas &  std &  four &        sedan &  fwd &  front &  99.8 &  176.6 &  66.2 &  54.3 &  2337 &   ohc &  four &  109 &  mpfi &  3.19 &  3.40 &  10.0 &  102 &  5500 &  24 &  30 &  13950 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n### Add Headers\n\nTake a look at our dataset. Pandas automatically set the header with an integer starting from 0.\n\nTo better describe our data, we can introduce a header. This information is available at: https://archive.ics.uci.edu/ml/datasets/Automobile.\n\nThus, we have to add headers manually.\n\nFirst, we create a list \"headers\" that include all column names in order. Then, we use dataframe.columns = headers to replace the headers with the list we created.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# create headers list\nheaders = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]\n\nprint(\"headers\\n\", headers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nheaders\n ['symboling', 'normalized-losses', 'make', 'fuel-type', 'aspiration', 'num-of-doors', 'body-style', 'drive-wheels', 'engine-location', 'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-type', 'num-of-cylinders', 'engine-size', 'fuel-system', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg', 'price']\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#replace the headers in our df\ndf.columns = headers\ndf.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=tex}\n\\begin{tabular}{lrllllllllrrrrrllrlllrllrrl}\n\\toprule\n{} &  symboling & normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &  length &  width &  height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore & stroke &  compression-ratio & horsepower & peak-rpm &  city-mpg &  highway-mpg &  price \\\\\n\\midrule\n0 &          3 &                 ? &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  13495 \\\\\n1 &          3 &                 ? &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  16500 \\\\\n2 &          1 &                 ? &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &   171.2 &   65.5 &    52.4 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &   3.47 &                9.0 &        154 &     5000 &        19 &           26 &  16500 \\\\\n3 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &   176.6 &   66.2 &    54.3 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &   3.40 &               10.0 &        102 &     5500 &        24 &           30 &  13950 \\\\\n4 &          2 &               164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &   176.6 &   66.4 &    54.3 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.0 &        115 &     5500 &        18 &           22 &  17450 \\\\\n5 &          2 &                 ? &         audi &       gas &        std &          two &        sedan &          fwd &           front &        99.8 &   177.3 &   66.3 &    53.1 &         2507 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.5 &        110 &     5500 &        19 &           25 &  15250 \\\\\n6 &          1 &               158 &         audi &       gas &        std &         four &        sedan &          fwd &           front &       105.8 &   192.7 &   71.4 &    55.7 &         2844 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.5 &        110 &     5500 &        19 &           25 &  17710 \\\\\n7 &          1 &                 ? &         audi &       gas &        std &         four &        wagon &          fwd &           front &       105.8 &   192.7 &   71.4 &    55.7 &         2954 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.5 &        110 &     5500 &        19 &           25 &  18920 \\\\\n8 &          1 &               158 &         audi &       gas &      turbo &         four &        sedan &          fwd &           front &       105.8 &   192.7 &   71.4 &    55.9 &         3086 &         ohc &             five &          131 &        mpfi &  3.13 &   3.40 &                8.3 &        140 &     5500 &        17 &           20 &  23875 \\\\\n9 &          0 &                 ? &         audi &       gas &      turbo &          two &    hatchback &          4wd &           front &        99.5 &   178.2 &   67.9 &    52.0 &         3053 &         ohc &             five &          131 &        mpfi &  3.13 &   3.40 &                7.0 &        160 &     5500 &        16 &           22 &      ? \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nWe need to use `replace` to replace the \"?\" symbol with NaN so the `dropna()` can remove the missing values.\n\nIn `dropna()` we use the following arguments:\n\n- axis: Determine if rows or columns which contain missing values are removed.\n    - 0, or ‘index’ : Drop rows which contain missing values.\n    - 1, or ‘columns’ : Drop columns which contain missing value.\n    - default = 0\n- subset: Labels along other axis to consider, e.g. if you are dropping rows these would be a list of columns to include.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#replace the ? symbol\ndf1 = df.replace('?', np.NaN)\n\n#drop missing values in the price column\ndf = df1.dropna(subset=['price'], axis = 0)\ndf.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=tex}\n\\begin{tabular}{lrllllllllrrrrrllrlllrllrrl}\n\\toprule\n{} &  symboling & normalized-losses &         make & fuel-type & aspiration & num-of-doors &   body-style & drive-wheels & engine-location &  wheel-base &  length &  width &  height &  curb-weight & engine-type & num-of-cylinders &  engine-size & fuel-system &  bore & stroke &  compression-ratio & horsepower & peak-rpm &  city-mpg &  highway-mpg &  price \\\\\n\\midrule\n0  &          3 &               NaN &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  13495 \\\\\n1  &          3 &               NaN &  alfa-romero &       gas &        std &          two &  convertible &          rwd &           front &        88.6 &   168.8 &   64.1 &    48.8 &         2548 &        dohc &             four &          130 &        mpfi &  3.47 &   2.68 &                9.0 &        111 &     5000 &        21 &           27 &  16500 \\\\\n2  &          1 &               NaN &  alfa-romero &       gas &        std &          two &    hatchback &          rwd &           front &        94.5 &   171.2 &   65.5 &    52.4 &         2823 &        ohcv &              six &          152 &        mpfi &  2.68 &   3.47 &                9.0 &        154 &     5000 &        19 &           26 &  16500 \\\\\n3  &          2 &               164 &         audi &       gas &        std &         four &        sedan &          fwd &           front &        99.8 &   176.6 &   66.2 &    54.3 &         2337 &         ohc &             four &          109 &        mpfi &  3.19 &   3.40 &               10.0 &        102 &     5500 &        24 &           30 &  13950 \\\\\n4  &          2 &               164 &         audi &       gas &        std &         four &        sedan &          4wd &           front &        99.4 &   176.6 &   66.4 &    54.3 &         2824 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.0 &        115 &     5500 &        18 &           22 &  17450 \\\\\n5  &          2 &               NaN &         audi &       gas &        std &          two &        sedan &          fwd &           front &        99.8 &   177.3 &   66.3 &    53.1 &         2507 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.5 &        110 &     5500 &        19 &           25 &  15250 \\\\\n6  &          1 &               158 &         audi &       gas &        std &         four &        sedan &          fwd &           front &       105.8 &   192.7 &   71.4 &    55.7 &         2844 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.5 &        110 &     5500 &        19 &           25 &  17710 \\\\\n7  &          1 &               NaN &         audi &       gas &        std &         four &        wagon &          fwd &           front &       105.8 &   192.7 &   71.4 &    55.7 &         2954 &         ohc &             five &          136 &        mpfi &  3.19 &   3.40 &                8.5 &        110 &     5500 &        19 &           25 &  18920 \\\\\n8  &          1 &               158 &         audi &       gas &      turbo &         four &        sedan &          fwd &           front &       105.8 &   192.7 &   71.4 &    55.9 &         3086 &         ohc &             five &          131 &        mpfi &  3.13 &   3.40 &                8.3 &        140 &     5500 &        17 &           20 &  23875 \\\\\n10 &          2 &               192 &          bmw &       gas &        std &          two &        sedan &          rwd &           front &       101.2 &   176.8 &   64.8 &    54.3 &         2395 &         ohc &             four &          108 &        mpfi &  3.50 &   2.80 &                8.8 &        101 &     5800 &        23 &           29 &  16430 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#find the name of the columns in the dataframe\ndf.columns   \n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nIndex(['symboling', 'normalized-losses', 'make', 'fuel-type', 'aspiration',\n       'num-of-doors', 'body-style', 'drive-wheels', 'engine-location',\n       'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-type',\n       'num-of-cylinders', 'engine-size', 'fuel-system', 'bore', 'stroke',\n       'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg',\n       'highway-mpg', 'price'],\n      dtype='object')\n```\n:::\n:::\n\n\n### Save the dataset\n\nCorrespondingly, Pandas enables us to save the dataset to csv. By using the dataframe.to_csv() method, you can add the file path and name along with quotation marks in the brackets.\n\nFor example, if you would save the dataframe df as automobile.csv to your local machine, you may use the syntax below, where index = False means the row names will not be written.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.to_csv(\"../data/automobile.csv\", index=False)\n```\n:::\n\n\nWe can also read and save other file formats. We can use similar functions like pd.read_csv() and df.to_csv() for other data formats. The functions are listed in the following table:\n\n<h3>Read/Save Other Data Formats</h3>\n\n| Data Formate |        Read       |            Save |\n| ------------ | :---------------: | --------------: |\n| csv          |  `pd.read_csv()`  |   `df.to_csv()` |\n| json         |  `pd.read_json()` |  `df.to_json()` |\n| excel        | `pd.read_excel()` | `df.to_excel()` |\n| hdf          |  `pd.read_hdf()`  |   `df.to_hdf()` |\n| sql          |  `pd.read_sql()`  |   `df.to_sql()` |\n| ...          |        ...        |             ... |\n\n\n## Basic data analysis \n\nPandas has several built-in methods that can be used to understand the datatype or features or to look at the distribution of data within the dataset. Using these methods, gives an overview of the dataset and also point out potential issues such as the wrong data type of features which may need to be resolved later on. \n\n### Data types\n\nData has a variety of types.\nThe main types stored in Pandas dataframes are object, float, int, bool and datetime64. In order to better learn about each attribute, it is always good for us to know the data type of each column. \n\nWhy check data type:\n\n- Pandas automatically assigns types based on the encoding it detects from the original data table. For a number of reasons, this assignment may be incorrect. For example, it should be awkward if the car price column which we should expect to contain continuous numeric numbers, is assigned the data type of object. It would be more natural for it to have the float type.\n- Allows a data scientists to see which Python functions can be applied to a specific column. For example, some math functions can only be applied to numerical data.\n\nAs shown below, it is clear to see that the data type of \"symboling\" and \"curb-weight\" are int64, \"normalized-losses\" is object, and \"wheel-base\" is float64, etc.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n#check the datatypes\nprint(df.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsymboling              int64\nnormalized-losses     object\nmake                  object\nfuel-type             object\naspiration            object\nnum-of-doors          object\nbody-style            object\ndrive-wheels          object\nengine-location       object\nwheel-base           float64\nlength               float64\nwidth                float64\nheight               float64\ncurb-weight            int64\nengine-type           object\nnum-of-cylinders      object\nengine-size            int64\nfuel-system           object\nbore                  object\nstroke                object\ncompression-ratio    float64\nhorsepower            object\npeak-rpm              object\ncity-mpg               int64\nhighway-mpg            int64\nprice                 object\ndtype: object\n```\n:::\n:::\n\n\n### Describe\n\nNow, we would like to check the statistical summary of each column to learn about the distribution of data in each column. The statistical metrics can tell the data scientist if there are mathematical issues that may exist such as extreme outliers and large deviations.\n\nThe data scientists may have to address these issues later. To get the quick statistics, we use the describe method. It returns the number of terms in the column as count, average column value as mean, column standard deviation as std, the maximum minimum values, as well as the boundary of each of the quartiles. \n\nBy default, this method will provide various summary statistics, excluding NaN (Not a Number) values.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n#return a statistical summary of each column to learn about data distribution\nprint(df.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        symboling  wheel-base      length       width      height  \\\ncount  201.000000  201.000000  201.000000  201.000000  201.000000   \nmean     0.840796   98.797015  174.200995   65.889055   53.766667   \nstd      1.254802    6.066366   12.322175    2.101471    2.447822   \nmin     -2.000000   86.600000  141.100000   60.300000   47.800000   \n25%      0.000000   94.500000  166.800000   64.100000   52.000000   \n50%      1.000000   97.000000  173.200000   65.500000   54.100000   \n75%      2.000000  102.400000  183.500000   66.600000   55.500000   \nmax      3.000000  120.900000  208.100000   72.000000   59.800000   \n\n       curb-weight  engine-size  compression-ratio    city-mpg  highway-mpg  \ncount   201.000000   201.000000         201.000000  201.000000   201.000000  \nmean   2555.666667   126.875622          10.164279   25.179104    30.686567  \nstd     517.296727    41.546834           4.004965    6.423220     6.815150  \nmin    1488.000000    61.000000           7.000000   13.000000    16.000000  \n25%    2169.000000    98.000000           8.600000   19.000000    25.000000  \n50%    2414.000000   120.000000           9.000000   24.000000    30.000000  \n75%    2926.000000   141.000000           9.400000   30.000000    34.000000  \nmax    4066.000000   326.000000          23.000000   49.000000    54.000000  \n```\n:::\n:::\n\n\nThis shows the statistical summary of all numeric-typed (int, float) columns.\nFor example, the attribute \"symboling\" has 205 counts, the mean value of this column is 0.83, the standard deviation is 1.25, the minimum value is -2, 25th percentile is 0, 50th percentile is 1, 75th percentile is 2, and the maximum value is 3.\n\nHowever, what if we would also like to check all the columns including those that are of type object?\n\nYou can add an argument include = \"all\" inside the bracket. Let's try it again.\n\nWe can also do this on all datatype using `include = 'all'`. \n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n#return a statistical summary of each column to learn about data distribution\nprint(df.describe(include = 'all'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         symboling normalized-losses    make fuel-type aspiration  \\\ncount   201.000000               164     201       201        201   \nunique         NaN                51      22         2          2   \ntop            NaN               161  toyota       gas        std   \nfreq           NaN                11      32       181        165   \nmean      0.840796               NaN     NaN       NaN        NaN   \nstd       1.254802               NaN     NaN       NaN        NaN   \nmin      -2.000000               NaN     NaN       NaN        NaN   \n25%       0.000000               NaN     NaN       NaN        NaN   \n50%       1.000000               NaN     NaN       NaN        NaN   \n75%       2.000000               NaN     NaN       NaN        NaN   \nmax       3.000000               NaN     NaN       NaN        NaN   \n\n       num-of-doors body-style drive-wheels engine-location  wheel-base  ...  \\\ncount           199        201          201             201  201.000000  ...   \nunique            2          5            3               2         NaN  ...   \ntop            four      sedan          fwd           front         NaN  ...   \nfreq            113         94          118             198         NaN  ...   \nmean            NaN        NaN          NaN             NaN   98.797015  ...   \nstd             NaN        NaN          NaN             NaN    6.066366  ...   \nmin             NaN        NaN          NaN             NaN   86.600000  ...   \n25%             NaN        NaN          NaN             NaN   94.500000  ...   \n50%             NaN        NaN          NaN             NaN   97.000000  ...   \n75%             NaN        NaN          NaN             NaN  102.400000  ...   \nmax             NaN        NaN          NaN             NaN  120.900000  ...   \n\n        engine-size  fuel-system  bore  stroke compression-ratio horsepower  \\\ncount    201.000000          201   197     197        201.000000        199   \nunique          NaN            8    38      36               NaN         58   \ntop             NaN         mpfi  3.62    3.40               NaN         68   \nfreq            NaN           92    23      19               NaN         19   \nmean     126.875622          NaN   NaN     NaN         10.164279        NaN   \nstd       41.546834          NaN   NaN     NaN          4.004965        NaN   \nmin       61.000000          NaN   NaN     NaN          7.000000        NaN   \n25%       98.000000          NaN   NaN     NaN          8.600000        NaN   \n50%      120.000000          NaN   NaN     NaN          9.000000        NaN   \n75%      141.000000          NaN   NaN     NaN          9.400000        NaN   \nmax      326.000000          NaN   NaN     NaN         23.000000        NaN   \n\n        peak-rpm    city-mpg highway-mpg price  \ncount        199  201.000000  201.000000   201  \nunique        22         NaN         NaN   186  \ntop         5500         NaN         NaN  8921  \nfreq          36         NaN         NaN     2  \nmean         NaN   25.179104   30.686567   NaN  \nstd          NaN    6.423220    6.815150   NaN  \nmin          NaN   13.000000   16.000000   NaN  \n25%          NaN   19.000000   25.000000   NaN  \n50%          NaN   24.000000   30.000000   NaN  \n75%          NaN   30.000000   34.000000   NaN  \nmax          NaN   49.000000   54.000000   NaN  \n\n[11 rows x 26 columns]\n```\n:::\n:::\n\n\nWe see that for the object type columns, a different set of statistics is evaluated, like unique, top, and frequency. Unique is the number of distinct objects in the column. Top is most frequently occurring object, and freq is the number of times the top object appears in the column. \n\nSome values in the table are shown here as NaN which stands for not a number. This is because that particular statistical metric cannot be calculated for that specific column data type.\n\n\n### Selecting columns\n\nYou can select the columns of a dataframe by indicating the name of each column. For example, you can select the three columns as follows:\n\n```\ndataframe[[' column 1 ',column 2', 'column 3']]\n```\n\nWhere \"column\" is the name of the column, you can apply the method \".describe()\" to get the statistics of those columns as follows:\n\n```\ndataframe[[' column 1 ',column 2', 'column 3'] ].describe()\n```\n\nFor example, lets use the describe method to the columns length and compression-ratio\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf[['length','compression-ratio']].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=tex}\n\\begin{tabular}{lrr}\n\\toprule\n{} &      length &  compression-ratio \\\\\n\\midrule\ncount &  201.000000 &         201.000000 \\\\\nmean  &  174.200995 &          10.164279 \\\\\nstd   &   12.322175 &           4.004965 \\\\\nmin   &  141.100000 &           7.000000 \\\\\n25\\%   &  166.800000 &           8.600000 \\\\\n50\\%   &  173.200000 &           9.000000 \\\\\n75\\%   &  183.500000 &           9.400000 \\\\\nmax   &  208.100000 &          23.000000 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n### info\n\nThe info method provides a concise summary of your DataFrame.\n\nThis method prints information about a DataFrame including the index dtype and columns, non-null values and memory usage.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(df.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 201 entries, 0 to 204\nData columns (total 26 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   symboling          201 non-null    int64  \n 1   normalized-losses  164 non-null    object \n 2   make               201 non-null    object \n 3   fuel-type          201 non-null    object \n 4   aspiration         201 non-null    object \n 5   num-of-doors       199 non-null    object \n 6   body-style         201 non-null    object \n 7   drive-wheels       201 non-null    object \n 8   engine-location    201 non-null    object \n 9   wheel-base         201 non-null    float64\n 10  length             201 non-null    float64\n 11  width              201 non-null    float64\n 12  height             201 non-null    float64\n 13  curb-weight        201 non-null    int64  \n 14  engine-type        201 non-null    object \n 15  num-of-cylinders   201 non-null    object \n 16  engine-size        201 non-null    int64  \n 17  fuel-system        201 non-null    object \n 18  bore               197 non-null    object \n 19  stroke             197 non-null    object \n 20  compression-ratio  201 non-null    float64\n 21  horsepower         199 non-null    object \n 22  peak-rpm           199 non-null    object \n 23  city-mpg           201 non-null    int64  \n 24  highway-mpg        201 non-null    int64  \n 25  price              201 non-null    object \ndtypes: float64(5), int64(5), object(16)\nmemory usage: 42.4+ KB\nNone\n```\n:::\n:::\n\n\n## Accessing databases with python\n\nThe Python code connects to the database using API calls. An application programming interface is a set of functions that you can call to get access to some type of service.\n\n### SQL API\n\nThe SQL API consists of library function calls as an application programming interface, API, for the DBMS. \n\nTo pass SQL statements to the DBMS, an application program calls functions in the API, and it calls other functions to retrieve query results and status information from the DBMS. \n\n<p align=\"left\">\n  <img width=300, height=200, src=\"../images/sql_api.png\">\n</p>\n\n- The application program begins its database access with one or more API calls that connect the program to the DBMS. \n- To send the SQL statement to the DBMS, the program builds the statement as a text string in a buffer and then makes an API call to pass the buffer contents to the DBMS. \n- The application program makes API calls to check the status of its DBMS request and to handle errors. \n- The application program ends its database access with an API call that disconnects it from the database. \n\n\n### What is a DB-API\n\nDB-API is Python's standard API for accessing relational databases. It is a standard that allows you to write a single program that works with multiple kinds of relational databases instead of writing a separate program for each one. So, if you learn the DB-API functions, then you can apply that knowledge to use any database with Python.\n\nThe two main concepts in the Python DB-API are: \n\n- **connection objects** that you use to connect to a database and manage your transactions.\n- **Cursor objects** are used to run queries. You open a cursor object and then run queries. The cursor works similar to a cursor in a text processing system where you scroll down in your result set and get your data into the application. Cursors are used to scan through the results of a database. \n\nThe methods used with connection objects are:\n\n- The `cursor()` method returns a new cursor object using the connection. \n- The `commit()` method is used to commit any pending transaction to the database. \n- The `rollback()` method causes the database to roll back to the start of any pending transaction. \n- The `close()` method is used to close a database connection.\n\nAs an example: First, you import your database module by using the connect API from that module. To open a connection to the database, you use the connection function and pass in the parameters that is, the database name, username, and password. The connect function returns connection object. After this, you create a cursor object on the connection object. The cursor is used to run queries and fetch results. After running the queries using the cursor, we also use the cursor to fetch the results of the query. Finally, when the system is done running the queries, it frees all resources by closing the connection.\n\n<p align=\"left\">\n  <img width=300, height=200, src=\"../images/db_api.png\">\n</p>\n\n",
    "supporting": [
      "1_importing_data_files/figure-pdf"
    ],
    "filters": []
  }
}