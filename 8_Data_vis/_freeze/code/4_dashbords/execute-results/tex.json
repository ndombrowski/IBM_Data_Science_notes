{
  "hash": "c95e524b5d2629d5fc7e59d261ef6fd6",
  "result": {
    "markdown": "# Creating Dashbords with Plotly and Dash\n\n## Dashboards\n\nWeb-based dashboarding can be done in python with:\n\n- Plotly | Dash\n- Panel\n- voila\n- Streamlit\n\n\nDashbord tools:\n\n- bokeh\n- ipywidgets (useful for jupyter)\n- matplotlib\n- bowtie\n- Flask\n\nFor more information about Dashboards, visit the following links:\n\n- [Python dashboarding tools ](https://pyviz.org/dashboarding/)\n- [John Snow's data journalism](https://www.theguardian.com/news/datablog/2013/mar/15/john-snow-cholera-map)\n\n\nTo learn more about using Plotly to create dashboards, explore\n\n- [Plotly python](https://plotly.com/python/getting-started/)\n- [Plotly graph objects with example](https://plotly.com/python/graph-objects/)\n- [Plotly express](https://plotly.com/python/plotly-express/)\n- [API reference](https://plotly.com/python-api-reference/)\n\nHere are additional useful resources:\n\n- [Plotly cheatsheet](https://images.plot.ly/plotly-documentation/images/plotly_js_cheat_sheet.pdf)\n- [Plotly community](https://community.plotly.com/c/plotly-python/5)\n- [Related blogs](https://plotlygraphs.medium.com)\n- [Open-source datasets ](https://developer.ibm.com/exchanges/data/)\n\n\n## Plotly basics: scatter, line, bar, bubble, histogram, pie, sunburst\n\nOur data:\n\nThe Reporting Carrier On-Time Performance Dataset contains information on approximately 200 million domestic US flights reported to the United States Bureau of Transportation Statistics. The dataset contains basic information about each flight (such as date, time, departure airport, arrival airport) and, if applicable, the amount of time the flight was delayed and information about the reason for the delay. This dataset can be used to predict the likelihood of a flight arriving on time.\n\nPreview data, dataset metadata, and data glossary [here.](https://dax-cdn.cdn.appdomain.cloud/dax-airline/1.0.1/data-preview/index.html)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport kaleido\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#read in data\nairline_data = pd.read_csv(\"../data/airline_data.csv\", encoding = \"ISO-8859-1\",dtype={'Div1Airport': str, 'Div1TailNum': str,'Div2Airport': str, 'Div2TailNum': str})\n\n#check the data\nprint(airline_data.head())\n\n# Shape of the data\nprint(airline_data.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Unnamed: 0  Year  Quarter  Month  DayofMonth  DayOfWeek  FlightDate  \\\n0     1295781  1998        2      4           2          4  1998-04-02   \n1     1125375  2013        2      5          13          1  2013-05-13   \n2      118824  1993        3      9          25          6  1993-09-25   \n3      634825  1994        4     11          12          6  1994-11-12   \n4     1888125  2017        3      8          17          4  2017-08-17   \n\n  Reporting_Airline  DOT_ID_Reporting_Airline IATA_CODE_Reporting_Airline  \\\n0                AS                     19930                          AS   \n1                EV                     20366                          EV   \n2                UA                     19977                          UA   \n3                HP                     19991                          HP   \n4                UA                     19977                          UA   \n\n   ... Div4WheelsOff  Div4TailNum  Div5Airport  Div5AirportID  \\\n0  ...           NaN          NaN          NaN            NaN   \n1  ...           NaN          NaN          NaN            NaN   \n2  ...           NaN          NaN          NaN            NaN   \n3  ...           NaN          NaN          NaN            NaN   \n4  ...           NaN          NaN          NaN            NaN   \n\n   Div5AirportSeqID Div5WheelsOn Div5TotalGTime Div5LongestGTime  \\\n0               NaN          NaN            NaN              NaN   \n1               NaN          NaN            NaN              NaN   \n2               NaN          NaN            NaN              NaN   \n3               NaN          NaN            NaN              NaN   \n4               NaN          NaN            NaN              NaN   \n\n   Div5WheelsOff Div5TailNum  \n0            NaN         NaN  \n1            NaN         NaN  \n2            NaN         NaN  \n3            NaN         NaN  \n4            NaN         NaN  \n\n[5 rows x 110 columns]\n(27000, 110)\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#randomly subsample 500 datapoints\n#we set the random state to be 42 to always get the same results\ndata = airline_data.sample(n=500, random_state=42)\n\n#control\ndata.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(500, 110)\n```\n:::\n:::\n\n\n### plotly.graph_objects\n\n#### Scatterplots\n\nLearn more about usage of scatter plot [here](https://plotly.com/python/line-and-scatter/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)\n\nIdea: How departure time changes with respect to airport distance\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# First we create a figure using go.Figure and adding trace to it through go.scatter\nfig = go.Figure(data = go.Scatter(x = data['Distance'], y = data['DepTime'], mode = 'markers', marker = dict(color = 'red')))\n\n# Updating layout through `update_layout`. Here we are adding title to the plot and providing title to x and y axis.\nfig.update_layout(title = 'Distance vs Departure time', xaxis_title = 'Distance', yaxis_title = 'DepTime')\n\n# Display the figure\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n#### Lineplots\n\nLearn more about line plot [here](https://plotly.com/python/line-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Group the data by Month and compute average over arrival delay time.\nline_data = data.groupby('Month')['ArrDelay'].mean().reset_index()\nline_data.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=tex}\n\\begin{tabular}{lrr}\n\\toprule\n{} &  Month &   ArrDelay \\\\\n\\midrule\n0 &      1 &   2.232558 \\\\\n1 &      2 &   2.687500 \\\\\n2 &      3 &  10.868421 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n*   Create a line plot with x-axis being the month and y-axis being computed average delay time. Update plot title, xaxis, and yaxis title.\n*   Scatter and line plot vary by updating mode parameter.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n#create figure\nfig = go.Figure(data = go.Scatter(x = line_data['Month'], y = line_data['ArrDelay'], mode = 'lines', marker = dict(color='green')))\n\n#update the labels\nfig.update_layout(title = 'Arrival delay by month', xaxis_title = 'Month', yaxis_title = 'Arrival Delay')\n\n#plot\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n## plotly.express\n\n### Bar chart\n\n\nLearn more about bar chart [here](https://plotly.com/python/bar-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)\n\nIdea: Extract number of flights from a specific airline that goes to a destination\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Group the data by destination state and reporting airline. Compute total number of flights in each combination\nbar_data = data.groupby(['DestState'])['Flights'].sum().reset_index()\nbar_data.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=tex}\n\\begin{tabular}{llr}\n\\toprule\n{} & DestState &  Flights \\\\\n\\midrule\n0 &        AK &      4.0 \\\\\n1 &        AL &      3.0 \\\\\n2 &        AZ &      8.0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfig = px.bar(bar_data, x = 'DestState', y = 'Flights', title = 'Total number of flights to the destination state split by reporting airline')\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n### Bubble chart\n\nLearn more about bubble chart [here](https://plotly.com/python/bubble-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)\n\nIdea: Get number of flights as per reporting airline\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Group the data by reporting airline and get number of flights\nbub_data = data.groupby('Reporting_Airline')['Flights'].sum().reset_index()\nbub_data.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=tex}\n\\begin{tabular}{llr}\n\\toprule\n{} & Reporting\\_Airline &  Flights \\\\\n\\midrule\n0 &                9E &      5.0 \\\\\n1 &                AA &     57.0 \\\\\n2 &                AS &     14.0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfig = px.scatter(bub_data, x = 'Reporting_Airline', y = 'Flights', size = 'Flights', hover_name = 'Reporting_Airline', title = 'Total number of flights by reporting airline')\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n#### Histogram\n\nLearn more about histogram [here](https://plotly.com/python/histograms/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)\n\nIdea: Get distribution of arrival delay\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Set missing values to 0\ndata['ArrDelay'] = data['ArrDelay'].fillna(0)\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Set missing values to 0\nfig = px.histogram(data, x = 'ArrDelay')\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n#### Pie Chart\n\nLearn more about pie chart [here](https://plotly.com/python/pie-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)\n\nIdea: Proportion of distance group by month (month indicated by numbers)\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Use px.pie function to create the chart. Input dataset. \n# Values parameter will set values associated to the sector. 'Month' feature is passed to it.\n# labels for the sector are passed to the `names` parameter.\nfig = px.pie(data, values='Month', names='DistanceGroup', title='Distance group proportion by month')\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n#### Writing image to file\n\nSave as static image via kaleido: \n\nNotice: Doesn't work in RStudio yet but works via quarto render.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfig.write_image(\"../images/fig1.svg\", engine=\"kaleido\")\n```\n:::\n\n\n#### Sunburst Charts\n\nLearn more about sunburst chart [here](https://plotly.com/python/sunburst-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)\n\nIdea: Hierarchical view in order of month and destination state holding value of number of flights\n\n*   Create sunburst chart using `px.sunburst`.\n*   Define hierarchy of sectors from root to leaves in `path` parameter. Here, we go from `Month` to `DestStateName` feature.\n*   Set sector values in `values` parameter. Here, we can pass in `Flights` feature.\n*   Show the figure.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfig = px.sunburst(data, path = ['Month', 'DestStateName'], values = 'Flights')\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n## Dash\n\nDash is an open source framework for building data visualization interfaces.\n\nIn this  lab you will utilize an Integrated Development Environment (IDE) based on Theia (an open source IDE platform similar to VS Code) to develop and run Python code.\n\n**Goal**\n\nCreate a dashboard that displays the percentage of flights running under specific distance group. Distance group is the distance intervals, every 250 miles, for flight segment. If the flight covers to 500 miles, it will be under distance group 2 (250 miles + 250 miles).\n\nOur dashboard application consists of three components:\n\n- Title of the application\n- Description of the application\n- Chart conveying the proportion of distance group by month\n\nFor this to work, we need to do the following (plus any libraries we require for plotting): `python3 -m pip install pandas dash` and `pip3 install httpx==0.20 dash plotly`. \n\nFor this to work, we started a new python script with `touch dash_basics.py` which we opened with VScode typing this into the terminal: `code dash_basics.py`.\n\n### Prep the data\n\nThe first task is the data preparation (what we have done before) and we:\n\n- Importing necessary libraries\n- Reading and sampling 500 random data points\n- Get the chart ready\n\nTo do this, we added the following into our python script\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Import required packages\nimport pandas as pd\nimport plotly.express as px\nimport dash\nimport dash_html_components as html\nimport dash_core_components as dcc\n\n# Read the airline data into pandas dataframe\nairline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', \n                            encoding = \"ISO-8859-1\",\n                            dtype={'Div1Airport': str, 'Div1TailNum': str, \n                                   'Div2Airport': str, 'Div2TailNum': str})\n\n# Randomly sample 500 data points. Setting the random state to be 42 so that we get same result.\ndata = airline_data.sample(n=500, random_state=42)\n\n# Pie Chart Creation\nfig = px.pie(data, values='Flights', names='DistanceGroup', title='Distance group proportion by flights')\n```\n:::\n\n\n### Create dash application and get the layout skeleton\n\nNext, we create a skeleton for our dash application. Our dashboard application has three components as seen before:\n\n- Title of the application\n- Description of the application\n- Chart conveying the proportion of distance group by month\n- Mapping to the respective Dash HTML tags:\n\nTo do this a:\n\n- Title is added using `html.H1()` tag, which holds the application title.\n- Description is added using `html.P()` tag, which holds the description of the application. In this example, the style parameter provided below to makes the title center aligned, with color code #503D36, and font-size as 40\n- Chart is added using `dcc.Graph()` tag to add the `fig` we generated above/\n\nTo do this, the following was added:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# Create a dash application\napp = dash.Dash(__name__)\n\n# Get the layout of the application and adjust it.\n# Create an outer division using html.Div and add title to the dashboard using html.H1 component\n# Add description about the graph using HTML P (paragraph) component\n# Finally, add graph component.\napp.layout = html.Div(children=[html.H1('Airline Dashboard',style={'textAlign': 'center', 'color': '#503D36', 'font-size': 40}),\n                                html.P('Proportion of distance group (250 mile distance interval group) by flights.', style={'textAlign':'center', 'color': '#F57241'}),\n                                dcc.Graph(figure=fig),\n                                               \n                    ])\n\n# Run the application                   \nif __name__ == '__main__':\n    app.run_server()\n```\n:::\n\n\nA step-by-step guide with pictures is also found here: `../tutorials/4.5_Dash_Basics.md.html`\n\nThe dash script can be run with `/opt/anaconda3/bin/python3.7 dash_basics.py` and is found at `tutorials/dash_basics.py`\n\nOther useful links:\n\n- [Complete dash user guide](https://dash.plotly.com)\n- [Dash core components](https://dash.plotly.com/dash-core-components)\n- [Dash HTML components](https://dash.plotly.com/dash-html-components)\n- [Dash community forum](https://community.plotly.com/c/dash/16)\n- [Related blogs](https://medium.com/plotly/tagged/dash)\n\n\n## Add interactivity: user input and callbacks\n\nA callback function is a python function that is automatically called by Dash whenever an input component's property changes. Callback function is decorated with `@app.callback` decorator. \n\nWhenever there is a change in the input component value, callback function wrapped by the decorator is called followed by the update to the output component children in the application layout. \n\n- [Python decorators reference 1](https://realpython.com/primer-on-python-decorators/)\n- [Python decorators reference 2](https://peps.python.org/pep-0318/#current-syntax)\n- [Callbacks with example](https://dash.plotly.com/basic-callbacks)\n- [Dash app gallery](https://dash.gallery/Portal/)\n- [Dash community components](https://community.plotly.com/t/community-components-index/60098)\n\nThe tutorial for this section can be found in `../tutorials/4.7_Dash_Interactivity.md.html`\n\nThe goal of this exercise is to extract average monthly arrival delay time and see how it changes over the year. Year range is from 2010 to 2020. Our dashboard application will consist of three components:\n\n- Title of the application\n- Component to enter input year\n- Chart conveying the average monthly arrival delay\n\nTo do this, we create a new python script with `touch ../tutorials/dash_interactivity.py` and open it with `code ../tutorials/dash_interactivity.py`\n\n\n### Read in the data\n\nAdded this:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Import required libraries\nimport pandas as pd\nimport plotly.graph_objects as go\nimport dash\nimport dash_html_components as html\nimport dash_core_components as dcc\nfrom dash.dependencies import Input, Output\n\n# Read the airline data into pandas dataframe\nairline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', \n                            encoding = \"ISO-8859-1\",\n                            dtype={'Div1Airport': str, 'Div1TailNum': str, \n                                   'Div2Airport': str, 'Div2TailNum': str})\n```\n:::\n\n\n###  Create dash application and get the layout skeleton\n\nMapping to the respective Dash HTML tags:\n\n- Title added using `html.H1()` tag, see more [here](https://dash.plotly.com/dash-html-components/h1?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01)\n- Layout division added using `html.Div()` and input component added using `dcc.Input()` tag inside the - layout division.\n- Layout division added using `html.Div()` and chart added using `dcc.Graph()` tag inside the layout division.\n\nBelow, we: \n\n- Title as Airline Performance Dashboard\n- Use style parameter and make the title center aligned, with color code #503D36, and font-size as 40. Check More about HTML section [here.]((https://dash.plotly.com/layout?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01))\n\n- Update [dcc.Input](https://dash.plotly.com/dash-core-components/input?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01) component id as input-year, default value as 2010, and type as number. Use style parameter and assign height of the input box to be 50px and font-size to be 35.\n- Use style parameter and assign font-size as 40 for the whole division.\n\n- Add dcc.Graph() component to the second division.\n- Update dcc.Graph component id as line-plot.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Create a dash application\napp = dash.Dash(__name__)\n\n# Get the layout of the application and adjust it.\n# Create an outer division using html.Div and add title to the dashboard using html.H1 component\n# Add a html.Div and core input text component\n# Finally, add graph component.\napp.layout = html.Div(children=[ html.H1('Airline Performance Dashboard',style={'textAlign': 'center', \n                                'color': '#503D36','font-size': 40}),\n                                html.Div([\"Input Year: \", dcc.Input(id='input-year', value='2010', \n                                type='number', style={'height':'50px', 'font-size': 35}),], \n                                style={'font-size': 40}),\n                                html.Br(),\n                                html.Br(),\n                                html.Div(dcc.Graph(id='line-plot')),\n                                ])\n```\n:::\n\n\n### Add the application callback function\n\nThe core idea of this application is to get year as user input and update the dashboard in real-time. We will be using callback function for the same.\n\nSteps:\n\n- Define the callback decorator\n- Define the callback function that uses the input provided to perform the computation\n- Create graph and return it as an output\n- Run the application\n\n**Callback decorator**\n\n- Refer examples provided [here](https://dash.plotly.com/basic-callbacks?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01)\n- Update output component id parameter with the id provided in the dcc.Graph() component and component property as figure.\n- Update input component id parameter with the id provided in the dcc.Input() component and component property as value.\n\n**Callback function**\n\n- Update data parameter of the go.Figure() with the scatter plot. \n- Refer [here.](https://plotly.com/python/line-and-scatter/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01#scatter-and-line-plot-with-goscatter) \n- Sample syntax below:\n`go.Scatter(x='----', y='----', mode='-----', marker='----)`\n- Update x as line_data['Month'], y as line_data['ArrDelay'], mode as lines, and marker as dict(color='green').\n\n- Update fig.update_layout with title, xaxis_title, and yaxis_title parameters.\n- Title as Month vs Average Flight Delay Time\n- xaxis_title as Month\n- yaxis_title as ArrDelay\n\n- Refer the update layout function [here.](https://plotly.com/python/line-and-scatter/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01#style-scatter-plots)\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# add callback decorator\n@app.callback(Output(component_id='line-plot', component_property='figure'),\n               Input(component_id='input-year', component_property='value'))\n\n# Add computation to callback function and return graph\ndef get_graph(entered_year):\n    # Select data based on the entered year\n    df =  airline_data[airline_data['Year']==int(entered_year)]\n    \n    # Group the data by Month and compute average over arrival delay time.\n    line_data = df.groupby('Month')['ArrDelay'].mean().reset_index()\n    \n    # \n    fig = go.Figure(data=go.Scatter(x=line_data['Month'], y=line_data['ArrDelay'], mode='lines', marker=dict(color='green')))\n    fig.update_layout(title='Month vs Average Flight Delay Time', xaxis_title='Month', yaxis_title='ArrDelay')\n    return fig\n\n# Run the app\nif __name__ == '__main__':\n    app.run_server()\n```\n:::\n\n\nRun with ``/opt/anaconda3/bin/python3.7 dash_interactivity.py``\n\n\n\n## Flight Delay Time Statistics Dashboard\n\nInside this dashbord, we want to have the following components:\n\n- Monthly average carrier delay by reporting airline for the given year.\n- Monthly average weather delay by reporting airline for the given year.\n- Monthly average national air system delay by reporting airline for the given year.\n- Monthly average security delay by reporting airline for the given year.\n- Monthly average late aircraft delay by reporting airline for the given year.\n- NOTE: Year range should be between 2010 and 2020\n\nThe output should show the following:\n\n- Title of the application\n- Component to enter input year\n- 5 Charts conveying the different types of flight delay. Chart section is divided into three segments.\n    - Carrier and Weather delay in the first segment\n    - National air system and Security delay in the second segment\n    - Late aircraft delay in the third segment\n\nLet's start out script with `code flight_details.py`.\n\n### Read the data\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Import required libraries\nimport pandas as pd\nimport plotly.graph_objects as go\nimport dash\nimport dash_html_components as html\nimport dash_core_components as dcc\nfrom dash.dependencies import Input, Output\nimport plotly.express as px\n\n# Read the airline data into pandas dataframe\nairline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', \n                            encoding = \"ISO-8859-1\",\n                            dtype={'Div1Airport': str, 'Div1TailNum': str, \n                                   'Div2Airport': str, 'Div2TailNum': str})\n```\n:::\n\n\n### Create dash application and get the layout skeleton\n\nMapping to the respective Dash HTML tags:\n\n- Title added using html.H1() tag\n- Layout division added using html.Div() and input component added using dcc.Input() tag inside the layout division.\n- 5 charts split into three segments. Each segment has a layout division added using html.Div() and chart added using dcc.Graph() tag inside the layout division.\n\nThe raw code looks like this\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Create a dash application\napp = dash.Dash(__name__)\n\n# Build dash app layout\napp.layout = html.Div(children=[ html.H1(),\n                                html.Div([\"Input Year: \", dcc.Input()],\n                                style={'font-size': 30}),\n                                html.Br(),\n                                html.Br(), \n                                html.Div([\n                                        html.Div(),\n                                        html.Div()\n                                ], style={'display': 'flex'}),\n    \n                                html.Div([\n                                        html.Div(),\n                                        html.Div()\n                                ], style={'display': 'flex'}),\n                                \n                                html.Div(, style={'width':'65%'})\n                                ])\n```\n:::\n\n\nFirst, we add the following:\n\n- Title as Flight Delay Time Statistics, align text as center, color as #503D36, and font size as 30.\n- Update dcc.Input component id as input-year, default value as 2010, and type as number. Use style parameter and assign height of the input box to be 35px and font-size to be 30.\n\n**Segment 1** is the first html.Div(). We have two inner division where first two graphs will be placed. The skeleton looks like this:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nhtml.Div([\n          html.Div(),\n          html.Div()\n         ], style={'display': 'flex'}),\n```\n:::\n\n\nFirst inner division:\n    - Add dcc.Graph() component.\n    - Update dcc.Graph component id as carrier-plot.\n\nSecond inner division\n    - Add dcc.Graph() component.\n    - Update dcc.Graph component id as weather-plot.\n\n**Segment 2** is the second html.Div(). We have two inner division where the next two graphs will be placed.\n\nFirst inner division\n    - Add dcc.Graph() component.\n    - Update dcc.Graph component id as nas-plot.\n\nSecond inner division\n    - Add dcc.Graph() component.\n    - Update dcc.Graph component id as security-plot.\n\n\n**Segment 3** is the last html.Div(): ``html.Div(, style={'width':'65%'})``\n\n    - Add dcc.Graph() component to the first inner division.\n    - Update dcc.Graph component id as late-plot.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Build dash app layout\napp.layout = html.Div(children=[ html.H1('Flight delay time statistics', style={'textAlign':'center', 'color':'#503D36', 'font-size':40}),\n                                html.Div([\"Input Year: \", dcc.Input(id='input-year', value='2010', type='number', style={'height':'50px', 'font-size':35})],\n                                style={'font-size': 30}),\n                                html.Br(),\n                                html.Br(), \n                                html.Div([\n                                        html.Div(dcc.Graph(id='carrier-plot')),\n                                        html.Div(dcc.Graph(id='weather-plot'))\n                                ], style={'display': 'flex'}),\n    \n                                html.Div([\n                                        html.Div(dcc.Graph(id='nas-plot')),\n                                        html.Div(dcc.Graph(id='security-plot'))\n                                ], style={'display': 'flex'}),\n                                \n                                html.Div(dcc.Graph(id='late-plot'), style={'width':'65%'})\n                                ])\n```\n:::\n\n\n### Review and add supporting function\n\nBelow is the function that gets input year and data, perform computation for creating charts and plots.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n\"\"\" Compute_info function description\n\nThis function takes in airline data and selected year as an input and performs computation for creating charts and plots.\n\nArguments:\n    airline_data: Input airline data.\n    entered_year: Input year for which computation needs to be performed.\n    \nReturns:\n    Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.\n\n\"\"\"\ndef compute_info(airline_data, entered_year):\n    # Select data\n    df =  airline_data[airline_data['Year']==int(entered_year)]\n    # Compute delay averages\n    avg_car = df.groupby(['Month','Reporting_Airline'])['CarrierDelay'].mean().reset_index()\n    avg_weather = df.groupby(['Month','Reporting_Airline'])['WeatherDelay'].mean().reset_index()\n    avg_NAS = df.groupby(['Month','Reporting_Airline'])['NASDelay'].mean().reset_index()\n    avg_sec = df.groupby(['Month','Reporting_Airline'])['SecurityDelay'].mean().reset_index()\n    avg_late = df.groupby(['Month','Reporting_Airline'])['LateAircraftDelay'].mean().reset_index()\n    return avg_car, avg_weather, avg_NAS, avg_sec, avg_late\n```\n:::\n\n\n### Add the application callback function\n\nScaffold:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# Callback decorator\n@app.callback( [\n               Output(component_id='carrier-plot', component_property='figure'),\n               ---\n               --- \n               ---\n               ---\n               ],\n               Input(....))\n# Computation to callback function and return graph\ndef get_graph(entered_year):\n    \n    # Compute required information for creating graph from the data\n    avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_info(airline_data, entered_year)\n            \n    # Line plot for carrier delay\n    carrier_fig = px.line(avg_car, x='Month', y='CarrierDelay', color='Reporting_Airline', title='Average carrier delay time (minutes) by airline')\n    # Line plot for weather delay\n    weather_fig = ------\n    # Line plot for nas delay\n    nas_fig = ------\n    # Line plot for security delay\n    sec_fig = ------\n    # Line plot for late aircraft delay\n    late_fig = ------\n            \n    return[carrier_fig, weather_fig, nas_fig, sec_fig, late_fig]\n\n# Run the app\nif __name__ == '__main__':\n    app.run_server()\n```\n:::\n\n\n**Callback decorator**\n\n- Refer examples provided [here](https://dash.plotly.com/basic-callbacks?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01)\n- We have 5 output components added in a list. Update output component id parameter with the ids provided in the dcc.Graph() component and set the component property as figure. One sample has been added to the skeleton.\n- Update input component id parameter with the id provided in the dcc.Input() component and component property as value.\n\n**Callback function**\n\nNext is to update the get_graph function. We have already added a function compute_info that will perform computation on the data using the input.\n\nMapping the returned value from the function compute_info to graph:\n\n- avg_car - input for carrier delay\n-avg_weather - input for weather delay\n-avg_NAS - input for NAS delay\n-avg_sec - input for security delay\n-avg_late - input for late aircraft delay\n-Code has been provided for plotting carrier delay. Follow the same process and use the above mapping to get plots for other 4 delays.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# Import required libraries\nimport pandas as pd\nimport plotly.graph_objects as go\nimport dash\nfrom dash import html\nfrom dash import dcc\nfrom dash.dependencies import Input, Output\nimport plotly.express as px\n\n# Read the airline data into pandas dataframe\nairline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', \n                            encoding = \"ISO-8859-1\",\n                            dtype={'Div1Airport': str, 'Div1TailNum': str, \n                                   'Div2Airport': str, 'Div2TailNum': str})\n\n\n# Create a dash application\napp = dash.Dash(__name__)\n\n# Build dash app layout\napp.layout = html.Div(children=[ html.H1('Flight delay time statistics', style={'textAlign':'center', 'color':'#503D36', 'font-size':40}),\n                                html.Div([\"Input Year: \", dcc.Input(id='input-year', value='2010', type='number', style={'height':'50px', 'font-size':35})],\n                                style={'font-size': 30}),\n                                html.Br(),\n                                html.Br(), \n                                html.Div([\n                                        html.Div(dcc.Graph(id='carrier-plot')),\n                                        html.Div(dcc.Graph(id='weather-plot'))\n                                ], style={'display': 'flex'}),\n    \n                                html.Div([\n                                        html.Div(dcc.Graph(id='nas-plot')),\n                                        html.Div(dcc.Graph(id='security-plot'))\n                                ], style={'display': 'flex'}),\n                                \n                                html.Div(dcc.Graph(id='late-plot'), style={'width':'65%'})\n                                ])\n\n\n\"\"\" Compute_info function description\n\nThis function takes in airline data and selected year as an input and performs computation for creating charts and plots.\n\nArguments:\n    airline_data: Input airline data.\n    entered_year: Input year for which computation needs to be performed.\n    \nReturns:\n    Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.\n\n\"\"\"\ndef compute_info(airline_data, entered_year):\n    # Select data\n    df =  airline_data[airline_data['Year']==int(entered_year)]\n    # Compute delay averages\n    avg_car = df.groupby(['Month','Reporting_Airline'])['CarrierDelay'].mean().reset_index()\n    avg_weather = df.groupby(['Month','Reporting_Airline'])['WeatherDelay'].mean().reset_index()\n    avg_NAS = df.groupby(['Month','Reporting_Airline'])['NASDelay'].mean().reset_index()\n    avg_sec = df.groupby(['Month','Reporting_Airline'])['SecurityDelay'].mean().reset_index()\n    avg_late = df.groupby(['Month','Reporting_Airline'])['LateAircraftDelay'].mean().reset_index()\n    return avg_car, avg_weather, avg_NAS, avg_sec, avg_late\n\n# Callback decorator\n@app.callback( [\n               Output(component_id='carrier-plot', component_property='figure'),\n               Output(component_id='weather-plot', component_property='figure'),\n               Output(component_id='nas-plot', component_property='figure'), \n               Output(component_id='security-plot', component_property='figure'),\n               Output(component_id='late-plot', component_property='figure'),\n               ],\n               Input(component_id='input-year', component_property='value'))\n\n# Computation to callback function and return graph\ndef get_graph(entered_year):\n    \n    # Compute required information for creating graph from the data\n    avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_info(airline_data, entered_year)\n            \n    # Line plot for carrier delay\n    carrier_fig = px.line(avg_car, x='Month', y='CarrierDelay', color='Reporting_Airline', title='Average carrier delay time (minutes) by airline')\n    # Line plot for weather delay\n    weather_fig = px.line(avg_weather, x='Month', y='WeatherDelay', color='Reporting_Airline', title='Average weather delay time (minutes) by airline')\n    # Line plot for nas delay\n    nas_fig = px.line(avg_NAS, x='Month', y='NASDelay', color='Reporting_Airline', title='Average NAS delay time (minutes) by airline')\n    # Line plot for security delay\n    sec_fig = px.line(avg_sec, x='Month', y='SecurityDelay', color='Reporting_Airline', title='Average security delay time (minutes) by airline')\n    # Line plot for late aircraft delay\n    late_fig = px.line(avg_late, x='Month', y='LateAircraftDelay', color='Reporting_Airline', title='Average late aircraft delay time (minutes) by airline')\n            \n    return[carrier_fig, weather_fig, nas_fig, sec_fig, late_fig]\n\n# Run the app\nif __name__ == '__main__':\n    app.run_server()\n```\n:::\n\n\nRun with `/opt/anaconda3/bin/python3.7 flight_details.py `\n\n",
    "supporting": [
      "4_dashbords_files/figure-pdf"
    ],
    "filters": []
  }
}