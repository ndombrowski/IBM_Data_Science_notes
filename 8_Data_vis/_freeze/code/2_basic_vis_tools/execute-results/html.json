{
  "hash": "e6be29ee5d72fc7cad9c623439162342",
  "result": {
    "markdown": "# Basic visualization tools\n\n## Notebook setup\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#load libs\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n#set graphics style\nmpl.style.use('ggplot') \n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#load data\ndf_can = pd.read_excel(\"../data/Canada.xlsx\", sheet_name='Canada by Citizenship',skiprows=range(20), skipfooter=2)\n\n#check data\nprint(df_can.head())\nprint(df_can.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Type    Coverage          OdName  AREA AreaName   REG  \\\n0  Immigrants  Foreigners     Afghanistan   935     Asia  5501   \n1  Immigrants  Foreigners         Albania   908   Europe   925   \n2  Immigrants  Foreigners         Algeria   903   Africa   912   \n3  Immigrants  Foreigners  American Samoa   909  Oceania   957   \n4  Immigrants  Foreigners         Andorra   908   Europe   925   \n\n           RegName  DEV             DevName  1980  ...  2004  2005  2006  \\\n0    Southern Asia  902  Developing regions    16  ...  2978  3436  3009   \n1  Southern Europe  901   Developed regions     1  ...  1450  1223   856   \n2  Northern Africa  902  Developing regions    80  ...  3616  3626  4807   \n3        Polynesia  902  Developing regions     0  ...     0     0     1   \n4  Southern Europe  901   Developed regions     0  ...     0     0     1   \n\n   2007  2008  2009  2010  2011  2012  2013  \n0  2652  2111  1746  1758  2203  2635  2004  \n1   702   560   716   561   539   620   603  \n2  3623  4005  5393  4752  4325  3774  4331  \n3     0     0     0     0     0     0     0  \n4     1     0     0     0     0     1     1  \n\n[5 rows x 43 columns]\n(195, 43)\n```\n:::\n:::\n\n\n###  Clean dataset \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#drop irrelevant columns\ndf_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)\n\n#give some columns better names\ndf_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)\n\n# check whether all column have labels of type string.\nprint(all(isinstance(column, str) for column in df_can.columns))\n\n#change all columns to string type\ndf_can.columns = list(map(str, df_can.columns))\n\n# let's check the column labels types now\nprint(all(isinstance(column, str) for column in df_can.columns))\n\n# Set the country name as index \ndf_can.set_index('Country', inplace=True)\n\n#add a total column\ndf_can['Total'] = df_can.sum(axis=1)\n\n#create a list for the years of interest\nyears = list(map(str, range(1980, 2014)))\n\n#check df\nprint(df_can.head())\nprint('data dimensions:', df_can.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\n               Continent           Region             DevName  1980  1981  \\\nCountry                                                                     \nAfghanistan         Asia    Southern Asia  Developing regions    16    39   \nAlbania           Europe  Southern Europe   Developed regions     1     0   \nAlgeria           Africa  Northern Africa  Developing regions    80    67   \nAmerican Samoa   Oceania        Polynesia  Developing regions     0     1   \nAndorra           Europe  Southern Europe   Developed regions     0     0   \n\n                1982  1983  1984  1985  1986  ...  2005  2006  2007  2008  \\\nCountry                                       ...                           \nAfghanistan       39    47    71   340   496  ...  3436  3009  2652  2111   \nAlbania            0     0     0     0     1  ...  1223   856   702   560   \nAlgeria           71    69    63    44    69  ...  3626  4807  3623  4005   \nAmerican Samoa     0     0     0     0     0  ...     0     1     0     0   \nAndorra            0     0     0     0     2  ...     0     1     1     0   \n\n                2009  2010  2011  2012  2013  Total  \nCountry                                              \nAfghanistan     1746  1758  2203  2635  2004  58639  \nAlbania          716   561   539   620   603  15699  \nAlgeria         5393  4752  4325  3774  4331  69439  \nAmerican Samoa     0     0     0     0     0      6  \nAndorra            0     0     0     1     1     15  \n\n[5 rows x 38 columns]\ndata dimensions: (195, 38)\n```\n:::\n:::\n\n\n## Area plots\n\n- also known as an area chart or graph is a type of plot \n- depicts cumulated totals using numbers or percentages over time\n- based on a line plot\n\nIn the last module, we created a line plot that visualized the top 5 countries that contribued the most immigrants to Canada from 1980 to 2013. With a little modification to the code, we can visualize this plot as a cumulative plot, also knows as a Stacked Line Plot or Area plot.\n\nLet's first get the data for the top5 countries\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#sort df\ndf_can.sort_values(['Total'], ascending = False, axis = 0 , inplace =  True)\n\n#get the top5 countries\ndf_top5 = df_can.head(5)\n\n#transpose data\ndf_top5 = df_top5[years].transpose()\n\n#check data\ndf_top5.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Country</th>\n      <th>India</th>\n      <th>China</th>\n      <th>United Kingdom of Great Britain and Northern Ireland</th>\n      <th>Philippines</th>\n      <th>Pakistan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1980</th>\n      <td>8880</td>\n      <td>5123</td>\n      <td>22045</td>\n      <td>6051</td>\n      <td>978</td>\n    </tr>\n    <tr>\n      <th>1981</th>\n      <td>8670</td>\n      <td>6682</td>\n      <td>24796</td>\n      <td>5921</td>\n      <td>972</td>\n    </tr>\n    <tr>\n      <th>1982</th>\n      <td>8147</td>\n      <td>3308</td>\n      <td>20620</td>\n      <td>5249</td>\n      <td>1201</td>\n    </tr>\n    <tr>\n      <th>1983</th>\n      <td>7338</td>\n      <td>1863</td>\n      <td>10015</td>\n      <td>4562</td>\n      <td>900</td>\n    </tr>\n    <tr>\n      <th>1984</th>\n      <td>5704</td>\n      <td>1527</td>\n      <td>10170</td>\n      <td>3801</td>\n      <td>668</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nArea plots are stacked by default. And to produce a stacked area plot, each column must be either all positive or all negative values (any NaN, i.e. not a number, values will default to 0). To produce an unstacked plot, set parameter stacked to value False.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#change the index values to type integer\n#df_top5.index = df_top5.index.map(int)\n\n#create area plot\ndf_top5.plot(kind = 'area', stacked = False, figsize = (8,4))\n\n#add labels\nplt.title('Immigration trend in top5 countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-6-output-1.png){width=687 height=380}\n:::\n:::\n\n\nThe unstacked plot has a default transparency (alpha value) at 0.5. We can modify this value by passing in the alpha parameter.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n#create area plot\ndf_top5.plot(kind = 'area', alpha = 0.25, stacked = False, figsize = (8,4))\n\n#add labels\nplt.title('Immigration trend in top5 countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-7-output-1.png){width=687 height=380}\n:::\n:::\n\n\n### Types of plotting\n\n### Two types of plotting\n\n#### Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt'\n\nYou can use `plt` i.e. `matplotlib.pyplot` and add more elements by calling different methods procedural; for example, `plt.title(...)` to add title or `plt.xlabel(...)` to add label to the x-axis.\n\n#### Option 2: Artist layer (Object oriented method) - using an `Axes` instance from Matplotlib (preferred) \n\nYou can use an `Axes` instance of your current plot and store it in a variable (eg. `ax`). You can add more elements by calling methods with a little change in syntax (by adding \"`set_`\" to the previous methods). For example, use `ax.set_title()` instead of `plt.title()` to add title,  or `ax.set_xlabel()` instead of `plt.xlabel()` to add label to the x-axis.\n\nThis option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later).\n\nIn this course, we will stick to the **scripting layer**, except for some advanced visualizations where we will need to use the **artist layer** to manipulate advanced aspects of the plots.\n\nLet's try an example for using the artist layer:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nax = df_top5.plot(kind = 'area', alpha = 0.35, figsize = (10,5))\n\nax.set_title('Immigration Trend of Top 5 Countries')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-8-output-1.png){width=844 height=454}\n:::\n:::\n\n\nLet's Use the scripting layer to create a stacked area plot of the 5 countries that contributed the least to immigration to Canada from 1980 to 2013. Use a transparency value of 0.45.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n#prep data\ndf_can_tail5 = df_can.tail(5)\ndf_can_tail5 = df_can_tail5[years].transpose()\n\n#plot\ndf_can_tail5.plot(kind='area',\n             stacked=False,\n             figsize=(10, 5))  # pass a tuple (x, y) size\n\nplt.title('Immigration Trend of lowest 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-9-output-1.png){width=823 height=454}\n:::\n:::\n\n\n## Histograms\n\n- A way of representing the frequency distribution of a numeric dataset\n- To do this numeric data is partitioned into into bins, each datapoint in the dataset is assigned to a bin, and then the number of datapoints that have been assigned to each bin are counted\n-  The vertical axis is actually the frequency or the number of datapoints in each bin.\n\n\n**Question**: What is the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013?\n\nBefore we proceed with creating the histogram plot, let's first examine the data split into intervals. To do this, we will us Numpy's histrogram method to get the bin ranges and frequency counts as follows:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ncount, bin_edges = np.histogram(df_can['2013'])\n\n#print the frequency count and the bin ranges (by default 10 bins are used)\nprint(count)\nprint(bin_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[178  11   1   2   0   0   0   0   1   2]\n[    0.   3412.9  6825.8 10238.7 13651.6 17064.5 20477.4 23890.3 27303.2\n 30716.1 34129. ]\n```\n:::\n:::\n\n\nBy default, the histrogram method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013. We can see that in 2013:\n\n- 178 countries contributed between 0 to 3412.9 immigrants\n- 11 countries contributed between 3412.9 to 6825.8 immigrants\n- 1 country contributed between 6285.8 to 10238.7 immigrants, and so on..\n\nWe can easily graph this distribution by passing kind=hist to plot().\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n#plot\ndf_can['2013'].plot(kind = 'hist', figsize = (8,5))\n\n#add titles\nplt.title(\"Histogram of Immigration from 195 countries in 2013\")\nplt.ylabel(\"Number of Countries\")\nplt.xlabel(\"Number of Immigrants\")\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-11-output-1.png){width=678 height=454}\n:::\n:::\n\n\nIn the above plot, the x-axis represents the population range of immigrants in intervals of 3412.9. The y-axis represents the number of countries that contributed to the aforementioned population.\n\nNotice that the x-axis labels do not match with the bin size. This can be fixed by passing in a xticks keyword that contains the list of the bin sizes, as follows:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n#define the intervals\ncount, bin_edges = np.histogram(df_can['2013'])\n\n\n#plot\ndf_can['2013'].plot(kind = 'hist', figsize = (8,5), xticks = bin_edges)\n\n#add titles\nplt.title(\"Histogram of Immigration from 195 countries in 2013\")\nplt.ylabel(\"Number of Countries\")\nplt.xlabel(\"Number of Immigrants\")\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-12-output-1.png){width=670 height=454}\n:::\n:::\n\n\nWe can also plot multiple histograms on the same plot\n\n**Question**: What is the immigration distribution for Denmark, Norway, and Sweden for years 1980 - 2013?\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf_can.loc[['Denmark', 'Norway', 'Sweden'], years].plot.hist()\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-13-output-1.png){width=339 height=721}\n:::\n:::\n\n\nThat does not look right!\n\nDon't worry, you'll often come across situations like this when creating plots. The solution often lies in how the underlying dataset is structured.\n\nInstead of plotting the population frequency distribution of the population for the 3 countries, pandas instead plotted the population frequency distribution for the years.\n\nThis can be easily fixed by first transposing the dataset, and then plotting as shown below.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n#transform data\ndf_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\n\n#plot\ndf_t.plot(kind='hist', figsize=(10, 6))\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-14-output-1.png){width=829 height=528}\n:::\n:::\n\n\nLet's make a few modifications to improve the impact and aesthetics of the previous plot:\n\n*   increase the bin size to 15 by passing in `bins` parameter;\n*   set transparency to 60% by passing in `alpha` parameter;\n*   label the x-axis by passing in `x-label` parameter;\n*   change the colors of the plots by passing in `color` parameter.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n#get the tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n#plot an unstacked histogram\ndf_t.plot(kind='hist', figsize=(10, 6), bins = 15, alpha = 0.6, xticks = bin_edges,\ncolor = ['coral', 'darkslateblue', 'mediumseagreen'])\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-15-output-1.png){width=829 height=528}\n:::\n:::\n\n\nFor a full listing of colors available in Matplotlib, run the following code in your python shell:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n#import matplotlib\n#for name, hex in matplotlib.colors.cnames.items():\n#    print(name, hex)\n```\n:::\n\n\nIf we do not want the plots to overlap each other, we can stack them using the stacked parameter. Let's also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot. We can pass a tuple (min,max) using the xlim paramater, as show below.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n#get the tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n#  first bin value is 31.0, last is 308, adding buffer of 10 for aesthetic purposes\nxmin = bin_edges[0] -10\nxmax = bin_edges[-1] + 10 \n\n#plot a stacked histogram\n# stacked Histogram\ndf_t.plot(kind='hist',\n          figsize=(10, 6), \n          bins=15,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen'],\n          stacked=True,\n          xlim=(xmin, xmax)\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-17-output-1.png){width=842 height=528}\n:::\n:::\n\n\n**Question**: Use the scripting layer to display the immigration distribution for Greece, Albania, and Bulgaria for years 1980 - 2013? Use an overlapping plot with 15 bins and a transparency value of 0.35.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n#prep data\ndf_2 = df_can.loc[['Greece', 'Albania', 'Bulgaria'], years].transpose()\n\n#set bins\ncount, bin_edges = np.histogram(df_2, 15)\n\n#plot\ndf_2.plot(kind = 'hist', figsize = (8,6), alpha = 0.35, xticks = bin_edges, bins = 15)\nplt.title('Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-18-output-1.png){width=784 height=528}\n:::\n:::\n\n\n## Bar charts\n\n- Used to compare the values of a variable at a given point in time \n\nTo create a bar plot, we can pass one of two arguments via kind parameter in plot():\n\n- `kind=bar` creates a vertical bar plot\n- `kind=barh` creates a horizontal bar plot\n\n### Vertical bar plot\n\nIn vertical bar graphs, the x-axis is used for labelling, and the length of bars on the y-axis corresponds to the magnitude of the variable being measured. Vertical bar graphs are particularly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar.\n\n**Let's start off by analyzing the effect of Iceland's Financial Crisis:**\n\nThe 2008 - 2011 Icelandic Financial Crisis was a major economic and political event in Iceland. Relative to the size of its economy, Iceland's systemic banking collapse was the largest experienced by any country in economic history. The crisis led to a severe economic depression in 2008 - 2011 and significant political unrest.\n\n**Question:** Let's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n#prep data\ndf_iceland = df_can.loc['Iceland', years]\ndf_iceland.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n1980    17\n1981    33\n1982    10\nName: Iceland, dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n#plot the data\ndf_iceland.plot(kind = 'bar', figsize = (8,6))\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-20-output-1.png){width=662 height=549}\n:::\n:::\n\n\nThe bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008.\n\nLet's annotate this on the plot using the `annotate` method of the **scripting layer** or the **pyplot interface**. We will pass in the following parameters:\n\n*   `s`: str, the text of annotation.\n*   `xy`: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).\n*   `xytext`: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).\n*   `xycoords`: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).\n*   `arrowprops`: Takes a dictionary of properties to draw the arrow:\n    *   `arrowstyle`: Specifies the arrow style, `'->'` is standard arrow.\n    *   `connectionstyle`: Specifies the connection type. `arc3` is a straight line.\n    *   `color`: Specifies color of arrow.\n    *   `lw`: Specifies the line width.\n\nI encourage you to read the Matplotlib documentation for more details on annotations:\n<http://matplotlib.orsg/api/pyplot_api.html#matplotlib.pyplot.annotate>.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n#plot the data and rotate xticks\ndf_iceland.plot(kind = 'bar', figsize = (8,6), rot = 90)\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\n#annotate arrow, h\nplt.annotate('', # s: str. Will leave it blank for no text\n            xy=(32,70), # place head of the arrow at point (year 2012 , pop 70)\n            xytext=(28,20), # place base of the arrow at point (year 2008 , pop 20)\n            xycoords='data', # will use the coordinate system of the object being annotated\n            arrowprops = dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-21-output-1.png){width=662 height=549}\n:::\n:::\n\n\nLet's also annotate a text to go over the arrow.  We will pass in the following additional parameters:\n\n*   `rotation`: rotation angle of text in degrees (counter clockwise)\n*   `va`: vertical alignment of text \\[‘center’ | ‘top’ | ‘bottom’ | ‘baseline’]\n*   `ha`: horizontal alignment of text \\[‘center’ | ‘right’ | ‘left’]\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n#plot the data and rotate xticks\ndf_iceland.plot(kind = 'bar', figsize = (8,6), rot = 90)\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\n#annotate arrow\nplt.annotate('', # s: str. Will leave it blank for no text\n            xy=(32,70), # place head of the arrow at point (year 2012 , pop 70)\n            xytext=(28,20), # place base of the arrow at point (year 2008 , pop 20)\n            xycoords='data', # will use the coordinate system of the object being annotated\n            arrowprops = dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\n#annotate arrow\nplt.annotate('2008-2011 Financal crisis',  # text to display\n            xy=(28,30),  # start the text at at point (year 2008 , pop 30)\n            rotation=73.5, # based on trial and error to match the arrow\n            va='bottom', # want the text to be vertically 'bottom' aligned\n            ha='left' # want the text to be horizontally 'left' aligned\n            )\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-22-output-1.png){width=662 height=549}\n:::\n:::\n\n\n### Horizontal barplots\n\nSometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to  label categorical variables.\n\n**Question:** Using the scripting later and the `df_can` dataset, create a *horizontal* bar plot showing the *total* number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count.\n\nStep 1: Get the data pertaining to the top 15 countries.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf_top15 = df_can['Total'].head(15)\n```\n:::\n\n\nStep 2: Plot data:\n\n1.  Use `kind='barh'` to generate a bar chart with horizontal bars.\n2.  Make sure to choose a good size for the plot and to label your axes and to give the plot a title.\n3.  Loop through the countries and annotate the immigrant population using the anotate function of the scripting interface.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndf_top15.plot(kind='barh', figsize=(10,6))\n\n#plt.xlabel('Year')\n#plt.ylabel('Number of Immigrants')\nplt.title('Total number of Immigrants to Canada from 1980 to 2013\\n in the Top15 countries')\n\n#annotate value labels for each country and add to plot\nfor index, value in enumerate(df_top15):\n    label = format(value, ',')\n    plt.annotate(label, xy = (value,  index - 0.1), color = 'black', size =8)\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-24-output-1.png){width=1158 height=528}\n:::\n:::\n\n\n## Pie charts\n\nA `pie chart` is a circular graphic that displays numeric proportions by dividing a circle (or pie) into proportional slices. You are most likely already familiar with pie charts as it is widely used in business and media. We can create pie charts in Matplotlib by passing in the `kind=pie` keyword.\n\nLet's use a pie chart to explore the proportion (percentage) of new immigrants grouped by continents for the entire time period from 1980 to 2013.\n\nStep 1: Gather data.\n\nWe will use *pandas* `groupby` method to summarize the immigration data by `Continent`. The general process of `groupby` involves the following steps:\n\n1.  **Split:** Splitting the data into groups based on some criteria.\n2.  **Apply:** Applying a function to each group independently:\n    .sum()\n    .count()\n    .mean()\n    .std()\n    .aggregate()\n    .apply()\n    .etc..\n3.  **Combine:** Combining the results into a data structure.\n\n<img src=\"../images/Mod3Fig4SplitApplyCombine.png\" width=400 align=\"center\">\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n#group countries by continents and apply the sum function\ndf_continents = df_can.groupby('Continent', axis = 0).sum()\ndf_continents.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1980</th>\n      <th>1981</th>\n      <th>1982</th>\n      <th>1983</th>\n      <th>1984</th>\n      <th>1985</th>\n      <th>1986</th>\n      <th>1987</th>\n      <th>1988</th>\n      <th>1989</th>\n      <th>...</th>\n      <th>2005</th>\n      <th>2006</th>\n      <th>2007</th>\n      <th>2008</th>\n      <th>2009</th>\n      <th>2010</th>\n      <th>2011</th>\n      <th>2012</th>\n      <th>2013</th>\n      <th>Total</th>\n    </tr>\n    <tr>\n      <th>Continent</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Africa</th>\n      <td>3951</td>\n      <td>4363</td>\n      <td>3819</td>\n      <td>2671</td>\n      <td>2639</td>\n      <td>2650</td>\n      <td>3782</td>\n      <td>7494</td>\n      <td>7552</td>\n      <td>9894</td>\n      <td>...</td>\n      <td>27523</td>\n      <td>29188</td>\n      <td>28284</td>\n      <td>29890</td>\n      <td>34534</td>\n      <td>40892</td>\n      <td>35441</td>\n      <td>38083</td>\n      <td>38543</td>\n      <td>618948</td>\n    </tr>\n    <tr>\n      <th>Asia</th>\n      <td>31025</td>\n      <td>34314</td>\n      <td>30214</td>\n      <td>24696</td>\n      <td>27274</td>\n      <td>23850</td>\n      <td>28739</td>\n      <td>43203</td>\n      <td>47454</td>\n      <td>60256</td>\n      <td>...</td>\n      <td>159253</td>\n      <td>149054</td>\n      <td>133459</td>\n      <td>139894</td>\n      <td>141434</td>\n      <td>163845</td>\n      <td>146894</td>\n      <td>152218</td>\n      <td>155075</td>\n      <td>3317794</td>\n    </tr>\n    <tr>\n      <th>Europe</th>\n      <td>39760</td>\n      <td>44802</td>\n      <td>42720</td>\n      <td>24638</td>\n      <td>22287</td>\n      <td>20844</td>\n      <td>24370</td>\n      <td>46698</td>\n      <td>54726</td>\n      <td>60893</td>\n      <td>...</td>\n      <td>35955</td>\n      <td>33053</td>\n      <td>33495</td>\n      <td>34692</td>\n      <td>35078</td>\n      <td>33425</td>\n      <td>26778</td>\n      <td>29177</td>\n      <td>28691</td>\n      <td>1410947</td>\n    </tr>\n    <tr>\n      <th>Latin America and the Caribbean</th>\n      <td>13081</td>\n      <td>15215</td>\n      <td>16769</td>\n      <td>15427</td>\n      <td>13678</td>\n      <td>15171</td>\n      <td>21179</td>\n      <td>28471</td>\n      <td>21924</td>\n      <td>25060</td>\n      <td>...</td>\n      <td>24747</td>\n      <td>24676</td>\n      <td>26011</td>\n      <td>26547</td>\n      <td>26867</td>\n      <td>28818</td>\n      <td>27856</td>\n      <td>27173</td>\n      <td>24950</td>\n      <td>765148</td>\n    </tr>\n    <tr>\n      <th>Northern America</th>\n      <td>9378</td>\n      <td>10030</td>\n      <td>9074</td>\n      <td>7100</td>\n      <td>6661</td>\n      <td>6543</td>\n      <td>7074</td>\n      <td>7705</td>\n      <td>6469</td>\n      <td>6790</td>\n      <td>...</td>\n      <td>8394</td>\n      <td>9613</td>\n      <td>9463</td>\n      <td>10190</td>\n      <td>8995</td>\n      <td>8142</td>\n      <td>7677</td>\n      <td>7892</td>\n      <td>8503</td>\n      <td>241142</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 35 columns</p>\n</div>\n```\n:::\n:::\n\n\nStep 2: Plot the data. We will pass in `kind = 'pie'` keyword, along with the following additional parameters:\n\n*   `autopct` -  is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be `fmt%pct`.\n*   `startangle` - rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.\n*   `shadow` - Draws a shadow beneath the pie (to give a 3D feel).\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# autopct create %, start angle represent starting point\ndf_continents['Total'].plot(kind = 'pie',\n                            figsize = (5,6),\n                            autopct='%1.1f%%', #add in percentages\n                            startangle=90,\n                            shadow=True\n                            )\n\nplt.title('Immigration to Canada by Continent [1980 - 2013]')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-26-output-1.png){width=595 height=485}\n:::\n:::\n\n\nThe above visual is not very clear, the numbers and text overlap in some instances. Let's make a few modifications to improve the visuals:\n\n*   Remove the text labels on the pie chart by passing in `legend` and add it as a seperate legend using `plt.legend()`.\n*   Push out the percentages to sit just outside the pie chart by passing in `pctdistance` parameter.\n*   Pass in a custom set of colors for continents by passing in `colors` parameter.\n*   **Explode** the pie chart to emphasize the lowest three continents (Africa, North America, and Latin America and Caribbean) by passing in `explode` parameter.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ncolors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\nexplode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\n#plot\ndf_continents['Total'].plot(kind = 'pie',\n                            figsize = (5,6),\n                            autopct='%1.1f%%', #add in percentages\n                            startangle=90,\n                            shadow=True,\n                            labels=None,\n                            pctdistance=1.12,\n                            colors=colors_list,\n                            explode=explode_list\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) \nplt.axis('equal') # Sets the pie chart to look like a circle.\n\n# add legend\nplt.legend(labels=df_continents.index, loc='upper left') \n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-27-output-1.png){width=508 height=538}\n:::\n:::\n\n\nQuestion: Using a pie chart, explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nexplode_list = [0.0, 0, 0, 0.1, 0.1, 0.2]\n\n#plot\ndf_continents['2013'].plot(kind='pie',\n                            figsize = (6,5),\n                            autopct='%1.1f%%',\n                            startangle=90,\n                            shadow=True,\n                            labels=None,\n                            pctdistance=1.12, \n                            explode=explode_list)\n\nplt.title(\"Immigration to canada in 2013\", y =1.12)\n\n#add legend\nplt.legend(labels = df_continents.index, loc='upper left')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-28-output-1.png){width=414 height=455}\n:::\n:::\n\n\n## Boxplots\n\nSo, what is a boxplot? A boxplot is a way of statistically representing the distribution of given data through 5 main dimensions.\n\n- minimum, which is the smallest number in the sorted data. Its value can be obtained by subtracting 1.5 times the IQR where IQR is interquartile range from the first quartile.\n- first quartile which is 25% of the way through the sorted data. In other words, 1/4 of the data points are less than this value\n- median, which is the median of the sorted data\n-  third quartile, which is 75% of the way through the sorted data. In other words, 3/4 of the data points are less than this value\n- maximum, which is the highest number in the sorted data where maximum equals third quartile summed with 1.5 multiplied by IQR\n- Boxplots also display outliers as individual dots that occur outside the upper and lower extremes\n\n<img src=\"../images/boxplot_complete.png\" width=440, align=\"center\">\n\nTo make a `boxplot`, we can use `kind=box` in `plot` method invoked on a *pandas* series or dataframe.\n\nLet's plot the box plot for the Japanese immigrants between 1980 - 2013.\n\nStep 1: Get the subset of the dataset. Even though we are extracting the data for just one country, we will obtain it as a dataframe. This will help us with calling the `dataframe.describe()` method to view the percentiles.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n#subset data\ndf_japan = df_can.loc[['Japan'], years].transpose()\n\n#ensure we have numericdata\ndf_japan.Japan =df_japan.Japan.astype(int)\n\ndf_japan.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Country</th>\n      <th>Japan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1980</th>\n      <td>701</td>\n    </tr>\n    <tr>\n      <th>1981</th>\n      <td>756</td>\n    </tr>\n    <tr>\n      <th>1982</th>\n      <td>598</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nStep 2: Plot by passing in kind='box'.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndf_japan.plot(kind='box', figsize=(6, 6))\n\nplt.title('Box plot of Japanese Immigrants from 1980 - 2013')\nplt.ylabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-30-output-1.png){width=550 height=507}\n:::\n:::\n\n\nWe can immediately make a few key observations from the plot above:\n\n1.  The minimum number of immigrants is around 200 (min), maximum number is around 1300 (max), and  median number of immigrants is around 900 (median).\n2.  25% of the years for period 1980 - 2013 had an annual immigrant count of \\~500 or fewer (First quartile).\n3.  75% of the years for period 1980 - 2013 had an annual immigrant count of \\~1100 or fewer (Third quartile).\n\nWe can view the actual numbers by calling the `describe()` method on the dataframe.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndf_japan.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Country</th>\n      <th>Japan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>34.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>814.911765</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>337.219771</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>198.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>529.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>902.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1079.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1284.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOne of the key benefits of box plots is comparing the distribution of multiple datasets. In one of the previous labs, we observed that China and India had very similar immigration trends. Let's analyze these two countries further using box plots.\n\n**Question:** Compare the distribution of the number of new immigrants from India and China for the period 1980 - 2013.\n\nStep 1: Get the dataset for China and India and call the dataframe df_CI.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndf_CI = df_can.loc[['China', 'India'], years].transpose()\ndf_CI.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Country</th>\n      <th>China</th>\n      <th>India</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1980</th>\n      <td>5123</td>\n      <td>8880</td>\n    </tr>\n    <tr>\n      <th>1981</th>\n      <td>6682</td>\n      <td>8670</td>\n    </tr>\n    <tr>\n      <th>1982</th>\n      <td>3308</td>\n      <td>8147</td>\n    </tr>\n    <tr>\n      <th>1983</th>\n      <td>1863</td>\n      <td>7338</td>\n    </tr>\n    <tr>\n      <th>1984</th>\n      <td>1527</td>\n      <td>5704</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's view the percentiles associated with both countries using the describe() method.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ndf_CI.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Country</th>\n      <th>China</th>\n      <th>India</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>34.000000</td>\n      <td>34.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>19410.647059</td>\n      <td>20350.117647</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>13568.230790</td>\n      <td>10007.342579</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1527.000000</td>\n      <td>4211.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5512.750000</td>\n      <td>10637.750000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>19945.000000</td>\n      <td>20235.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>31568.500000</td>\n      <td>28699.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>42584.000000</td>\n      <td>36210.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nStep 2: Plot data.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndf_CI.plot(kind='box', figsize = (6,6))\n\nplt.title('Box plot of Chinese and Indian Immigrants from 1980 - 2013')\nplt.ylabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-34-output-1.png){width=607 height=507}\n:::\n:::\n\n\nWe can observe that, while both countries have around the same median immigrant population (~20,000), China's immigrant population range is more spread out than India's. The maximum population from India for any year (36,210) is around 15% lower than the maximum population from China (42,584).\n\nIf you prefer to create horizontal box plots, you can pass the vert parameter in the plot function and assign it to False. You can also specify a different color in case you are not a big fan of the default red color.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ndf_CI.plot(kind='box', figsize = (6,6), color = 'blue', vert = False)\n\nplt.title('Box plot of Chinese and Indian Immigrants from 1980 - 2013')\nplt.ylabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-35-output-1.png){width=603 height=507}\n:::\n:::\n\n\n**Subplots**\n\nOften times we might want to plot multiple plots within the same figure. For example, we might want to perform a side by side comparison of the box plot with the line plot of China and India's immigration.\n\nTo visualize multiple plots together, we can create a **`figure`** (overall canvas) and divide it into **`subplots`**, each containing a plot. With **subplots**, we usually work with the **artist layer** instead of the **scripting layer**.\n\nTypical syntax is : <br>\n\n```\n    fig = plt.figure() # create figure\n    ax = fig.add_subplot(nrows, ncols, plot_number) # create subplots\n```\n\nWhere\n\n*   `nrows` and `ncols` are used to notionally split the figure into (`nrows` \\* `ncols`) sub-axes,\n*   `plot_number` is used to identify the particular subplot that this function is to create within the notional grid. `plot_number` starts at 1, increments across rows first and has a maximum of `nrows` \\* `ncols` as shown below.\n\n<img src=\"../images/Mod3Fig5Subplots_V2.png\" width=400 align=\"center\">\n\nWe can then specify which subplot to place each plot by passing in the ax paramemter in plot() method as follows:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nfig = plt.figure() # create figure\n\nax0 = fig.add_subplot(2, 1, 1) # add subplot 1 (2 row, 1 columns, first plot)\nax1 = fig.add_subplot(2, 1, 2) # add subplot 2 (2 row, 1 columns, second plot). See tip below**\n\n# Subplot 1: Box plot\ndf_CI.plot(kind='box', color='blue', vert=False, figsize=(10, 6), ax=ax0) # add to subplot 1\nax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')\nax0.set_xlabel('Number of Immigrants')\nax0.set_ylabel('Countries')\n\n# Subplot 2: Line plot\ndf_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2\nax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')\nax1.set_ylabel('Number of Immigrants')\nax1.set_xlabel('Years')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-36-output-1.png){width=1580 height=528}\n:::\n:::\n\n\n**Tip regarding subplot convention**\n\nIn the case when `nrows`, `ncols`, and `plot_number` are all less than 10, a convenience exists such that a 3-digit number can be given instead, where the hundreds represent `nrows`, the tens represent `ncols` and the units represent `plot_number`. For instance,\n\n```\n   subplot(211) == subplot(2, 1, 1) \n```\n\nproduces a subaxes in a figure which represents the top plot (i.e. the first) in a 2 rows by 1 column notional grid (no grid actually exists, but conceptually this is how the returned subplot has been positioned).\n\nQuestion: Create a box plot to visualize the distribution of the top 15 countries (based on total immigration) grouped by the decades 1980s, 1990s, and 2000s.\n\nStep 1: Get the dataset. Get the top 15 countries based on Total immigrant population. Name the dataframe df_top15.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ndf_can.sort_values(['Total'], ascending = False, axis = 0 , inplace =  True)\ndf_top15 = df_can.head(15)\n```\n:::\n\n\nStep 2: Create a new dataframe which contains the aggregate for each decade. One way to do that:\n\n1.  Create a list of all years in decades 80's, 90's, and 00's.\n2.  Slice the original dataframe df_can to create a series for each decade and sum across all years for each country.\n3.  Merge the three series into a new data frame. Call your dataframe **new_df**.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# create a list of all years in decades 80's, 90's, and 00's\nyears_80s = list(map(str, range(1980, 1990))) \nyears_90s = list(map(str, range(1990, 2000))) \nyears_00s = list(map(str, range(2000, 2010))) \n\n# slice the original dataframe df_can to create a series for each decade\ndf_80s = df_top15.loc[:, years_80s].sum(axis=1) \ndf_90s = df_top15.loc[:, years_90s].sum(axis=1) \ndf_00s = df_top15.loc[:, years_00s].sum(axis=1)\n\n# merge the three series into a new data frame\nnew_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) \n\n# display dataframe\nnew_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1980s</th>\n      <th>1990s</th>\n      <th>2000s</th>\n    </tr>\n    <tr>\n      <th>Country</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>India</th>\n      <td>82154</td>\n      <td>180395</td>\n      <td>303591</td>\n    </tr>\n    <tr>\n      <th>China</th>\n      <td>32003</td>\n      <td>161528</td>\n      <td>340385</td>\n    </tr>\n    <tr>\n      <th>United Kingdom of Great Britain and Northern Ireland</th>\n      <td>179171</td>\n      <td>261966</td>\n      <td>83413</td>\n    </tr>\n    <tr>\n      <th>Philippines</th>\n      <td>60764</td>\n      <td>138482</td>\n      <td>172904</td>\n    </tr>\n    <tr>\n      <th>Pakistan</th>\n      <td>10591</td>\n      <td>65302</td>\n      <td>127598</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n#get basic stats\nnew_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1980s</th>\n      <th>1990s</th>\n      <th>2000s</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>15.000000</td>\n      <td>15.000000</td>\n      <td>15.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>44418.333333</td>\n      <td>85594.666667</td>\n      <td>97471.533333</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>44190.676455</td>\n      <td>68237.560246</td>\n      <td>100583.204205</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>7613.000000</td>\n      <td>30028.000000</td>\n      <td>13629.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>16698.000000</td>\n      <td>39259.000000</td>\n      <td>36101.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>30638.000000</td>\n      <td>56915.000000</td>\n      <td>65794.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>59183.000000</td>\n      <td>104451.500000</td>\n      <td>105505.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>179171.000000</td>\n      <td>261966.000000</td>\n      <td>340385.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nStep 3: Plot the box plots.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nnew_df.plot(kind='box', figsize = (6,6), color = 'blue', vert = False)\n\nplt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s')\nplt.ylabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-40-output-1.png){width=664 height=507}\n:::\n:::\n\n\nNote how the box plot differs from the summary table created. The box plot scans the data and identifies the outliers. In order to be an outlier, the data value must be:<br>\n\n*   larger than Q3 by at least 1.5 times the interquartile range (IQR), or,\n*   smaller than Q1 by at least 1.5 times the IQR.\n\nLet's look at decade 2000s as an example: <br>\n\n*   Q1 (25%) = 36,101.5 <br>\n*   Q3 (75%) = 105,505.5 <br>\n*   IQR = Q3 - Q1 = 69,404 <br>\n\nUsing the definition of outlier, any value that is greater than Q3 by 1.5 times IQR will be flagged as outlier.\n\nOutlier > 105,505.5 + (1.5 \\* 69,404) <br>\nOutlier > 209,611.5\n\n\n\n\n\n\n## Scatter plots\n\n- A scatter plot is a type of plot that displays values pertaining to typically two variables against each other. \n- Usually it is a dependent variable to be plotted against an independent variable in order to determine if any correlation between the two variables exists\n\n\nLet's start by exploring the following:\n\nUsing a scatter plot, let's visualize the trend of total immigrantion to Canada (all countries combined) for the years 1980 - 2013.\n\nStep 1: Get the dataset. Since we are expecting to use the relationship betewen years and total population, we will convert years to int type.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type int (useful for regression later on)\ndf_tot.index = map(int, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace = True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>total</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1980</td>\n      <td>99137</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1981</td>\n      <td>110563</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1982</td>\n      <td>104271</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1983</td>\n      <td>75550</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1984</td>\n      <td>73417</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nStep 2: Plot the data. In Matplotlib, we can create a scatter plot set by passing in kind='scatter' as plot argument. We will also need to pass in x and y keywords to specify the columns that go on the x- and the y-axis.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ndf_tot.plot(kind='scatter', x='year', y='total', figsize=(6, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-42-output-1.png){width=547 height=528}\n:::\n:::\n\n\nNotice how the scatter plot does not connect the data  points together. We can clearly observe an upward trend in the data: as the years go by, the total number of immigrants increases. We can mathematically analyze this upward trend using a regression line (line of best fit).\n\nSo let's try to plot a linear line of best fit, and use it to  predict the number of immigrants in 2015.\n\nStep 1: Get the equation of line of best fit. We will use **Numpy**'s `polyfit()` method by passing in the following:\n\n*   `x`: x-coordinates of the data.\n*   `y`: y-coordinates of the data.\n*   `deg`: Degree of fitting polynomial. 1 = linear, 2 = quadratic, and so on.\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nx = df_tot['year']\ny = df_tot['total']\nfit = np.polyfit(x,y, deg = 1)\n\nfit\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\narray([ 5.56709228e+03, -1.09261952e+07])\n```\n:::\n:::\n\n\nThe output is an array with the polynomial coefficients, highest powers first. Since we are plotting a linear regression `y= a * x + b`, our output has 2 elements `[5.56709228e+03, -1.09261952e+07]` with the the slope in position 0 and intercept in position 1.\n\nStep 2: Plot the regression line on the `scatter plot`.\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\n# print out the line of best fit\n'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) \n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n'No. Immigrants = 5567 * Year + -10926195'\n```\n:::\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ndf_tot.plot(kind='scatter', x='year', y='total', figsize=(6, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\n#plot line of the best fit\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-45-output-1.png){width=547 height=528}\n:::\n:::\n\n\nUsing the equation of line of best fit, we can estimate the number of immigrants in 2015:\n\n```python\nNo. Immigrants = 5567 * Year - 10926195\nNo. Immigrants = 5567 * 2015 - 10926195\nNo. Immigrants = 291,310\n```\n\nWhen compared to the actual from Citizenship and Immigration Canada's (CIC) [2016 Annual Report](http://www.cic.gc.ca/english/resources/publications/annual-report-2016/index.asp?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01), we see that Canada accepted 271,845 immigrants in 2015. Our estimated value of 291,310 is within 7% of the actual number, which is pretty good considering our original data came from United Nations (and might differ slightly from CIC data).\n\nAs a side note, we can observe that immigration took a dip around 1993 - 1997. Further analysis into the topic revealed that in 1993 Canada introcuded Bill C-86 which introduced revisions to the refugee determination system, mostly restrictive. Further amendments to the Immigration Regulations cancelled the sponsorship required for \"assisted relatives\" and reduced the points awarded to them, making it more difficult for family members (other than nuclear family) to immigrate to Canada. These restrictive measures had a direct impact on the immigration numbers for the next several years.\n\n\nQuestion: Create a scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013?\n\n\n**Step 1**: Get the data:\n\n1.  Create a dataframe the consists of the numbers associated with Denmark, Norway, and Sweden only. Name it **df_countries**.\n2.  Sum the immigration numbers across all three countries for each year and turn the result into a dataframe. Name this new dataframe **df_total**.\n3.  Reset the index in place.\n4.  Rename the columns to **year** and **total**.\n5.  Display the resulting dataframe.\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\n#subset data\ndf_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years]\n\n#get total\ndf_total = pd.DataFrame(df_can[years].sum(axis=0))\n\n#reset index\ndf_total.reset_index(inplace = True)\n\n#rename columns\ndf_total.columns = ['year', 'total']\n\n# change column year from string to int to create scatter plot\ndf_total['year'] = df_total['year'].astype(int)\n    \ndf_total.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>total</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1980</td>\n      <td>99137</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1981</td>\n      <td>110563</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1982</td>\n      <td>104271</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nStep 2: Generate the scatter plot by plotting the total versus year in df_total.\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\ndf_total.plot(kind='scatter', x='year', y='total', figsize=(6, 6), color='darkblue')\n\nplt.title('Total Immigration from Denmark, Norway and Sweden to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-47-output-1.png){width=820 height=528}\n:::\n:::\n\n\n## Bubble Plots\n\nA `bubble plot` is a variation of the `scatter plot` that displays three dimensions of data (x, y, z). The data points are replaced with bubbles, and the size of the bubble is determined by the third variable `z`, also known as the weight. In `maplotlib`, we can pass in an array or scalar to the parameter `s` to `plot()`, that contains the weight of each point.\n\n**Let's start by analyzing the effect of Argentina's great depression**.\n\nArgentina suffered a great depression from 1998 to 2002, which caused widespread unemployment, riots, the fall of the government, and a default on the country's foreign debt. In terms of income, over 50% of Argentines were poor, and seven out of ten Argentine children were poor at the depth of the crisis in 2002.\n\nLet's analyze the effect of this crisis, and compare Argentina's immigration to that of it's neighbour Brazil. Let's do that using a `bubble plot` of immigration from Brazil and Argentina for the years 1980 - 2013. We will set the weights for the bubble as the *normalized* value of the population for each year.\n\nStep 1: Get the data for Brazil and Argentina. Like in the previous example, we will convert the Years to type int and include it in the dataframe.\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\n# transposed dataframe\ndf_can_t = df_can[years].transpose()\n\n# cast the Years (the index) to type int\ndf_can_t.index = map(int, df_can_t.index)\n\n# let's label the index. This will automatically be the column name when we reset the index\ndf_can_t.index.name = 'Year'\n\n# reset index to bring the Year in as a column\ndf_can_t.reset_index(inplace=True)\n\n# view the changes\ndf_can_t.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Country</th>\n      <th>Year</th>\n      <th>India</th>\n      <th>China</th>\n      <th>United Kingdom of Great Britain and Northern Ireland</th>\n      <th>Philippines</th>\n      <th>Pakistan</th>\n      <th>United States of America</th>\n      <th>Iran (Islamic Republic of)</th>\n      <th>Sri Lanka</th>\n      <th>Republic of Korea</th>\n      <th>...</th>\n      <th>Kiribati</th>\n      <th>Vanuatu</th>\n      <th>Sao Tome and Principe</th>\n      <th>Tuvalu</th>\n      <th>American Samoa</th>\n      <th>San Marino</th>\n      <th>New Caledonia</th>\n      <th>Marshall Islands</th>\n      <th>Western Sahara</th>\n      <th>Palau</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1980</td>\n      <td>8880</td>\n      <td>5123</td>\n      <td>22045</td>\n      <td>6051</td>\n      <td>978</td>\n      <td>9378</td>\n      <td>1172</td>\n      <td>185</td>\n      <td>1011</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1981</td>\n      <td>8670</td>\n      <td>6682</td>\n      <td>24796</td>\n      <td>5921</td>\n      <td>972</td>\n      <td>10030</td>\n      <td>1429</td>\n      <td>371</td>\n      <td>1456</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1982</td>\n      <td>8147</td>\n      <td>3308</td>\n      <td>20620</td>\n      <td>5249</td>\n      <td>1201</td>\n      <td>9074</td>\n      <td>1822</td>\n      <td>290</td>\n      <td>1572</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1983</td>\n      <td>7338</td>\n      <td>1863</td>\n      <td>10015</td>\n      <td>4562</td>\n      <td>900</td>\n      <td>7100</td>\n      <td>1592</td>\n      <td>197</td>\n      <td>1081</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1984</td>\n      <td>5704</td>\n      <td>1527</td>\n      <td>10170</td>\n      <td>3801</td>\n      <td>668</td>\n      <td>6661</td>\n      <td>1977</td>\n      <td>1086</td>\n      <td>847</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 196 columns</p>\n</div>\n```\n:::\n:::\n\n\n**Step 2**: Create the normalized weights.\n\nThere are several methods of normalizations in statistics, each with its own use. In this case, we will use [feature scaling](https://en.wikipedia.org/wiki/Feature_scaling?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01) to bring all values into the range. The general formula is:\n\n<img src=\"../images/Mod3Fig3FeatureScaling.png\" align=\"center\">\n\nwhere $X$ is the original value, $X'$ is the corresponding normalized value. The formula sets the max value in the dataset to 1, and sets the min value to 0. The rest of the data points are scaled to a value between 0-1 accordingly.\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\n# normalize Brazil data\nnorm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())\n\n# normalize Argentina data\nnorm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())\n```\n:::\n\n\n**Step 3**: Plot the data.\n\n*   To plot two different scatter plots in one plot, we can include the axes one plot into the other by passing it via the `ax` parameter.\n*   We will also pass in the weights using the `s` parameter. Given that the normalized weights are between 0-1, they won't be visible on the plot. Therefore, we will:\n    *   multiply weights by 2000 to scale it up on the graph, and,\n    *   add 10 to compensate for the min value (which has a 0 weight and therefore scale with $\\times 2000$).\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\n# Brazil\nax0 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='Brazil',\n                    figsize=(8, 6),\n                    alpha=0.5,  # transparency\n                    color='green',\n                    s=norm_brazil * 2000 + 10,  # pass in weights \n                    xlim=(1975, 2015)\n                    )\n\n# Argentina\nax1 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='Argentina',\n                    alpha=0.5,\n                    color=\"blue\",\n                    s=norm_argentina * 2000 + 10,\n                    ax=ax0\n                    )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from Brazil and Argentina from 1980 to 2013')\nax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-50-output-1.png){width=695 height=528}\n:::\n:::\n\n\nThe size of the bubble corresponds to the magnitude of immigrating population for that year, compared to the 1980 - 2013 data. The larger the bubble is, the more immigrants are in that year.\n\nFrom the plot above, we can see a corresponding increase in immigration from Argentina during the 1998 - 2002 great depression. We can also observe a similar spike around 1985 to 1993. In fact, Argentina had suffered a great depression from 1974 to 1990, just before the onset of 1998 - 2002 great depression.\n\nOn a similar note, Brazil suffered the *Samba Effect* where the Brazilian real (currency) dropped nearly 35% in 1999. There was a fear of a South American financial crisis as many South American countries were heavily dependent on industrial exports from Brazil. The Brazilian government subsequently adopted an austerity program, and the economy slowly recovered over the years, culminating in a surge in 2010. The immigration data reflect these events.\n\n**Question**: Previously in this lab, we created box plots to compare immigration from China and India to Canada. Create bubble plots of immigration from China and India to visualize any differences with time from 1980 to 2013. You can use **df_can_t** that we defined and used in the previous example.\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\n# normalized Chinese data\nnorm_china = (df_can_t['China'] - df_can_t['China'].min()) / (df_can_t['China'].max() - df_can_t['China'].min())\n\n# normalized Indian data\nnorm_india = (df_can_t['India'] - df_can_t['India'].min()) / (df_can_t['India'].max() - df_can_t['India'].min())\n```\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nax0 = df_can_t.plot(kind='scatter',\n                        x='Year',\n                        y='China',\n                        figsize=(14, 8),\n                        alpha=0.5,                  # transparency\n                        color='green',\n                        s=norm_china * 2000 + 10,  # pass in weights \n                        xlim=(1975, 2015)\n                       )\n\n# India\nax1 = df_can_t.plot(kind='scatter',\n                        x='Year',\n                        y='India',\n                        alpha=0.5,\n                        color=\"blue\",\n                        s=norm_india * 2000 + 10,\n                        ax = ax0\n                       )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from China and India from 1980 - 2013')\nax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_basic_vis_tools_files/figure-html/cell-52-output-1.png){width=1150 height=676}\n:::\n:::\n\n\n",
    "supporting": [
      "2_basic_vis_tools_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}