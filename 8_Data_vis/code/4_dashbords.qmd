# Creating Dashbords with Plotly and Dash

## Dashboards

Web-based dashboarding can be done in python with:

- Plotly | Dash
- Panel
- voila
- Streamlit


Dashbord tools:

- bokeh
- ipywidgets (useful for jupyter)
- matplotlib
- bowtie
- Flask

For more information about Dashboards, visit the following links:

- [Python dashboarding tools ](https://pyviz.org/dashboarding/)
- [John Snow's data journalism](https://www.theguardian.com/news/datablog/2013/mar/15/john-snow-cholera-map)


To learn more about using Plotly to create dashboards, explore

- [Plotly python](https://plotly.com/python/getting-started/)
- [Plotly graph objects with example](https://plotly.com/python/graph-objects/)
- [Plotly express](https://plotly.com/python/plotly-express/)
- [API reference](https://plotly.com/python-api-reference/)

Here are additional useful resources:

- [Plotly cheatsheet](https://images.plot.ly/plotly-documentation/images/plotly_js_cheat_sheet.pdf)
- [Plotly community](https://community.plotly.com/c/plotly-python/5)
- [Related blogs](https://plotlygraphs.medium.com)
- [Open-source datasets ](https://developer.ibm.com/exchanges/data/)


## Plotly basics: scatter, line, bar, bubble, histogram, pie, sunburst

Our data:

The Reporting Carrier On-Time Performance Dataset contains information on approximately 200 million domestic US flights reported to the United States Bureau of Transportation Statistics. The dataset contains basic information about each flight (such as date, time, departure airport, arrival airport) and, if applicable, the amount of time the flight was delayed and information about the reason for the delay. This dataset can be used to predict the likelihood of a flight arriving on time.

Preview data, dataset metadata, and data glossary [here.](https://dax-cdn.cdn.appdomain.cloud/dax-airline/1.0.1/data-preview/index.html)

```{python}
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import kaleido
```


```{python}
#read in data
airline_data = pd.read_csv("../data/airline_data.csv", encoding = "ISO-8859-1",dtype={'Div1Airport': str, 'Div1TailNum': str,'Div2Airport': str, 'Div2TailNum': str})

#check the data
print(airline_data.head())

# Shape of the data
print(airline_data.shape)
```

```{python}
#randomly subsample 500 datapoints
#we set the random state to be 42 to always get the same results
data = airline_data.sample(n=500, random_state=42)

#control
data.shape
```


### plotly.graph_objects

#### Scatterplots

Learn more about usage of scatter plot [here](https://plotly.com/python/line-and-scatter/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)

Idea: How departure time changes with respect to airport distance

```{python}
# First we create a figure using go.Figure and adding trace to it through go.scatter
fig = go.Figure(data = go.Scatter(x = data['Distance'], y = data['DepTime'], mode = 'markers', marker = dict(color = 'red')))

# Updating layout through `update_layout`. Here we are adding title to the plot and providing title to x and y axis.
fig.update_layout(title = 'Distance vs Departure time', xaxis_title = 'Distance', yaxis_title = 'DepTime')

# Display the figure
fig.show()
```



#### Lineplots

Learn more about line plot [here](https://plotly.com/python/line-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)

```{python}
# Group the data by Month and compute average over arrival delay time.
line_data = data.groupby('Month')['ArrDelay'].mean().reset_index()
line_data.head(3)
```
*   Create a line plot with x-axis being the month and y-axis being computed average delay time. Update plot title, xaxis, and yaxis title.
*   Scatter and line plot vary by updating mode parameter.


```{python}
#create figure
fig = go.Figure(data = go.Scatter(x = line_data['Month'], y = line_data['ArrDelay'], mode = 'lines', marker = dict(color='green')))

#update the labels
fig.update_layout(title = 'Arrival delay by month', xaxis_title = 'Month', yaxis_title = 'Arrival Delay')

#plot
fig.show()
```


## plotly.express

### Bar chart


Learn more about bar chart [here](https://plotly.com/python/bar-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)

Idea: Extract number of flights from a specific airline that goes to a destination

```{python}
# Group the data by destination state and reporting airline. Compute total number of flights in each combination
bar_data = data.groupby(['DestState'])['Flights'].sum().reset_index()
bar_data.head(3)
```


```{python}
fig = px.bar(bar_data, x = 'DestState', y = 'Flights', title = 'Total number of flights to the destination state split by reporting airline')
fig.show()
```



### Bubble chart

Learn more about bubble chart [here](https://plotly.com/python/bubble-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)

Idea: Get number of flights as per reporting airline

```{python}
# Group the data by reporting airline and get number of flights
bub_data = data.groupby('Reporting_Airline')['Flights'].sum().reset_index()
bub_data.head(3)
```


```{python}
fig = px.scatter(bub_data, x = 'Reporting_Airline', y = 'Flights', size = 'Flights', hover_name = 'Reporting_Airline', title = 'Total number of flights by reporting airline')
fig.show()
```


#### Histogram

Learn more about histogram [here](https://plotly.com/python/histograms/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)

Idea: Get distribution of arrival delay

```{python}
# Set missing values to 0
data['ArrDelay'] = data['ArrDelay'].fillna(0)
```

```{python}
# Set missing values to 0
fig = px.histogram(data, x = 'ArrDelay')
fig.show()
```



#### Pie Chart

Learn more about pie chart [here](https://plotly.com/python/pie-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)

Idea: Proportion of distance group by month (month indicated by numbers)

```{python}
# Use px.pie function to create the chart. Input dataset. 
# Values parameter will set values associated to the sector. 'Month' feature is passed to it.
# labels for the sector are passed to the `names` parameter.
fig = px.pie(data, values='Month', names='DistanceGroup', title='Distance group proportion by month')
fig.show()
```


#### Writing image to file

Save as static image via kaleido: 

Notice: Doesn't work in RStudio yet but works via quarto render.

```{python}
fig.write_image("../images/fig1.svg", engine="kaleido")
```

#### Sunburst Charts

Learn more about sunburst chart [here](https://plotly.com/python/sunburst-charts/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01)

Idea: Hierarchical view in order of month and destination state holding value of number of flights

*   Create sunburst chart using `px.sunburst`.
*   Define hierarchy of sectors from root to leaves in `path` parameter. Here, we go from `Month` to `DestStateName` feature.
*   Set sector values in `values` parameter. Here, we can pass in `Flights` feature.
*   Show the figure.


```{python}
fig = px.sunburst(data, path = ['Month', 'DestStateName'], values = 'Flights')
fig.show()
```



## Dash

Dash is an open source framework for building data visualization interfaces.

In this  lab you will utilize an Integrated Development Environment (IDE) based on Theia (an open source IDE platform similar to VS Code) to develop and run Python code.

**Goal**

Create a dashboard that displays the percentage of flights running under specific distance group. Distance group is the distance intervals, every 250 miles, for flight segment. If the flight covers to 500 miles, it will be under distance group 2 (250 miles + 250 miles).

Our dashboard application consists of three components:

- Title of the application
- Description of the application
- Chart conveying the proportion of distance group by month

For this to work, we need to do the following (plus any libraries we require for plotting): `python3 -m pip install pandas dash` and `pip3 install httpx==0.20 dash plotly`. 

For this to work, we started a new python script with `touch dash_basics.py` which we opened with VScode typing this into the terminal: `code dash_basics.py`.

### Prep the data

The first task is the data preparation (what we have done before) and we:

- Importing necessary libraries
- Reading and sampling 500 random data points
- Get the chart ready

To do this, we added the following into our python script

```{python}
#| eval: false

# Import required packages
import pandas as pd
import plotly.express as px
import dash
import dash_html_components as html
import dash_core_components as dcc

# Read the airline data into pandas dataframe
airline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', 
                            encoding = "ISO-8859-1",
                            dtype={'Div1Airport': str, 'Div1TailNum': str, 
                                   'Div2Airport': str, 'Div2TailNum': str})

# Randomly sample 500 data points. Setting the random state to be 42 so that we get same result.
data = airline_data.sample(n=500, random_state=42)

# Pie Chart Creation
fig = px.pie(data, values='Flights', names='DistanceGroup', title='Distance group proportion by flights')
```


### Create dash application and get the layout skeleton

Next, we create a skeleton for our dash application. Our dashboard application has three components as seen before:

- Title of the application
- Description of the application
- Chart conveying the proportion of distance group by month
- Mapping to the respective Dash HTML tags:

To do this a:

- Title is added using `html.H1()` tag, which holds the application title.
- Description is added using `html.P()` tag, which holds the description of the application. In this example, the style parameter provided below to makes the title center aligned, with color code #503D36, and font-size as 40
- Chart is added using `dcc.Graph()` tag to add the `fig` we generated above/

To do this, the following was added:

```{python}
#| eval: false
# Create a dash application
app = dash.Dash(__name__)

# Get the layout of the application and adjust it.
# Create an outer division using html.Div and add title to the dashboard using html.H1 component
# Add description about the graph using HTML P (paragraph) component
# Finally, add graph component.
app.layout = html.Div(children=[html.H1('Airline Dashboard',style={'textAlign': 'center', 'color': '#503D36', 'font-size': 40}),
                                html.P('Proportion of distance group (250 mile distance interval group) by flights.', style={'textAlign':'center', 'color': '#F57241'}),
                                dcc.Graph(figure=fig),
                                               
                    ])

# Run the application                   
if __name__ == '__main__':
    app.run_server()
```

A step-by-step guide with pictures is also found here: `../tutorials/4.5_Dash_Basics.md.html`

The dash script can be run with `/opt/anaconda3/bin/python3.7 dash_basics.py` and is found at `tutorials/dash_basics.py`

Other useful links:

- [Complete dash user guide](https://dash.plotly.com)
- [Dash core components](https://dash.plotly.com/dash-core-components)
- [Dash HTML components](https://dash.plotly.com/dash-html-components)
- [Dash community forum](https://community.plotly.com/c/dash/16)
- [Related blogs](https://medium.com/plotly/tagged/dash)


## Add interactivity: user input and callbacks

A callback function is a python function that is automatically called by Dash whenever an input component's property changes. Callback function is decorated with `@app.callback` decorator. 

Whenever there is a change in the input component value, callback function wrapped by the decorator is called followed by the update to the output component children in the application layout. 

- [Python decorators reference 1](https://realpython.com/primer-on-python-decorators/)
- [Python decorators reference 2](https://peps.python.org/pep-0318/#current-syntax)
- [Callbacks with example](https://dash.plotly.com/basic-callbacks)
- [Dash app gallery](https://dash.gallery/Portal/)
- [Dash community components](https://community.plotly.com/t/community-components-index/60098)

The tutorial for this section can be found in `../tutorials/4.7_Dash_Interactivity.md.html`

The goal of this exercise is to extract average monthly arrival delay time and see how it changes over the year. Year range is from 2010 to 2020. Our dashboard application will consist of three components:

- Title of the application
- Component to enter input year
- Chart conveying the average monthly arrival delay

To do this, we create a new python script with `touch ../tutorials/dash_interactivity.py` and open it with `code ../tutorials/dash_interactivity.py`


### Read in the data

Added this:

```{python}
#| eval: false
# Import required libraries
import pandas as pd
import plotly.graph_objects as go
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output

# Read the airline data into pandas dataframe
airline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', 
                            encoding = "ISO-8859-1",
                            dtype={'Div1Airport': str, 'Div1TailNum': str, 
                                   'Div2Airport': str, 'Div2TailNum': str})
```

###  Create dash application and get the layout skeleton

Mapping to the respective Dash HTML tags:

- Title added using `html.H1()` tag, see more [here](https://dash.plotly.com/dash-html-components/h1?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01)
- Layout division added using `html.Div()` and input component added using `dcc.Input()` tag inside the - layout division.
- Layout division added using `html.Div()` and chart added using `dcc.Graph()` tag inside the layout division.

Below, we: 

- Title as Airline Performance Dashboard
- Use style parameter and make the title center aligned, with color code #503D36, and font-size as 40. Check More about HTML section [here.]((https://dash.plotly.com/layout?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01))

- Update [dcc.Input](https://dash.plotly.com/dash-core-components/input?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01) component id as input-year, default value as 2010, and type as number. Use style parameter and assign height of the input box to be 50px and font-size to be 35.
- Use style parameter and assign font-size as 40 for the whole division.

- Add dcc.Graph() component to the second division.
- Update dcc.Graph component id as line-plot.


```{python}
#| eval: false
# Create a dash application
app = dash.Dash(__name__)

# Get the layout of the application and adjust it.
# Create an outer division using html.Div and add title to the dashboard using html.H1 component
# Add a html.Div and core input text component
# Finally, add graph component.
app.layout = html.Div(children=[ html.H1('Airline Performance Dashboard',style={'textAlign': 'center', 
                                'color': '#503D36','font-size': 40}),
                                html.Div(["Input Year: ", dcc.Input(id='input-year', value='2010', 
                                type='number', style={'height':'50px', 'font-size': 35}),], 
                                style={'font-size': 40}),
                                html.Br(),
                                html.Br(),
                                html.Div(dcc.Graph(id='line-plot')),
                                ])
```

### Add the application callback function

The core idea of this application is to get year as user input and update the dashboard in real-time. We will be using callback function for the same.

Steps:

- Define the callback decorator
- Define the callback function that uses the input provided to perform the computation
- Create graph and return it as an output
- Run the application

**Callback decorator**

- Refer examples provided [here](https://dash.plotly.com/basic-callbacks?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01)
- Update output component id parameter with the id provided in the dcc.Graph() component and component property as figure.
- Update input component id parameter with the id provided in the dcc.Input() component and component property as value.

**Callback function**

- Update data parameter of the go.Figure() with the scatter plot. 
- Refer [here.](https://plotly.com/python/line-and-scatter/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01#scatter-and-line-plot-with-goscatter) 
- Sample syntax below:
`go.Scatter(x='----', y='----', mode='-----', marker='----)`
- Update x as line_data['Month'], y as line_data['ArrDelay'], mode as lines, and marker as dict(color='green').

- Update fig.update_layout with title, xaxis_title, and yaxis_title parameters.
- Title as Month vs Average Flight Delay Time
- xaxis_title as Month
- yaxis_title as ArrDelay

- Refer the update layout function [here.](https://plotly.com/python/line-and-scatter/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01#style-scatter-plots)


```{python}
#| eval: false
# add callback decorator
@app.callback(Output(component_id='line-plot', component_property='figure'),
               Input(component_id='input-year', component_property='value'))

# Add computation to callback function and return graph
def get_graph(entered_year):
    # Select data based on the entered year
    df =  airline_data[airline_data['Year']==int(entered_year)]
    
    # Group the data by Month and compute average over arrival delay time.
    line_data = df.groupby('Month')['ArrDelay'].mean().reset_index()
    
    # 
    fig = go.Figure(data=go.Scatter(x=line_data['Month'], y=line_data['ArrDelay'], mode='lines', marker=dict(color='green')))
    fig.update_layout(title='Month vs Average Flight Delay Time', xaxis_title='Month', yaxis_title='ArrDelay')
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server()
```

Run with ``/opt/anaconda3/bin/python3.7 dash_interactivity.py``



## Flight Delay Time Statistics Dashboard

Inside this dashbord, we want to have the following components:

- Monthly average carrier delay by reporting airline for the given year.
- Monthly average weather delay by reporting airline for the given year.
- Monthly average national air system delay by reporting airline for the given year.
- Monthly average security delay by reporting airline for the given year.
- Monthly average late aircraft delay by reporting airline for the given year.
- NOTE: Year range should be between 2010 and 2020

The output should show the following:

- Title of the application
- Component to enter input year
- 5 Charts conveying the different types of flight delay. Chart section is divided into three segments.
    - Carrier and Weather delay in the first segment
    - National air system and Security delay in the second segment
    - Late aircraft delay in the third segment

Let's start out script with `code flight_details.py`.

### Read the data

```{python}
#| eval: false
# Import required libraries
import pandas as pd
import plotly.graph_objects as go
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
airline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', 
                            encoding = "ISO-8859-1",
                            dtype={'Div1Airport': str, 'Div1TailNum': str, 
                                   'Div2Airport': str, 'Div2TailNum': str})
```


### Create dash application and get the layout skeleton

Mapping to the respective Dash HTML tags:

- Title added using html.H1() tag
- Layout division added using html.Div() and input component added using dcc.Input() tag inside the layout division.
- 5 charts split into three segments. Each segment has a layout division added using html.Div() and chart added using dcc.Graph() tag inside the layout division.

The raw code looks like this

```{python}
#| eval: false
# Create a dash application
app = dash.Dash(__name__)

# Build dash app layout
app.layout = html.Div(children=[ html.H1(),
                                html.Div(["Input Year: ", dcc.Input()],
                                style={'font-size': 30}),
                                html.Br(),
                                html.Br(), 
                                html.Div([
                                        html.Div(),
                                        html.Div()
                                ], style={'display': 'flex'}),
    
                                html.Div([
                                        html.Div(),
                                        html.Div()
                                ], style={'display': 'flex'}),
                                
                                html.Div(, style={'width':'65%'})
                                ])
```

First, we add the following:

- Title as Flight Delay Time Statistics, align text as center, color as #503D36, and font size as 30.
- Update dcc.Input component id as input-year, default value as 2010, and type as number. Use style parameter and assign height of the input box to be 35px and font-size to be 30.

**Segment 1** is the first html.Div(). We have two inner division where first two graphs will be placed. The skeleton looks like this:

```{python}
#| eval: false
html.Div([
          html.Div(),
          html.Div()
         ], style={'display': 'flex'}),
```

First inner division:
    - Add dcc.Graph() component.
    - Update dcc.Graph component id as carrier-plot.

Second inner division
    - Add dcc.Graph() component.
    - Update dcc.Graph component id as weather-plot.

**Segment 2** is the second html.Div(). We have two inner division where the next two graphs will be placed.

First inner division
    - Add dcc.Graph() component.
    - Update dcc.Graph component id as nas-plot.

Second inner division
    - Add dcc.Graph() component.
    - Update dcc.Graph component id as security-plot.


**Segment 3** is the last html.Div(): ``html.Div(, style={'width':'65%'})``

    - Add dcc.Graph() component to the first inner division.
    - Update dcc.Graph component id as late-plot.


```{python}
#| eval: false
# Build dash app layout
app.layout = html.Div(children=[ html.H1('Flight delay time statistics', style={'textAlign':'center', 'color':'#503D36', 'font-size':40}),
                                html.Div(["Input Year: ", dcc.Input(id='input-year', value='2010', type='number', style={'height':'50px', 'font-size':35})],
                                style={'font-size': 30}),
                                html.Br(),
                                html.Br(), 
                                html.Div([
                                        html.Div(dcc.Graph(id='carrier-plot')),
                                        html.Div(dcc.Graph(id='weather-plot'))
                                ], style={'display': 'flex'}),
    
                                html.Div([
                                        html.Div(dcc.Graph(id='nas-plot')),
                                        html.Div(dcc.Graph(id='security-plot'))
                                ], style={'display': 'flex'}),
                                
                                html.Div(dcc.Graph(id='late-plot'), style={'width':'65%'})
                                ])
```


### Review and add supporting function

Below is the function that gets input year and data, perform computation for creating charts and plots.

```{python}
#| eval: false

""" Compute_info function description

This function takes in airline data and selected year as an input and performs computation for creating charts and plots.

Arguments:
    airline_data: Input airline data.
    entered_year: Input year for which computation needs to be performed.
    
Returns:
    Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.

"""
def compute_info(airline_data, entered_year):
    # Select data
    df =  airline_data[airline_data['Year']==int(entered_year)]
    # Compute delay averages
    avg_car = df.groupby(['Month','Reporting_Airline'])['CarrierDelay'].mean().reset_index()
    avg_weather = df.groupby(['Month','Reporting_Airline'])['WeatherDelay'].mean().reset_index()
    avg_NAS = df.groupby(['Month','Reporting_Airline'])['NASDelay'].mean().reset_index()
    avg_sec = df.groupby(['Month','Reporting_Airline'])['SecurityDelay'].mean().reset_index()
    avg_late = df.groupby(['Month','Reporting_Airline'])['LateAircraftDelay'].mean().reset_index()
    return avg_car, avg_weather, avg_NAS, avg_sec, avg_late

```


### Add the application callback function

Scaffold:

```{python}
#| eval: false
# Callback decorator
@app.callback( [
               Output(component_id='carrier-plot', component_property='figure'),
               ---
               --- 
               ---
               ---
               ],
               Input(....))
# Computation to callback function and return graph
def get_graph(entered_year):
    
    # Compute required information for creating graph from the data
    avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_info(airline_data, entered_year)
            
    # Line plot for carrier delay
    carrier_fig = px.line(avg_car, x='Month', y='CarrierDelay', color='Reporting_Airline', title='Average carrier delay time (minutes) by airline')
    # Line plot for weather delay
    weather_fig = ------
    # Line plot for nas delay
    nas_fig = ------
    # Line plot for security delay
    sec_fig = ------
    # Line plot for late aircraft delay
    late_fig = ------
            
    return[carrier_fig, weather_fig, nas_fig, sec_fig, late_fig]

# Run the app
if __name__ == '__main__':
    app.run_server()

```

**Callback decorator**

- Refer examples provided [here](https://dash.plotly.com/basic-callbacks?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01)
- We have 5 output components added in a list. Update output component id parameter with the ids provided in the dcc.Graph() component and set the component property as figure. One sample has been added to the skeleton.
- Update input component id parameter with the id provided in the dcc.Input() component and component property as value.

**Callback function**

Next is to update the get_graph function. We have already added a function compute_info that will perform computation on the data using the input.

Mapping the returned value from the function compute_info to graph:

- avg_car - input for carrier delay
-avg_weather - input for weather delay
-avg_NAS - input for NAS delay
-avg_sec - input for security delay
-avg_late - input for late aircraft delay
-Code has been provided for plotting carrier delay. Follow the same process and use the above mapping to get plots for other 4 delays.

```{python}
#| eval: false
# Import required libraries
import pandas as pd
import plotly.graph_objects as go
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
airline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', 
                            encoding = "ISO-8859-1",
                            dtype={'Div1Airport': str, 'Div1TailNum': str, 
                                   'Div2Airport': str, 'Div2TailNum': str})


# Create a dash application
app = dash.Dash(__name__)

# Build dash app layout
app.layout = html.Div(children=[ html.H1('Flight delay time statistics', style={'textAlign':'center', 'color':'#503D36', 'font-size':40}),
                                html.Div(["Input Year: ", dcc.Input(id='input-year', value='2010', type='number', style={'height':'50px', 'font-size':35})],
                                style={'font-size': 30}),
                                html.Br(),
                                html.Br(), 
                                html.Div([
                                        html.Div(dcc.Graph(id='carrier-plot')),
                                        html.Div(dcc.Graph(id='weather-plot'))
                                ], style={'display': 'flex'}),
    
                                html.Div([
                                        html.Div(dcc.Graph(id='nas-plot')),
                                        html.Div(dcc.Graph(id='security-plot'))
                                ], style={'display': 'flex'}),
                                
                                html.Div(dcc.Graph(id='late-plot'), style={'width':'65%'})
                                ])


""" Compute_info function description

This function takes in airline data and selected year as an input and performs computation for creating charts and plots.

Arguments:
    airline_data: Input airline data.
    entered_year: Input year for which computation needs to be performed.
    
Returns:
    Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.

"""
def compute_info(airline_data, entered_year):
    # Select data
    df =  airline_data[airline_data['Year']==int(entered_year)]
    # Compute delay averages
    avg_car = df.groupby(['Month','Reporting_Airline'])['CarrierDelay'].mean().reset_index()
    avg_weather = df.groupby(['Month','Reporting_Airline'])['WeatherDelay'].mean().reset_index()
    avg_NAS = df.groupby(['Month','Reporting_Airline'])['NASDelay'].mean().reset_index()
    avg_sec = df.groupby(['Month','Reporting_Airline'])['SecurityDelay'].mean().reset_index()
    avg_late = df.groupby(['Month','Reporting_Airline'])['LateAircraftDelay'].mean().reset_index()
    return avg_car, avg_weather, avg_NAS, avg_sec, avg_late

# Callback decorator
@app.callback( [
               Output(component_id='carrier-plot', component_property='figure'),
               Output(component_id='weather-plot', component_property='figure'),
               Output(component_id='nas-plot', component_property='figure'), 
               Output(component_id='security-plot', component_property='figure'),
               Output(component_id='late-plot', component_property='figure'),
               ],
               Input(component_id='input-year', component_property='value'))

# Computation to callback function and return graph
def get_graph(entered_year):
    
    # Compute required information for creating graph from the data
    avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_info(airline_data, entered_year)
            
    # Line plot for carrier delay
    carrier_fig = px.line(avg_car, x='Month', y='CarrierDelay', color='Reporting_Airline', title='Average carrier delay time (minutes) by airline')
    # Line plot for weather delay
    weather_fig = px.line(avg_weather, x='Month', y='WeatherDelay', color='Reporting_Airline', title='Average weather delay time (minutes) by airline')
    # Line plot for nas delay
    nas_fig = px.line(avg_NAS, x='Month', y='NASDelay', color='Reporting_Airline', title='Average NAS delay time (minutes) by airline')
    # Line plot for security delay
    sec_fig = px.line(avg_sec, x='Month', y='SecurityDelay', color='Reporting_Airline', title='Average security delay time (minutes) by airline')
    # Line plot for late aircraft delay
    late_fig = px.line(avg_late, x='Month', y='LateAircraftDelay', color='Reporting_Airline', title='Average late aircraft delay time (minutes) by airline')
            
    return[carrier_fig, weather_fig, nas_fig, sec_fig, late_fig]

# Run the app
if __name__ == '__main__':
    app.run_server()
```

Run with `/opt/anaconda3/bin/python3.7 flight_details.py `


