# Basic visualization tools

## Notebook setup

```{python}
#load libs
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

#set graphics style
mpl.style.use('ggplot') 
```

```{python}
#load data
df_can = pd.read_excel("../data/Canada.xlsx", sheet_name='Canada by Citizenship',skiprows=range(20), skipfooter=2)

#check data
print(df_can.head())
print(df_can.shape)
```

###  Clean dataset 

```{python}
#| warning: false

#drop irrelevant columns
df_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)

#give some columns better names
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)

# check whether all column have labels of type string.
print(all(isinstance(column, str) for column in df_can.columns))

#change all columns to string type
df_can.columns = list(map(str, df_can.columns))

# let's check the column labels types now
print(all(isinstance(column, str) for column in df_can.columns))

# Set the country name as index 
df_can.set_index('Country', inplace=True)

#add a total column
df_can['Total'] = df_can.sum(axis=1)

#create a list for the years of interest
years = list(map(str, range(1980, 2014)))

#check df
print(df_can.head())
print('data dimensions:', df_can.shape)
```


## Area plots

- also known as an area chart or graph is a type of plot 
- depicts cumulated totals using numbers or percentages over time
- based on a line plot

In the last module, we created a line plot that visualized the top 5 countries that contribued the most immigrants to Canada from 1980 to 2013. With a little modification to the code, we can visualize this plot as a cumulative plot, also knows as a Stacked Line Plot or Area plot.

Let's first get the data for the top5 countries

```{python}
#sort df
df_can.sort_values(['Total'], ascending = False, axis = 0 , inplace =  True)

#get the top5 countries
df_top5 = df_can.head(5)

#transpose data
df_top5 = df_top5[years].transpose()

#check data
df_top5.head()
```
Area plots are stacked by default. And to produce a stacked area plot, each column must be either all positive or all negative values (any NaN, i.e. not a number, values will default to 0). To produce an unstacked plot, set parameter stacked to value False.


```{python}
#| warning: false

#change the index values to type integer
#df_top5.index = df_top5.index.map(int)

#create area plot
df_top5.plot(kind = 'area', stacked = False, figsize = (8,4))

#add labels
plt.title('Immigration trend in top5 countries')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')

plt.show()
plt.close()
```
The unstacked plot has a default transparency (alpha value) at 0.5. We can modify this value by passing in the alpha parameter.


```{python}
#| warning: false
#create area plot
df_top5.plot(kind = 'area', alpha = 0.25, stacked = False, figsize = (8,4))

#add labels
plt.title('Immigration trend in top5 countries')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')

plt.show()
plt.close()
```

### Types of plotting

### Two types of plotting

#### Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt'

You can use `plt` i.e. `matplotlib.pyplot` and add more elements by calling different methods procedural; for example, `plt.title(...)` to add title or `plt.xlabel(...)` to add label to the x-axis.

#### Option 2: Artist layer (Object oriented method) - using an `Axes` instance from Matplotlib (preferred) 

You can use an `Axes` instance of your current plot and store it in a variable (eg. `ax`). You can add more elements by calling methods with a little change in syntax (by adding "`set_`" to the previous methods). For example, use `ax.set_title()` instead of `plt.title()` to add title,  or `ax.set_xlabel()` instead of `plt.xlabel()` to add label to the x-axis.

This option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later).

In this course, we will stick to the **scripting layer**, except for some advanced visualizations where we will need to use the **artist layer** to manipulate advanced aspects of the plots.

Let's try an example for using the artist layer:


```{python}
ax = df_top5.plot(kind = 'area', alpha = 0.35, figsize = (10,5))

ax.set_title('Immigration Trend of Top 5 Countries')
ax.set_ylabel('Number of Immigrants')
ax.set_xlabel('Years')

plt.show()
plt.close()
```

Let's Use the scripting layer to create a stacked area plot of the 5 countries that contributed the least to immigration to Canada from 1980 to 2013. Use a transparency value of 0.45.

```{python}
#prep data
df_can_tail5 = df_can.tail(5)
df_can_tail5 = df_can_tail5[years].transpose()

#plot
df_can_tail5.plot(kind='area',
             stacked=False,
             figsize=(10, 5))  # pass a tuple (x, y) size

plt.title('Immigration Trend of lowest 5 Countries')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')

plt.show()
plt.close()
```




## Histograms

- A way of representing the frequency distribution of a numeric dataset
- To do this numeric data is partitioned into into bins, each datapoint in the dataset is assigned to a bin, and then the number of datapoints that have been assigned to each bin are counted
-  The vertical axis is actually the frequency or the number of datapoints in each bin.


**Question**: What is the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013?

Before we proceed with creating the histogram plot, let's first examine the data split into intervals. To do this, we will us Numpy's histrogram method to get the bin ranges and frequency counts as follows:

```{python}
count, bin_edges = np.histogram(df_can['2013'])

#print the frequency count and the bin ranges (by default 10 bins are used)
print(count)
print(bin_edges)
```

By default, the histrogram method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013. We can see that in 2013:

- 178 countries contributed between 0 to 3412.9 immigrants
- 11 countries contributed between 3412.9 to 6825.8 immigrants
- 1 country contributed between 6285.8 to 10238.7 immigrants, and so on..

We can easily graph this distribution by passing kind=hist to plot().


```{python}
#plot
df_can['2013'].plot(kind = 'hist', figsize = (8,5))

#add titles
plt.title("Histogram of Immigration from 195 countries in 2013")
plt.ylabel("Number of Countries")
plt.xlabel("Number of Immigrants")

plt.show()
plt.close()
```
In the above plot, the x-axis represents the population range of immigrants in intervals of 3412.9. The y-axis represents the number of countries that contributed to the aforementioned population.

Notice that the x-axis labels do not match with the bin size. This can be fixed by passing in a xticks keyword that contains the list of the bin sizes, as follows:


```{python}
#define the intervals
count, bin_edges = np.histogram(df_can['2013'])


#plot
df_can['2013'].plot(kind = 'hist', figsize = (8,5), xticks = bin_edges)

#add titles
plt.title("Histogram of Immigration from 195 countries in 2013")
plt.ylabel("Number of Countries")
plt.xlabel("Number of Immigrants")

plt.show()
plt.close()
```
We can also plot multiple histograms on the same plot

**Question**: What is the immigration distribution for Denmark, Norway, and Sweden for years 1980 - 2013?

```{python}
df_can.loc[['Denmark', 'Norway', 'Sweden'], years].plot.hist()
plt.show()
plt.close()
```
That does not look right!

Don't worry, you'll often come across situations like this when creating plots. The solution often lies in how the underlying dataset is structured.

Instead of plotting the population frequency distribution of the population for the 3 countries, pandas instead plotted the population frequency distribution for the years.

This can be easily fixed by first transposing the dataset, and then plotting as shown below.

```{python}
#transform data
df_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()

#plot
df_t.plot(kind='hist', figsize=(10, 6))

plt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants')

plt.show()
plt.close()
```
Let's make a few modifications to improve the impact and aesthetics of the previous plot:

*   increase the bin size to 15 by passing in `bins` parameter;
*   set transparency to 60% by passing in `alpha` parameter;
*   label the x-axis by passing in `x-label` parameter;
*   change the colors of the plots by passing in `color` parameter.

```{python}
#get the tick values
count, bin_edges = np.histogram(df_t, 15)

#plot an unstacked histogram
df_t.plot(kind='hist', figsize=(10, 6), bins = 15, alpha = 0.6, xticks = bin_edges,
color = ['coral', 'darkslateblue', 'mediumseagreen'])

plt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants')

plt.show()
plt.close()
```

For a full listing of colors available in Matplotlib, run the following code in your python shell:

```{python}
#import matplotlib
#for name, hex in matplotlib.colors.cnames.items():
#    print(name, hex)
```

If we do not want the plots to overlap each other, we can stack them using the stacked parameter. Let's also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot. We can pass a tuple (min,max) using the xlim paramater, as show below.

```{python}
#get the tick values
count, bin_edges = np.histogram(df_t, 15)

#  first bin value is 31.0, last is 308, adding buffer of 10 for aesthetic purposes
xmin = bin_edges[0] -10
xmax = bin_edges[-1] + 10 

#plot a stacked histogram
# stacked Histogram
df_t.plot(kind='hist',
          figsize=(10, 6), 
          bins=15,
          xticks=bin_edges,
          color=['coral', 'darkslateblue', 'mediumseagreen'],
          stacked=True,
          xlim=(xmin, xmax)
         )

plt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants')

plt.show()
plt.close()
```

**Question**: Use the scripting layer to display the immigration distribution for Greece, Albania, and Bulgaria for years 1980 - 2013? Use an overlapping plot with 15 bins and a transparency value of 0.35.


```{python}
#prep data
df_2 = df_can.loc[['Greece', 'Albania', 'Bulgaria'], years].transpose()

#set bins
count, bin_edges = np.histogram(df_2, 15)

#plot
df_2.plot(kind = 'hist', figsize = (8,6), alpha = 0.35, xticks = bin_edges, bins = 15)
plt.title('Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants')

plt.show()
plt.close()
```


## Bar charts

- Used to compare the values of a variable at a given point in time 

To create a bar plot, we can pass one of two arguments via kind parameter in plot():

- `kind=bar` creates a vertical bar plot
- `kind=barh` creates a horizontal bar plot

### Vertical bar plot

In vertical bar graphs, the x-axis is used for labelling, and the length of bars on the y-axis corresponds to the magnitude of the variable being measured. Vertical bar graphs are particularly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar.

**Let's start off by analyzing the effect of Iceland's Financial Crisis:**

The 2008 - 2011 Icelandic Financial Crisis was a major economic and political event in Iceland. Relative to the size of its economy, Iceland's systemic banking collapse was the largest experienced by any country in economic history. The crisis led to a severe economic depression in 2008 - 2011 and significant political unrest.

**Question:** Let's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013.

```{python}
#prep data
df_iceland = df_can.loc['Iceland', years]
df_iceland.head(3)
```

```{python}
#plot the data
df_iceland.plot(kind = 'bar', figsize = (8,6))

plt.xlabel('Year') # add to x-label to the plot
plt.ylabel('Number of immigrants') # add y-label to the plot
plt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot

plt.show()
plt.close()
```

The bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008.

Let's annotate this on the plot using the `annotate` method of the **scripting layer** or the **pyplot interface**. We will pass in the following parameters:

*   `s`: str, the text of annotation.
*   `xy`: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).
*   `xytext`: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).
*   `xycoords`: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).
*   `arrowprops`: Takes a dictionary of properties to draw the arrow:
    *   `arrowstyle`: Specifies the arrow style, `'->'` is standard arrow.
    *   `connectionstyle`: Specifies the connection type. `arc3` is a straight line.
    *   `color`: Specifies color of arrow.
    *   `lw`: Specifies the line width.

I encourage you to read the Matplotlib documentation for more details on annotations:
<http://matplotlib.orsg/api/pyplot_api.html#matplotlib.pyplot.annotate>.



```{python}
#plot the data and rotate xticks
df_iceland.plot(kind = 'bar', figsize = (8,6), rot = 90)

plt.xlabel('Year') # add to x-label to the plot
plt.ylabel('Number of immigrants') # add y-label to the plot
plt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot

#annotate arrow, h
plt.annotate('', # s: str. Will leave it blank for no text
            xy=(32,70), # place head of the arrow at point (year 2012 , pop 70)
            xytext=(28,20), # place base of the arrow at point (year 2008 , pop 20)
            xycoords='data', # will use the coordinate system of the object being annotated
            arrowprops = dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)
            )

plt.show()
plt.close()
```

Let's also annotate a text to go over the arrow.  We will pass in the following additional parameters:

*   `rotation`: rotation angle of text in degrees (counter clockwise)
*   `va`: vertical alignment of text \[‘center’ | ‘top’ | ‘bottom’ | ‘baseline’]
*   `ha`: horizontal alignment of text \[‘center’ | ‘right’ | ‘left’]


```{python}
#plot the data and rotate xticks
df_iceland.plot(kind = 'bar', figsize = (8,6), rot = 90)

plt.xlabel('Year') # add to x-label to the plot
plt.ylabel('Number of immigrants') # add y-label to the plot
plt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot

#annotate arrow
plt.annotate('', # s: str. Will leave it blank for no text
            xy=(32,70), # place head of the arrow at point (year 2012 , pop 70)
            xytext=(28,20), # place base of the arrow at point (year 2008 , pop 20)
            xycoords='data', # will use the coordinate system of the object being annotated
            arrowprops = dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)
            )

#annotate arrow
plt.annotate('2008-2011 Financal crisis',  # text to display
            xy=(28,30),  # start the text at at point (year 2008 , pop 30)
            rotation=73.5, # based on trial and error to match the arrow
            va='bottom', # want the text to be vertically 'bottom' aligned
            ha='left' # want the text to be horizontally 'left' aligned
            )

plt.show()
plt.close()
```

### Horizontal barplots

Sometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to  label categorical variables.

**Question:** Using the scripting later and the `df_can` dataset, create a *horizontal* bar plot showing the *total* number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count.

Step 1: Get the data pertaining to the top 15 countries.

```{python}
df_top15 = df_can['Total'].head(15)
```
Step 2: Plot data:

1.  Use `kind='barh'` to generate a bar chart with horizontal bars.
2.  Make sure to choose a good size for the plot and to label your axes and to give the plot a title.
3.  Loop through the countries and annotate the immigrant population using the anotate function of the scripting interface.

```{python}
df_top15.plot(kind='barh', figsize=(10,6))

#plt.xlabel('Year')
#plt.ylabel('Number of Immigrants')
plt.title('Total number of Immigrants to Canada from 1980 to 2013\n in the Top15 countries')

#annotate value labels for each country and add to plot
for index, value in enumerate(df_top15):
    label = format(value, ',')
    plt.annotate(label, xy = (value,  index - 0.1), color = 'black', size =8)

plt.show()
plt.close()
```


## Pie charts

A `pie chart` is a circular graphic that displays numeric proportions by dividing a circle (or pie) into proportional slices. You are most likely already familiar with pie charts as it is widely used in business and media. We can create pie charts in Matplotlib by passing in the `kind=pie` keyword.

Let's use a pie chart to explore the proportion (percentage) of new immigrants grouped by continents for the entire time period from 1980 to 2013.

Step 1: Gather data.

We will use *pandas* `groupby` method to summarize the immigration data by `Continent`. The general process of `groupby` involves the following steps:

1.  **Split:** Splitting the data into groups based on some criteria.
2.  **Apply:** Applying a function to each group independently:
    .sum()
    .count()
    .mean()
    .std()
    .aggregate()
    .apply()
    .etc..
3.  **Combine:** Combining the results into a data structure.

<img src="../images/Mod3Fig4SplitApplyCombine.png" width=400 align="center">

```{python}
#group countries by continents and apply the sum function
df_continents = df_can.groupby('Continent', axis = 0).sum()
df_continents.head()
```
Step 2: Plot the data. We will pass in `kind = 'pie'` keyword, along with the following additional parameters:

*   `autopct` -  is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be `fmt%pct`.
*   `startangle` - rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.
*   `shadow` - Draws a shadow beneath the pie (to give a 3D feel).

```{python}
# autopct create %, start angle represent starting point
df_continents['Total'].plot(kind = 'pie',
                            figsize = (5,6),
                            autopct='%1.1f%%', #add in percentages
                            startangle=90,
                            shadow=True
                            )

plt.title('Immigration to Canada by Continent [1980 - 2013]')
plt.axis('equal') # Sets the pie chart to look like a circle.

plt.show()
plt.close()
```
The above visual is not very clear, the numbers and text overlap in some instances. Let's make a few modifications to improve the visuals:

*   Remove the text labels on the pie chart by passing in `legend` and add it as a seperate legend using `plt.legend()`.
*   Push out the percentages to sit just outside the pie chart by passing in `pctdistance` parameter.
*   Pass in a custom set of colors for continents by passing in `colors` parameter.
*   **Explode** the pie chart to emphasize the lowest three continents (Africa, North America, and Latin America and Caribbean) by passing in `explode` parameter.


```{python}
colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.

#plot
df_continents['Total'].plot(kind = 'pie',
                            figsize = (5,6),
                            autopct='%1.1f%%', #add in percentages
                            startangle=90,
                            shadow=True,
                            labels=None,
                            pctdistance=1.12,
                            colors=colors_list,
                            explode=explode_list
                            )

# scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) 
plt.axis('equal') # Sets the pie chart to look like a circle.

# add legend
plt.legend(labels=df_continents.index, loc='upper left') 

plt.show()
plt.close()
```

Question: Using a pie chart, explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.

```{python}
explode_list = [0.0, 0, 0, 0.1, 0.1, 0.2]

#plot
df_continents['2013'].plot(kind='pie',
                            figsize = (6,5),
                            autopct='%1.1f%%',
                            startangle=90,
                            shadow=True,
                            labels=None,
                            pctdistance=1.12, 
                            explode=explode_list)

plt.title("Immigration to canada in 2013", y =1.12)

#add legend
plt.legend(labels = df_continents.index, loc='upper left')

plt.show()
plt.close()
```


## Boxplots

So, what is a boxplot? A boxplot is a way of statistically representing the distribution of given data through 5 main dimensions.

- minimum, which is the smallest number in the sorted data. Its value can be obtained by subtracting 1.5 times the IQR where IQR is interquartile range from the first quartile.
- first quartile which is 25% of the way through the sorted data. In other words, 1/4 of the data points are less than this value
- median, which is the median of the sorted data
-  third quartile, which is 75% of the way through the sorted data. In other words, 3/4 of the data points are less than this value
- maximum, which is the highest number in the sorted data where maximum equals third quartile summed with 1.5 multiplied by IQR
- Boxplots also display outliers as individual dots that occur outside the upper and lower extremes

<img src="../images/boxplot_complete.png" width=440, align="center">

To make a `boxplot`, we can use `kind=box` in `plot` method invoked on a *pandas* series or dataframe.

Let's plot the box plot for the Japanese immigrants between 1980 - 2013.

Step 1: Get the subset of the dataset. Even though we are extracting the data for just one country, we will obtain it as a dataframe. This will help us with calling the `dataframe.describe()` method to view the percentiles.

```{python}
#subset data
df_japan = df_can.loc[['Japan'], years].transpose()

#ensure we have numericdata
df_japan.Japan =df_japan.Japan.astype(int)

df_japan.head(3)
```

Step 2: Plot by passing in kind='box'.

```{python}
df_japan.plot(kind='box', figsize=(6, 6))

plt.title('Box plot of Japanese Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')

plt.show()
plt.close()
```
We can immediately make a few key observations from the plot above:

1.  The minimum number of immigrants is around 200 (min), maximum number is around 1300 (max), and  median number of immigrants is around 900 (median).
2.  25% of the years for period 1980 - 2013 had an annual immigrant count of \~500 or fewer (First quartile).
3.  75% of the years for period 1980 - 2013 had an annual immigrant count of \~1100 or fewer (Third quartile).

We can view the actual numbers by calling the `describe()` method on the dataframe.


```{python}
df_japan.describe()
```
One of the key benefits of box plots is comparing the distribution of multiple datasets. In one of the previous labs, we observed that China and India had very similar immigration trends. Let's analyze these two countries further using box plots.

**Question:** Compare the distribution of the number of new immigrants from India and China for the period 1980 - 2013.

Step 1: Get the dataset for China and India and call the dataframe df_CI.

```{python}
df_CI = df_can.loc[['China', 'India'], years].transpose()
df_CI.head()
```

Let's view the percentiles associated with both countries using the describe() method.

```{python}
df_CI.describe()
```
Step 2: Plot data.

```{python}
df_CI.plot(kind='box', figsize = (6,6))

plt.title('Box plot of Chinese and Indian Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')

plt.show()
plt.close()
```

We can observe that, while both countries have around the same median immigrant population (~20,000), China's immigrant population range is more spread out than India's. The maximum population from India for any year (36,210) is around 15% lower than the maximum population from China (42,584).

If you prefer to create horizontal box plots, you can pass the vert parameter in the plot function and assign it to False. You can also specify a different color in case you are not a big fan of the default red color.

```{python}
df_CI.plot(kind='box', figsize = (6,6), color = 'blue', vert = False)

plt.title('Box plot of Chinese and Indian Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')

plt.show()
plt.close()
```
**Subplots**

Often times we might want to plot multiple plots within the same figure. For example, we might want to perform a side by side comparison of the box plot with the line plot of China and India's immigration.

To visualize multiple plots together, we can create a **`figure`** (overall canvas) and divide it into **`subplots`**, each containing a plot. With **subplots**, we usually work with the **artist layer** instead of the **scripting layer**.

Typical syntax is : <br>

```
    fig = plt.figure() # create figure
    ax = fig.add_subplot(nrows, ncols, plot_number) # create subplots
```

Where

*   `nrows` and `ncols` are used to notionally split the figure into (`nrows` \* `ncols`) sub-axes,
*   `plot_number` is used to identify the particular subplot that this function is to create within the notional grid. `plot_number` starts at 1, increments across rows first and has a maximum of `nrows` \* `ncols` as shown below.

<img src="../images/Mod3Fig5Subplots_V2.png" width=400 align="center">

We can then specify which subplot to place each plot by passing in the ax paramemter in plot() method as follows:

```{python}
fig = plt.figure() # create figure

ax0 = fig.add_subplot(2, 1, 1) # add subplot 1 (2 row, 1 columns, first plot)
ax1 = fig.add_subplot(2, 1, 2) # add subplot 2 (2 row, 1 columns, second plot). See tip below**

# Subplot 1: Box plot
df_CI.plot(kind='box', color='blue', vert=False, figsize=(10, 6), ax=ax0) # add to subplot 1
ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')
ax0.set_xlabel('Number of Immigrants')
ax0.set_ylabel('Countries')

# Subplot 2: Line plot
df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2
ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')
ax1.set_ylabel('Number of Immigrants')
ax1.set_xlabel('Years')

plt.show()
plt.close()

```

**Tip regarding subplot convention**

In the case when `nrows`, `ncols`, and `plot_number` are all less than 10, a convenience exists such that a 3-digit number can be given instead, where the hundreds represent `nrows`, the tens represent `ncols` and the units represent `plot_number`. For instance,

```
   subplot(211) == subplot(2, 1, 1) 
```

produces a subaxes in a figure which represents the top plot (i.e. the first) in a 2 rows by 1 column notional grid (no grid actually exists, but conceptually this is how the returned subplot has been positioned).

Question: Create a box plot to visualize the distribution of the top 15 countries (based on total immigration) grouped by the decades 1980s, 1990s, and 2000s.

Step 1: Get the dataset. Get the top 15 countries based on Total immigrant population. Name the dataframe df_top15.

```{python}
df_can.sort_values(['Total'], ascending = False, axis = 0 , inplace =  True)
df_top15 = df_can.head(15)
```

Step 2: Create a new dataframe which contains the aggregate for each decade. One way to do that:

1.  Create a list of all years in decades 80's, 90's, and 00's.
2.  Slice the original dataframe df_can to create a series for each decade and sum across all years for each country.
3.  Merge the three series into a new data frame. Call your dataframe **new_df**.


```{python}
# create a list of all years in decades 80's, 90's, and 00's
years_80s = list(map(str, range(1980, 1990))) 
years_90s = list(map(str, range(1990, 2000))) 
years_00s = list(map(str, range(2000, 2010))) 

# slice the original dataframe df_can to create a series for each decade
df_80s = df_top15.loc[:, years_80s].sum(axis=1) 
df_90s = df_top15.loc[:, years_90s].sum(axis=1) 
df_00s = df_top15.loc[:, years_00s].sum(axis=1)

# merge the three series into a new data frame
new_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) 

# display dataframe
new_df.head()
```

```{python}
#get basic stats
new_df.describe()
```
Step 3: Plot the box plots.

```{python}
new_df.plot(kind='box', figsize = (6,6), color = 'blue', vert = False)

plt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s')
plt.ylabel('Number of Immigrants')

plt.show()
plt.close()
```
Note how the box plot differs from the summary table created. The box plot scans the data and identifies the outliers. In order to be an outlier, the data value must be:<br>

*   larger than Q3 by at least 1.5 times the interquartile range (IQR), or,
*   smaller than Q1 by at least 1.5 times the IQR.

Let's look at decade 2000s as an example: <br>

*   Q1 (25%) = 36,101.5 <br>
*   Q3 (75%) = 105,505.5 <br>
*   IQR = Q3 - Q1 = 69,404 <br>

Using the definition of outlier, any value that is greater than Q3 by 1.5 times IQR will be flagged as outlier.

Outlier > 105,505.5 + (1.5 \* 69,404) <br>
Outlier > 209,611.5






## Scatter plots

- A scatter plot is a type of plot that displays values pertaining to typically two variables against each other. 
- Usually it is a dependent variable to be plotted against an independent variable in order to determine if any correlation between the two variables exists


Let's start by exploring the following:

Using a scatter plot, let's visualize the trend of total immigrantion to Canada (all countries combined) for the years 1980 - 2013.

Step 1: Get the dataset. Since we are expecting to use the relationship betewen years and total population, we will convert years to int type.

```{python}
# we can use the sum() method to get the total population per year
df_tot = pd.DataFrame(df_can[years].sum(axis=0))

# change the years to type int (useful for regression later on)
df_tot.index = map(int, df_tot.index)

# reset the index to put in back in as a column in the df_tot dataframe
df_tot.reset_index(inplace = True)

# rename columns
df_tot.columns = ['year', 'total']

# view the final dataframe
df_tot.head()
```


Step 2: Plot the data. In Matplotlib, we can create a scatter plot set by passing in kind='scatter' as plot argument. We will also need to pass in x and y keywords to specify the columns that go on the x- and the y-axis.

```{python}
df_tot.plot(kind='scatter', x='year', y='total', figsize=(6, 6), color='darkblue')

plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

plt.show()
plt.close()
```

Notice how the scatter plot does not connect the data  points together. We can clearly observe an upward trend in the data: as the years go by, the total number of immigrants increases. We can mathematically analyze this upward trend using a regression line (line of best fit).

So let's try to plot a linear line of best fit, and use it to  predict the number of immigrants in 2015.

Step 1: Get the equation of line of best fit. We will use **Numpy**'s `polyfit()` method by passing in the following:

*   `x`: x-coordinates of the data.
*   `y`: y-coordinates of the data.
*   `deg`: Degree of fitting polynomial. 1 = linear, 2 = quadratic, and so on.


```{python}
x = df_tot['year']
y = df_tot['total']
fit = np.polyfit(x,y, deg = 1)

fit
```

The output is an array with the polynomial coefficients, highest powers first. Since we are plotting a linear regression `y= a * x + b`, our output has 2 elements `[5.56709228e+03, -1.09261952e+07]` with the the slope in position 0 and intercept in position 1.

Step 2: Plot the regression line on the `scatter plot`.

```{python}
# print out the line of best fit
'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) 
```


```{python}
df_tot.plot(kind='scatter', x='year', y='total', figsize=(6, 6), color='darkblue')

plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

#plot line of the best fit
plt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))

plt.show()
plt.close()
```

Using the equation of line of best fit, we can estimate the number of immigrants in 2015:

```python
No. Immigrants = 5567 * Year - 10926195
No. Immigrants = 5567 * 2015 - 10926195
No. Immigrants = 291,310
```

When compared to the actual from Citizenship and Immigration Canada's (CIC) [2016 Annual Report](http://www.cic.gc.ca/english/resources/publications/annual-report-2016/index.asp?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01), we see that Canada accepted 271,845 immigrants in 2015. Our estimated value of 291,310 is within 7% of the actual number, which is pretty good considering our original data came from United Nations (and might differ slightly from CIC data).

As a side note, we can observe that immigration took a dip around 1993 - 1997. Further analysis into the topic revealed that in 1993 Canada introcuded Bill C-86 which introduced revisions to the refugee determination system, mostly restrictive. Further amendments to the Immigration Regulations cancelled the sponsorship required for "assisted relatives" and reduced the points awarded to them, making it more difficult for family members (other than nuclear family) to immigrate to Canada. These restrictive measures had a direct impact on the immigration numbers for the next several years.


Question: Create a scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013?


**Step 1**: Get the data:

1.  Create a dataframe the consists of the numbers associated with Denmark, Norway, and Sweden only. Name it **df_countries**.
2.  Sum the immigration numbers across all three countries for each year and turn the result into a dataframe. Name this new dataframe **df_total**.
3.  Reset the index in place.
4.  Rename the columns to **year** and **total**.
5.  Display the resulting dataframe.

```{python}
#subset data
df_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years]

#get total
df_total = pd.DataFrame(df_can[years].sum(axis=0))

#reset index
df_total.reset_index(inplace = True)

#rename columns
df_total.columns = ['year', 'total']

# change column year from string to int to create scatter plot
df_total['year'] = df_total['year'].astype(int)
    
df_total.head(3)
```

Step 2: Generate the scatter plot by plotting the total versus year in df_total.

```{python}
df_total.plot(kind='scatter', x='year', y='total', figsize=(6, 6), color='darkblue')

plt.title('Total Immigration from Denmark, Norway and Sweden to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

plt.show()
plt.close()
```


## Bubble Plots

A `bubble plot` is a variation of the `scatter plot` that displays three dimensions of data (x, y, z). The data points are replaced with bubbles, and the size of the bubble is determined by the third variable `z`, also known as the weight. In `maplotlib`, we can pass in an array or scalar to the parameter `s` to `plot()`, that contains the weight of each point.

**Let's start by analyzing the effect of Argentina's great depression**.

Argentina suffered a great depression from 1998 to 2002, which caused widespread unemployment, riots, the fall of the government, and a default on the country's foreign debt. In terms of income, over 50% of Argentines were poor, and seven out of ten Argentine children were poor at the depth of the crisis in 2002.

Let's analyze the effect of this crisis, and compare Argentina's immigration to that of it's neighbour Brazil. Let's do that using a `bubble plot` of immigration from Brazil and Argentina for the years 1980 - 2013. We will set the weights for the bubble as the *normalized* value of the population for each year.

Step 1: Get the data for Brazil and Argentina. Like in the previous example, we will convert the Years to type int and include it in the dataframe.

```{python}
# transposed dataframe
df_can_t = df_can[years].transpose()

# cast the Years (the index) to type int
df_can_t.index = map(int, df_can_t.index)

# let's label the index. This will automatically be the column name when we reset the index
df_can_t.index.name = 'Year'

# reset index to bring the Year in as a column
df_can_t.reset_index(inplace=True)

# view the changes
df_can_t.head()
```
**Step 2**: Create the normalized weights.

There are several methods of normalizations in statistics, each with its own use. In this case, we will use [feature scaling](https://en.wikipedia.org/wiki/Feature_scaling?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2022-01-01) to bring all values into the range. The general formula is:

<img src="../images/Mod3Fig3FeatureScaling.png" align="center">

where $X$ is the original value, $X'$ is the corresponding normalized value. The formula sets the max value in the dataset to 1, and sets the min value to 0. The rest of the data points are scaled to a value between 0-1 accordingly.

```{python}
# normalize Brazil data
norm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())

# normalize Argentina data
norm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())
```

**Step 3**: Plot the data.

*   To plot two different scatter plots in one plot, we can include the axes one plot into the other by passing it via the `ax` parameter.
*   We will also pass in the weights using the `s` parameter. Given that the normalized weights are between 0-1, they won't be visible on the plot. Therefore, we will:
    *   multiply weights by 2000 to scale it up on the graph, and,
    *   add 10 to compensate for the min value (which has a 0 weight and therefore scale with $\times 2000$).

```{python}
# Brazil
ax0 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Brazil',
                    figsize=(8, 6),
                    alpha=0.5,  # transparency
                    color='green',
                    s=norm_brazil * 2000 + 10,  # pass in weights 
                    xlim=(1975, 2015)
                    )

# Argentina
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Argentina',
                    alpha=0.5,
                    color="blue",
                    s=norm_argentina * 2000 + 10,
                    ax=ax0
                    )

ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from Brazil and Argentina from 1980 to 2013')
ax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')

plt.show()
plt.close()
```


The size of the bubble corresponds to the magnitude of immigrating population for that year, compared to the 1980 - 2013 data. The larger the bubble is, the more immigrants are in that year.

From the plot above, we can see a corresponding increase in immigration from Argentina during the 1998 - 2002 great depression. We can also observe a similar spike around 1985 to 1993. In fact, Argentina had suffered a great depression from 1974 to 1990, just before the onset of 1998 - 2002 great depression.

On a similar note, Brazil suffered the *Samba Effect* where the Brazilian real (currency) dropped nearly 35% in 1999. There was a fear of a South American financial crisis as many South American countries were heavily dependent on industrial exports from Brazil. The Brazilian government subsequently adopted an austerity program, and the economy slowly recovered over the years, culminating in a surge in 2010. The immigration data reflect these events.

**Question**: Previously in this lab, we created box plots to compare immigration from China and India to Canada. Create bubble plots of immigration from China and India to visualize any differences with time from 1980 to 2013. You can use **df_can_t** that we defined and used in the previous example.

```{python}
# normalized Chinese data
norm_china = (df_can_t['China'] - df_can_t['China'].min()) / (df_can_t['China'].max() - df_can_t['China'].min())

# normalized Indian data
norm_india = (df_can_t['India'] - df_can_t['India'].min()) / (df_can_t['India'].max() - df_can_t['India'].min())
```

```{python}
ax0 = df_can_t.plot(kind='scatter',
                        x='Year',
                        y='China',
                        figsize=(14, 8),
                        alpha=0.5,                  # transparency
                        color='green',
                        s=norm_china * 2000 + 10,  # pass in weights 
                        xlim=(1975, 2015)
                       )

# India
ax1 = df_can_t.plot(kind='scatter',
                        x='Year',
                        y='India',
                        alpha=0.5,
                        color="blue",
                        s=norm_india * 2000 + 10,
                        ax = ax0
                       )

ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from China and India from 1980 - 2013')
ax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')

plt.show()
plt.close()
```








