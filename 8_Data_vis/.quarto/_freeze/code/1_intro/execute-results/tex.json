{
  "hash": "cf9642f32b3b33ffa02a070d96ab83cf",
  "result": {
    "markdown": "# Introduction into data vis\n\n## The data used in this course\n\nDataset Source: [International migration flows to and from selected countries - The 2015 revision](http://www.un.org/en/development/desa/population/migration/data/empirical2/migrationflows.shtml?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01).\n\nThe dataset contains annual data on the flows of international immigrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous / next residence both for foreigners and nationals. The current version presents data pertaining to 45 countries.\n\nIn this lab, we will focus on the Canadian immigration data.\n\nThe Canada Immigration dataset can be fetched from <a href=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/Canada.xlsx?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01\">here</a>.\n\n### Read and clean the data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#load libs\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#load data\ndf_can = pd.read_excel(\"../data/Canada.xlsx\", sheet_name='Canada by Citizenship',skiprows=range(20), skipfooter=2)\n\n#check data\ndf_can.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=tex}\n\\begin{tabular}{llllrlrlrlrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\toprule\n{} &        Type &    Coverage &          OdName &  AREA & AreaName &   REG &          RegName &  DEV &             DevName &  1980 &  1981 &  1982 &  1983 &  1984 &  1985 &  1986 &  1987 &  1988 &  1989 &  1990 &  1991 &  1992 &  1993 &  1994 &  1995 &  1996 &  1997 &  1998 &  1999 &  2000 &  2001 &  2002 &  2003 &  2004 &  2005 &  2006 &  2007 &  2008 &  2009 &  2010 &  2011 &  2012 &  2013 \\\\\n\\midrule\n0 &  Immigrants &  Foreigners &     Afghanistan &   935 &     Asia &  5501 &    Southern Asia &  902 &  Developing regions &    16 &    39 &    39 &    47 &    71 &   340 &   496 &   741 &   828 &  1076 &  1028 &  1378 &  1170 &   713 &   858 &  1537 &  2212 &  2555 &  1999 &  2395 &  3326 &  4067 &  3697 &  3479 &  2978 &  3436 &  3009 &  2652 &  2111 &  1746 &  1758 &  2203 &  2635 &  2004 \\\\\n1 &  Immigrants &  Foreigners &         Albania &   908 &   Europe &   925 &  Southern Europe &  901 &   Developed regions &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     2 &     2 &     3 &     3 &    21 &    56 &    96 &    71 &    63 &   113 &   307 &   574 &  1264 &  1816 &  1602 &  1021 &   853 &  1450 &  1223 &   856 &   702 &   560 &   716 &   561 &   539 &   620 &   603 \\\\\n2 &  Immigrants &  Foreigners &         Algeria &   903 &   Africa &   912 &  Northern Africa &  902 &  Developing regions &    80 &    67 &    71 &    69 &    63 &    44 &    69 &   132 &   242 &   434 &   491 &   872 &   795 &   717 &   595 &  1106 &  2054 &  1842 &  2292 &  2389 &  2867 &  3418 &  3406 &  3072 &  3616 &  3626 &  4807 &  3623 &  4005 &  5393 &  4752 &  4325 &  3774 &  4331 \\\\\n3 &  Immigrants &  Foreigners &  American Samoa &   909 &  Oceania &   957 &        Polynesia &  902 &  Developing regions &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     1 &     2 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     0 &     0 \\\\\n4 &  Immigrants &  Foreigners &         Andorra &   908 &   Europe &   925 &  Southern Europe &  901 &   Developed regions &     0 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     0 &     3 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     1 &     0 &     2 &     0 &     0 &     1 &     1 &     0 &     0 &     0 &     0 &     1 &     1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nLet's first inspect the data frame, to get a feel for what we have:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#get a summary\ndf_can.info(verbose = False)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 195 entries, 0 to 194\nColumns: 43 entries, Type to 2013\ndtypes: int64(37), object(6)\nmemory usage: 65.6+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#get column headers\ndf_can.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nIndex([    'Type', 'Coverage',   'OdName',     'AREA', 'AreaName',      'REG',\n        'RegName',      'DEV',  'DevName',       1980,       1981,       1982,\n             1983,       1984,       1985,       1986,       1987,       1988,\n             1989,       1990,       1991,       1992,       1993,       1994,\n             1995,       1996,       1997,       1998,       1999,       2000,\n             2001,       2002,       2003,       2004,       2005,       2006,\n             2007,       2008,       2009,       2010,       2011,       2012,\n             2013],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#view the dimensions of our data\ndf_can.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n(195, 43)\n```\n:::\n:::\n\n\nNow, lets clean the data and remove some unnecessary columns using `drop()`\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis = 1, inplace = True)\ndf_can.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=tex}\n\\begin{tabular}{lllllrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\toprule\n{} &          OdName & AreaName &          RegName &             DevName &  1980 &  1981 &  1982 &  1983 &  1984 &  1985 &  1986 &  1987 &  1988 &  1989 &  1990 &  1991 &  1992 &  1993 &  1994 &  1995 &  1996 &  1997 &  1998 &  1999 &  2000 &  2001 &  2002 &  2003 &  2004 &  2005 &  2006 &  2007 &  2008 &  2009 &  2010 &  2011 &  2012 &  2013 \\\\\n\\midrule\n0 &     Afghanistan &     Asia &    Southern Asia &  Developing regions &    16 &    39 &    39 &    47 &    71 &   340 &   496 &   741 &   828 &  1076 &  1028 &  1378 &  1170 &   713 &   858 &  1537 &  2212 &  2555 &  1999 &  2395 &  3326 &  4067 &  3697 &  3479 &  2978 &  3436 &  3009 &  2652 &  2111 &  1746 &  1758 &  2203 &  2635 &  2004 \\\\\n1 &         Albania &   Europe &  Southern Europe &   Developed regions &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     2 &     2 &     3 &     3 &    21 &    56 &    96 &    71 &    63 &   113 &   307 &   574 &  1264 &  1816 &  1602 &  1021 &   853 &  1450 &  1223 &   856 &   702 &   560 &   716 &   561 &   539 &   620 &   603 \\\\\n2 &         Algeria &   Africa &  Northern Africa &  Developing regions &    80 &    67 &    71 &    69 &    63 &    44 &    69 &   132 &   242 &   434 &   491 &   872 &   795 &   717 &   595 &  1106 &  2054 &  1842 &  2292 &  2389 &  2867 &  3418 &  3406 &  3072 &  3616 &  3626 &  4807 &  3623 &  4005 &  5393 &  4752 &  4325 &  3774 &  4331 \\\\\n3 &  American Samoa &  Oceania &        Polynesia &  Developing regions &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     1 &     2 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     0 &     0 \\\\\n4 &         Andorra &   Europe &  Southern Europe &   Developed regions &     0 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     0 &     3 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     1 &     0 &     2 &     0 &     0 &     1 &     1 &     0 &     0 &     0 &     0 &     1 &     1 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nLet's rename the columns so that they make sense. We can use rename() method by passing in a dictionary of old and new names as follows:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf_can.rename(columns = {'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace = True)\n\ndf_can.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nIndex([  'Country', 'Continent',    'Region',   'DevName',        1980,\n              1981,        1982,        1983,        1984,        1985,\n              1986,        1987,        1988,        1989,        1990,\n              1991,        1992,        1993,        1994,        1995,\n              1996,        1997,        1998,        1999,        2000,\n              2001,        2002,        2003,        2004,        2005,\n              2006,        2007,        2008,        2009,        2010,\n              2011,        2012,        2013],\n      dtype='object')\n```\n:::\n:::\n\n\nWe will also add a 'Total' column that sums up the total immigrants by country over the entire period 1980 - 2013, as follows\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf_can['Total'] = df_can.sum(axis = 1)\ndf_can.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=tex}\n\\begin{tabular}{lllllrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\toprule\n{} &         Country & Continent &           Region &             DevName &  1980 &  1981 &  1982 &  1983 &  1984 &  1985 &  1986 &  1987 &  1988 &  1989 &  1990 &  1991 &  1992 &  1993 &  1994 &  1995 &  1996 &  1997 &  1998 &  1999 &  2000 &  2001 &  2002 &  2003 &  2004 &  2005 &  2006 &  2007 &  2008 &  2009 &  2010 &  2011 &  2012 &  2013 &  Total \\\\\n\\midrule\n0 &     Afghanistan &      Asia &    Southern Asia &  Developing regions &    16 &    39 &    39 &    47 &    71 &   340 &   496 &   741 &   828 &  1076 &  1028 &  1378 &  1170 &   713 &   858 &  1537 &  2212 &  2555 &  1999 &  2395 &  3326 &  4067 &  3697 &  3479 &  2978 &  3436 &  3009 &  2652 &  2111 &  1746 &  1758 &  2203 &  2635 &  2004 &  58639 \\\\\n1 &         Albania &    Europe &  Southern Europe &   Developed regions &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     2 &     2 &     3 &     3 &    21 &    56 &    96 &    71 &    63 &   113 &   307 &   574 &  1264 &  1816 &  1602 &  1021 &   853 &  1450 &  1223 &   856 &   702 &   560 &   716 &   561 &   539 &   620 &   603 &  15699 \\\\\n2 &         Algeria &    Africa &  Northern Africa &  Developing regions &    80 &    67 &    71 &    69 &    63 &    44 &    69 &   132 &   242 &   434 &   491 &   872 &   795 &   717 &   595 &  1106 &  2054 &  1842 &  2292 &  2389 &  2867 &  3418 &  3406 &  3072 &  3616 &  3626 &  4807 &  3623 &  4005 &  5393 &  4752 &  4325 &  3774 &  4331 &  69439 \\\\\n3 &  American Samoa &   Oceania &        Polynesia &  Developing regions &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     1 &     2 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &      6 \\\\\n4 &         Andorra &    Europe &  Southern Europe &   Developed regions &     0 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     0 &     3 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     1 &     0 &     2 &     0 &     0 &     1 &     1 &     0 &     0 &     0 &     0 &     1 &     1 &     15 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nCheck for null objects:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf_can.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &  0 \\\\\n\\midrule\nCountry   &  0 \\\\\nContinent &  0 \\\\\nRegion    &  0 \\\\\nDevName   &  0 \\\\\n1980      &  0 \\\\\n1981      &  0 \\\\\n1982      &  0 \\\\\n1983      &  0 \\\\\n1984      &  0 \\\\\n1985      &  0 \\\\\n1986      &  0 \\\\\n1987      &  0 \\\\\n1988      &  0 \\\\\n1989      &  0 \\\\\n1990      &  0 \\\\\n1991      &  0 \\\\\n1992      &  0 \\\\\n1993      &  0 \\\\\n1994      &  0 \\\\\n1995      &  0 \\\\\n1996      &  0 \\\\\n1997      &  0 \\\\\n1998      &  0 \\\\\n1999      &  0 \\\\\n2000      &  0 \\\\\n2001      &  0 \\\\\n2002      &  0 \\\\\n2003      &  0 \\\\\n2004      &  0 \\\\\n2005      &  0 \\\\\n2006      &  0 \\\\\n2007      &  0 \\\\\n2008      &  0 \\\\\n2009      &  0 \\\\\n2010      &  0 \\\\\n2011      &  0 \\\\\n2012      &  0 \\\\\n2013      &  0 \\\\\nTotal     &  0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nLet's view a quick summary of each column in our dataframe using the describe() method.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf_can.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=tex}\n\\begin{tabular}{lrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\toprule\n{} &          1980 &          1981 &          1982 &          1983 &          1984 &         1985 &         1986 &          1987 &          1988 &          1989 &          1990 &          1991 &          1992 &          1993 &          1994 &          1995 &          1996 &          1997 &          1998 &          1999 &          2000 &          2001 &          2002 &          2003 &          2004 &          2005 &          2006 &          2007 &          2008 &          2009 &          2010 &          2011 &          2012 &          2013 &          Total \\\\\n\\midrule\ncount &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &   195.000000 &   195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &    195.000000 &     195.000000 \\\\\nmean  &    508.394872 &    566.989744 &    534.723077 &    387.435897 &    376.497436 &   358.861538 &   441.271795 &    691.133333 &    714.389744 &    843.241026 &    964.379487 &   1064.148718 &   1136.856410 &   1138.712821 &    993.153846 &    962.625641 &   1026.076923 &    989.153846 &    824.241026 &    922.143590 &   1111.343590 &   1244.323077 &   1144.158974 &   1114.343590 &   1190.169231 &   1320.292308 &   1266.958974 &   1191.820513 &   1246.394872 &   1275.733333 &   1420.287179 &   1262.533333 &   1313.958974 &   1320.702564 &   32867.451282 \\\\\nstd   &   1949.588546 &   2152.643752 &   1866.997511 &   1204.333597 &   1198.246371 &  1079.309600 &  1225.576630 &   2109.205607 &   2443.606788 &   2555.048874 &   3158.730195 &   2952.093731 &   3330.083742 &   3495.220063 &   3613.336444 &   3091.492343 &   3321.045004 &   3070.761447 &   2385.943695 &   2887.632585 &   3664.042361 &   3961.621410 &   3660.579836 &   3623.509519 &   3710.505369 &   4425.957828 &   3926.717747 &   3443.542409 &   3694.573544 &   3829.630424 &   4462.946328 &   4030.084313 &   4247.555161 &   4237.951988 &   91785.498686 \\\\\nminn25\\%   &      0.000000 &      0.000000 &      0.000000 &      0.000000 &      0.000000 &     0.000000 &     0.500000 &      0.500000 &      1.000000 &      1.000000 &      2.000000 &      3.000000 &      6.500000 &     11.500000 &      9.500000 &     10.500000 &     14.500000 &     19.500000 &     15.000000 &     16.000000 &     16.000000 &     22.000000 &     18.500000 &     21.500000 &     19.000000 &     28.500000 &     25.000000 &     31.000000 &     31.000000 &     36.000000 &     40.500000 &     37.500000 &     42.500000 &     45.000000 &     952.000000 \\\\\n50\\%   &     13.000000 &     10.000000 &     11.000000 &     12.000000 &     13.000000 &    17.000000 &    18.000000 &     26.000000 &     34.000000 &     44.000000 &     38.000000 &     51.000000 &     74.000000 &     85.000000 &     76.000000 &     91.000000 &    118.000000 &    114.000000 &    106.000000 &    116.000000 &    138.000000 &    169.000000 &    165.000000 &    161.000000 &    191.000000 &    210.000000 &    218.000000 &    198.000000 &    205.000000 &    214.000000 &    211.000000 &    179.000000 &    233.000000 &    213.000000 &    5018.000000 \\\\\n75\\%   &    251.500000 &    295.500000 &    275.000000 &    173.000000 &    181.000000 &   197.000000 &   254.000000 &    434.000000 &    409.000000 &    508.500000 &    612.500000 &    657.500000 &    655.000000 &    722.500000 &    545.000000 &    550.500000 &    603.500000 &    612.500000 &    535.500000 &    548.500000 &    659.000000 &    793.500000 &    686.000000 &    673.500000 &    756.500000 &    832.000000 &    842.000000 &    899.000000 &    934.500000 &    888.000000 &    932.000000 &    772.000000 &    783.000000 &    796.000000 &   22239.500000 \\\\\nmax   &  22045.000000 &  24796.000000 &  20620.000000 &  10015.000000 &  10170.000000 &  9564.000000 &  9470.000000 &  21337.000000 &  27359.000000 &  23795.000000 &  31668.000000 &  23380.000000 &  34123.000000 &  33720.000000 &  39231.000000 &  30145.000000 &  29322.000000 &  22965.000000 &  21049.000000 &  30069.000000 &  35529.000000 &  36434.000000 &  31961.000000 &  36439.000000 &  36619.000000 &  42584.000000 &  33848.000000 &  28742.000000 &  30037.000000 &  29622.000000 &  38617.000000 &  36765.000000 &  34315.000000 &  34129.000000 &  691904.000000 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nBefore we proceed, notice that the default index of the dataset is a numeric range from 0 to 194. This makes it very difficult to do a query by a specific country. For example to search for data on Japan, we need to know the corresponding index value.\n\nThis can be fixed very easily by setting the 'Country' column as the index using set_index() method.\n\nTip: The opposite of set is reset. So to reset the index, we can use df_can.reset_index()\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf_can.set_index('Country', inplace = True)\ndf_can.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=tex}\n\\begin{tabular}{llllrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\toprule\n{} & Continent &           Region &             DevName &  1980 &  1981 &  1982 &  1983 &  1984 &  1985 &  1986 &  1987 &  1988 &  1989 &  1990 &  1991 &  1992 &  1993 &  1994 &  1995 &  1996 &  1997 &  1998 &  1999 &  2000 &  2001 &  2002 &  2003 &  2004 &  2005 &  2006 &  2007 &  2008 &  2009 &  2010 &  2011 &  2012 &  2013 &  Total \\\\\nCountry        &           &                  &                     &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &        \\\\\n\\midrule\nAfghanistan    &      Asia &    Southern Asia &  Developing regions &    16 &    39 &    39 &    47 &    71 &   340 &   496 &   741 &   828 &  1076 &  1028 &  1378 &  1170 &   713 &   858 &  1537 &  2212 &  2555 &  1999 &  2395 &  3326 &  4067 &  3697 &  3479 &  2978 &  3436 &  3009 &  2652 &  2111 &  1746 &  1758 &  2203 &  2635 &  2004 &  58639 \\\\\nAlbania        &    Europe &  Southern Europe &   Developed regions &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     2 &     2 &     3 &     3 &    21 &    56 &    96 &    71 &    63 &   113 &   307 &   574 &  1264 &  1816 &  1602 &  1021 &   853 &  1450 &  1223 &   856 &   702 &   560 &   716 &   561 &   539 &   620 &   603 &  15699 \\\\\nAlgeria        &    Africa &  Northern Africa &  Developing regions &    80 &    67 &    71 &    69 &    63 &    44 &    69 &   132 &   242 &   434 &   491 &   872 &   795 &   717 &   595 &  1106 &  2054 &  1842 &  2292 &  2389 &  2867 &  3418 &  3406 &  3072 &  3616 &  3626 &  4807 &  3623 &  4005 &  5393 &  4752 &  4325 &  3774 &  4331 &  69439 \\\\\nAmerican Samoa &   Oceania &        Polynesia &  Developing regions &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     1 &     2 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &      6 \\\\\nAndorra        &    Europe &  Southern Europe &   Developed regions &     0 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     0 &     3 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     1 &     0 &     2 &     0 &     0 &     1 &     1 &     0 &     0 &     0 &     0 &     1 &     1 &     15 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nColumn names that are integers (such as the years) might introduce some confusion. For example, when we are referencing the year 2013, one might confuse that when the 2013th positional index.\n\nTo avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf_can.columns = list(map(str, df_can.columns))\n# [print (type(x)) for x in df_can.columns.values] #<-- uncomment to check type of column headers\ndf_can.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=tex}\n\\begin{tabular}{llllrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\toprule\n{} & Continent &           Region &             DevName &  1980 &  1981 &  1982 &  1983 &  1984 &  1985 &  1986 &  1987 &  1988 &  1989 &  1990 &  1991 &  1992 &  1993 &  1994 &  1995 &  1996 &  1997 &  1998 &  1999 &  2000 &  2001 &  2002 &  2003 &  2004 &  2005 &  2006 &  2007 &  2008 &  2009 &  2010 &  2011 &  2012 &  2013 &  Total \\\\\nCountry        &           &                  &                     &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &       &        \\\\\n\\midrule\nAfghanistan    &      Asia &    Southern Asia &  Developing regions &    16 &    39 &    39 &    47 &    71 &   340 &   496 &   741 &   828 &  1076 &  1028 &  1378 &  1170 &   713 &   858 &  1537 &  2212 &  2555 &  1999 &  2395 &  3326 &  4067 &  3697 &  3479 &  2978 &  3436 &  3009 &  2652 &  2111 &  1746 &  1758 &  2203 &  2635 &  2004 &  58639 \\\\\nAlbania        &    Europe &  Southern Europe &   Developed regions &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     2 &     2 &     3 &     3 &    21 &    56 &    96 &    71 &    63 &   113 &   307 &   574 &  1264 &  1816 &  1602 &  1021 &   853 &  1450 &  1223 &   856 &   702 &   560 &   716 &   561 &   539 &   620 &   603 &  15699 \\\\\nAlgeria        &    Africa &  Northern Africa &  Developing regions &    80 &    67 &    71 &    69 &    63 &    44 &    69 &   132 &   242 &   434 &   491 &   872 &   795 &   717 &   595 &  1106 &  2054 &  1842 &  2292 &  2389 &  2867 &  3418 &  3406 &  3072 &  3616 &  3626 &  4807 &  3623 &  4005 &  5393 &  4752 &  4325 &  3774 &  4331 &  69439 \\\\\nAmerican Samoa &   Oceania &        Polynesia &  Developing regions &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     1 &     2 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     0 &     0 &      6 \\\\\nAndorra        &    Europe &  Southern Europe &   Developed regions &     0 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     0 &     3 &     0 &     1 &     0 &     0 &     0 &     0 &     0 &     2 &     0 &     0 &     1 &     0 &     2 &     0 &     0 &     1 &     1 &     0 &     0 &     0 &     0 &     1 &     1 &     15 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nSince we converted the years to string, let's declare a variable that will allow us to easily call upon the full range of years:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nyears = list(map(str, range(1980, 2014)))\nyears\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n['1980',\n '1981',\n '1982',\n '1983',\n '1984',\n '1985',\n '1986',\n '1987',\n '1988',\n '1989',\n '1990',\n '1991',\n '1992',\n '1993',\n '1994',\n '1995',\n '1996',\n '1997',\n '1998',\n '1999',\n '2000',\n '2001',\n '2002',\n '2003',\n '2004',\n '2005',\n '2006',\n '2007',\n '2008',\n '2009',\n '2010',\n '2011',\n '2012',\n '2013']\n```\n:::\n:::\n\n\nLets review the changes\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint('data dimensions:', df_can.shape)\nprint(df_can.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata dimensions: (195, 38)\nIndex(['Continent', 'Region', 'DevName', '1980', '1981', '1982', '1983',\n       '1984', '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992',\n       '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001',\n       '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010',\n       '2011', '2012', '2013', 'Total'],\n      dtype='object')\n```\n:::\n:::\n\n\n## Background into Matplotlib\n\nThe primary plotting library we will explore in the course is [Matplotlib](http://matplotlib.org/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01).  As mentioned on their website:\n\n> Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.\n\nIf you are aspiring to create impactful visualization with python, Matplotlib is an essential tool to have at your disposal.\n\n\n### Layers\n\nMatplotlib's architecture is composed of three main layers: \n\n#### Backend layer\n\nThe **Back-end layer**, which comes with three build-in abstract interacted\n\n- Figure canvas: encompasses the area on which the figure is drawn\n- Renderer: knows how to draw the figure canvas\n- Event: which handels user inputs, such as keyboard strokes or mouse clicks\n\n\n#### Artist layer\n\nThe **Artist layer** where much of the heavy lifting happens and is usually the appropriate programming paradigm when writing a web application server, or a UI application, or perhaps a script to be shared with other developers. Its composed of one main object, the **Artist**. The artist knows how to use the renderer to draw on the canvas. There are two types of artist objects:\n\n- Primitive: Line2D, rectangle, circle, text\n- Composite: Axes, Tick and figure\n\n\n#### Scripting layer\n\nThe **Scripting layer**, which is the appropriate layer for everyday purposes and is considered a lighter scripting interface to simplify common tasks and for a quick and easy generation of graphics and plots. \n\nThis layer is mainly comprised of pyplot, a scripting interface that is lighter than the Artist layer. \n\n\n\n## Matplotlib.Pyplot\n\nOne of the core aspects of Matplotlib is matplotlib.pyplot, Matplotlib's scripting layer. It is a collection of command style functions that make Matplotlib work like MATLAB. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. \n\n\nFor aesthetics we can check and apply styles in matplotlib as follows:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint(plt.style.available)\nmpl.style.use(['ggplot']) # optional: for ggplot-like style\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Solarize_Light2', '_classic_test_patch', '_mpl-gallery', '_mpl-gallery-nogrid', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\n```\n:::\n:::\n\n\n## Plotting in pandas\n\nPandas has a built-in implementation of Matplotlib that we can use. Plotting in *pandas* is as simple as appending a `.plot()` method to a series or dataframe.\n\nDocumentation:\n\n*   [Plotting with Series](http://pandas.pydata.org/pandas-docs/stable/api.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01#plotting)<br>\n*   [Plotting with Dataframes](http://pandas.pydata.org/pandas-docs/stable/api.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01#api-dataframe-plotting)\n\n\n## Line plots\n\nA line plot is a plot in the form of a series of data points connected by straight line segments.\n\nhe best use case for a line plot is when you have a continuous dataset and you're interested in visualizing the data over a period of time.\n\nLine plot is a handy tool to display several dependent variables against one independent variable. However, it is recommended that no more than 5-10 lines on a single graph; any more than that and it becomes difficult to interpret.\n\n**A case study**\n\nIn 2010, Haiti suffered a catastrophic magnitude 7.0 earthquake. The quake caused widespread devastation and loss of life and aout three million people were affected by this natural disaster. As part of Canada's humanitarian effort, the Government of Canada stepped up its effort in accepting refugees from Haiti. We can quickly visualize this effort using a Line plot:\n\nFirst, lets extract the data\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nhaiti = df_can.loc['Haiti', years]\nhaiti.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=tex}\n\\begin{tabular}{ll}\n\\toprule\n{} & Haiti \\\\\n\\midrule\n1980 &  1666 \\\\\n1981 &  3692 \\\\\n1982 &  3498 \\\\\n1983 &  2860 \\\\\n1984 &  1418 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nNext, we can plot:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nhaiti.plot()\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_intro_files/figure-pdf/cell-18-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\npandas automatically populated the x-axis with the index values (years), and the y-axis with the column values (population). However, notice how the years were not displayed because they are of type string. Therefore, let's change the type of the index values to integer for plotting.\n\nAlso, let's label the x and y axis using plt.title(), plt.ylabel(), and plt.xlabel() as follows:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n## let's change the index values of Haiti to type integer for plotting\nhaiti.index = haiti.index.map(int)\n\n#plot\nhaiti.plot(kind = 'line')\n\n#add labels\nplt.title(\"Immigration from Haiti\")\nplt.ylabel(\"Number of immigrants\")\nplt.xlabel(\"Years\")\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_intro_files/figure-pdf/cell-19-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can clearly notice how number of immigrants from Haiti spiked up from 2010 as Canada stepped up its efforts to accept refugees from Haiti. Let's annotate this spike in the plot by using the `plt.text()` method.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n#plot\nhaiti.plot(kind = 'line')\n\n#add labels\nplt.title(\"Immigration from Haiti\")\nplt.ylabel(\"Number of immigrants\")\nplt.xlabel(\"Years\")\n\n# annotate the 2010 Earthquake. \n# syntax: plt.text(x, y, label)\nplt.text(2000, 6000, \"2010 Earthquake\")\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_intro_files/figure-pdf/cell-20-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nLet's compare the number of immigrants from India and China from 1980 to 2013.\n\nStep 1: Get the data set for China and India, and display the dataframe.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf_CI = df_can.loc[[\"China\", \"India\"], years]\ndf_CI.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=tex}\n\\begin{tabular}{lrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\toprule\n{} &  1980 &  1981 &  1982 &  1983 &  1984 &  1985 &  1986 &   1987 &   1988 &   1989 &   1990 &   1991 &   1992 &   1993 &   1994 &   1995 &   1996 &   1997 &   1998 &   1999 &   2000 &   2001 &   2002 &   2003 &   2004 &   2005 &   2006 &   2007 &   2008 &   2009 &   2010 &   2011 &   2012 &   2013 \\\\\nCountry &       &       &       &       &       &       &       &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        &        \\\\\n\\midrule\nChina   &  5123 &  6682 &  3308 &  1863 &  1527 &  1816 &  1960 &   2643 &   2758 &   4323 &   8076 &  14255 &  10846 &   9817 &  13128 &  14398 &  19415 &  20475 &  21049 &  30069 &  35529 &  36434 &  31961 &  36439 &  36619 &  42584 &  33518 &  27642 &  30037 &  29622 &  30391 &  28502 &  33024 &  34129 \\\\\nIndia   &  8880 &  8670 &  8147 &  7338 &  5704 &  4211 &  7150 &  10189 &  11522 &  10343 &  12041 &  13734 &  13673 &  21496 &  18620 &  18489 &  23859 &  22268 &  17241 &  18974 &  28572 &  31223 &  31889 &  27155 &  28235 &  36210 &  33848 &  28742 &  28261 &  29456 &  34235 &  27509 &  30933 &  33087 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nLet's try plotting\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n#plot\ndf_CI.plot(kind = 'line')\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_intro_files/figure-pdf/cell-22-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nThat doesn't look right.\n\nPandas plots the indices on the x-axis and the columns as individual lines on the y-axis. Since df_CI is a dataframe with the country as the index and years as the columns, we must first transpose the dataframe using `transpose()` method to swap the row and columns.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf_CI = df_CI.transpose()\ndf_CI.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=tex}\n\\begin{tabular}{lrr}\n\\toprule\nCountry &  China &  India \\\\\n\\midrule\n1980 &   5123 &   8880 \\\\\n1981 &   6682 &   8670 \\\\\n1982 &   3308 &   8147 \\\\\n1983 &   1863 &   7338 \\\\\n1984 &   1527 &   5704 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n#change the index values\ndf_CI.index = df_CI.index.map(int)\n\n#plot\ndf_CI.plot(kind = 'line')\n\n#add labels\nplt.title(\"Immigration from China and India\")\nplt.ylabel(\"Number of immigrants\")\nplt.xlabel(\"Years\")\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_intro_files/figure-pdf/cell-24-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nQuestion: Compare the trend of top 5 countries that contributed the most to immigration to Canada.\n\nTo make the plot more readeable, we will change the size using the `figsize` parameter.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n#sort our data by the total column\ndf_can.sort_values(by = \"Total\", ascending = False, axis = 0, inplace = True)\n\n#get top five hits\ndf_top5 = df_can.head(5)\n\n#transpose the data\ndf_top5 = df_top5[years].transpose()\n\n#change the index values\ndf_top5.index = df_top5.index.map(int)\n\n#plot\ndf_top5.plot(kind='line', figsize=(8, 8))\n\n#add labels\nplt.title(\"Immigration in the top 5 countries that contributed most to immigration\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of immigrants\")\n\n\nplt.show()\nplt.close()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_intro_files/figure-pdf/cell-25-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Other Plots\n\nCongratulations! you have learned how to wrangle data with python and create a line plot with Matplotlib. There are many other plotting styles available other than the default Line plot, all of which can be accessed by passing kind keyword to plot(). The full list of available plots are as follows:\n\nbar for vertical bar plots\nbarh for horizontal bar plots\nhist for histogram\nbox for boxplot\nkde or density for density plots\narea for area plots\npie for pie plots\nscatter for scatter plots\nhexbin for hexbin plot\n\n",
    "supporting": [
      "1_intro_files/figure-pdf"
    ],
    "filters": []
  }
}