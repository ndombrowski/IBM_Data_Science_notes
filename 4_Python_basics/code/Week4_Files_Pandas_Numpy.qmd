# Working with data in python

## The open function

### Reading Files with Open



```{python}
#|  echo: false
#|  results: hide
#|  warning: false

##Download example data.

#import urllib.request
#url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%204/data/Example1.txt.txt'
#filename = 'Example1.txt.txt'
#urllib.request.urlretrieve(url, filename)

## Download Example file
# !wget -O data/Example1.txt.txt https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%204/data/Example1.txt.txt
```

```{python}
#|  warning: false
#|  echo: false

#ensure that plots get rendered, will give a warning, but nothing to worry about
#%matplotlib inline  
```

One way to read or write a file in Python is to use the built-in open function. The open function provides a File object that contains the methods and attributes you need in order to read, save, and manipulate the file. In this notebook, we will only cover .txt files. 

- The first argument is the filepath and the filename we want to open
- The second parameter is the mode:
    - r: open a file for reading
    - w: open a file for writing
    - a: open a file for appending
    - r+ : Reading and writing. Cannot truncate the file.
    - w+ : Writing and reading. Truncates the file.
    - a+ : Appending and Reading. Creates a new file, if none exists.
    
- We store this in a file object, i.e. File1 and we can use the file object to obtain information about the file
- You should always close the file object using the method close.

Python file method close() closes the opened file. A closed file cannot be read or written any more. Any operation, which requires that the file be opened will raise a ValueError after the file has been closed. Calling close() more than once is allowed.

```{python}
#open a file
File1 = open("../data/Example1.txt", "r")

#get the name of the file
print(File1.name)

#see what mode the object is in
print(File1.mode)

#get the file contents
print(File1.read())

#get they type of the file
type(File1.read())

#close the file
File1.close()
```

Since using .close() can be tedious, we can use an alternative, the with statement. This is a better alternative, since the with statement will automatically close the file.

```{python}
with open("../data/Example1.txt", "r") as File1:
    #code will be performed in the indented code block
    #The method "read" stores the values of the file in the variable "file_stuff" as a string
    file_stuff = File1.read()
    print(file_stuff)
    print(File1.mode)
```

Notice, that we didn’t have to write “file.close()”. That will automatically be called.

We can output every line as an element in a list using the method "readlines."

```{python}
with open("../data/Example1.txt", "r") as File1:
    file_stuff = File1.readlines()
    print(file_stuff)
```

We don’t have to read the entire file, for example, we can read the first 4 characters by entering three as a parameter to the method .read():

```{python}
# Read first four characters
with open("../data/Example1.txt", "r") as file1:
    print(file1.read(4))
```


Use a loop to print out each line individually

```{python}
with open("../data/Example1.txt", "r") as File1:
    for i in File1:
        print(i)
```

We can also read all lines and save them as a list

```{python}
# Read all lines and save as a list
with open("../data/Example1.txt", "r") as file1:
    FileasList = file1.readlines()
    
#print the first line    
FileasList[0]
```



### Writting Files with Open

Create a new, empty example as follows:

**Beware**: If we have a file with that filename in our directory, it will be overwritten!

```{python}
#create example.txt in the specified dir
with open("../data/Example2.txt", "w") as File1:
    #add something into our file
    File1.write("This is line A\n")
    File1.write("This is line B\n")
```

We can also have a list and write this to a file

```{python}
Lines = ["This is line A\n", "This is line B\n", "This is line C\n"]

with open("../data/Example2.txt", "w") as File1:
    for i in Lines:
        File1.write(i)
```


### Appending lines to a new file

Append will not create a new file but append lines to an existing file.

```{python}
with open("../data/Example2.txt", "a") as File1:
    File1.write("This is line D\n")
```

### Copy one file to a new file

```{python}
with open("../data/Example1.txt", "r") as readfile:
    with open("../data/Example3.txt", "w") as writefile:
        for line in readfile:
            writefile.write(line)
```

### Other modes
 
```{python}
with open('../data/Example2.txt', 'a+') as testwritefile:
    testwritefile.write("This is line E\n")
    print(testwritefile.read())
```

Opening the file in w is akin to opening the .txt file, moving your cursor to the beginning of the text file, writing new text and deleting everything that follows. Whereas opening the file in a is similiar to opening the .txt file, moving your cursor to the very end and then adding the new pieces of text. It is often very useful to know where the 'cursor' is in a file and be able to control it. The following methods allow us to do precisely this -

- .tell() - returns the current position in bytes
- .seek(offset,from) - changes the position by 'offset' bytes with respect to 'from'. From can take the value of 0,1,2 corresponding to beginning, relative to current position and end


```{python}
with open('../data/Example2.txt', 'a+') as testwritefile:
    print("Initial Location: {}".format(testwritefile.tell()))
    data = testwritefile.read()
    if (not data):  #empty strings return false in python
            print('Read nothing') 
    else: 
            print(testwritefile.read())
    
    testwritefile.seek(0,0) # move 0 bytes from beginning.
    
    print("\nNew Location : {}".format(testwritefile.tell()))
    data = testwritefile.read()
    if (not data): 
            print('Read nothing') 
    else: 
            print(data)
    
    print("Location after read: {}".format(testwritefile.tell()) )
```


Finally, a note on the difference between w+ and r+. Both of these modes allow access to read and write methods, however, opening a file in w+ overwrites it and deletes all pre-existing data.
**To work with a file on existing data, use r+ and a+**. While using r+, it can be useful to add a .truncate() method at the end of your data. This will reduce the file to your data and delete everything that follows.

```{python}
with open('../data/Example2.txt', 'r+') as testwritefile:
    data = testwritefile.readlines()
    testwritefile.seek(0,0) #write at beginning of file
   
    testwritefile.write("Line 1" + "\n")
    testwritefile.write("Line 2" + "\n")
    testwritefile.write("Line 3" + "\n")
    testwritefile.write("finished\n")
    #Uncomment the line below
    testwritefile.truncate()
    testwritefile.seek(0,0)
    print(testwritefile.read())
```

After reading files, we can also write data into files and save them in different file formats like .txt, .csv, .xls (for excel files) etc. You will come across these in further examples

#### Exercise

Your local university's Raptors fan club maintains a register of its active members on a .txt document. Every month they update the file by removing the members who are not active. You have been tasked with automating this with your Python skills.

Given the file currentMem, Remove each member with a 'no' in their Active column. Keep track of each of the removed members and append them to the exMem file. Make sure that the format of the original files in preserved. (Hint: Do this by reading/writing whole lines and ensuring the header remains )

Run the code block below prior to starting the exercise. The skeleton code has been provided for you. Edit only the cleanFiles function.

```{python}
#Run this prior to starting the exercise
from random import randint as rnd

memReg = '../data/members.txt'
exReg = '../data/inactive.txt'
fee =('yes','no')

def genFiles(current,old):
    with open(current,'w+') as writefile: 
        writefile.write('Membership No  Date Joined  Active  \n')
        data = "{:^13}  {:<11}  {:<6}\n"

        for rowno in range(20):
            date = str(rnd(2015,2020))+ '-' + str(rnd(1,12))+'-'+str(rnd(1,25))
            writefile.write(data.format(rnd(10000,99999),date,fee[rnd(0,1)]))


    with open(old,'w+') as writefile: 
        writefile.write('Membership No  Date Joined  Active  \n')
        data = "{:^13}  {:<11}  {:<6}\n"
        for rowno in range(3):
            date = str(rnd(2015,2020))+ '-' + str(rnd(1,12))+'-'+str(rnd(1,25))
            writefile.write(data.format(rnd(10000,99999),date,fee[1]))


genFiles(memReg,exReg)
```

```{python}
def cleanFiles(currentMem, exMem):
    with open(currentMem, "r+") as writeFile:
        with open(exMem, "a+") as appendFile:
            #get the data
            writeFile.seek(0)
            members = writeFile.readlines()
            #remove header
            header = members[0]
            members.pop(0)
            inactive=[]
            for member in members:
                if 'no' in member:
                    inactive.append(member)
            '''
            inactive = [member for member in members if ('no' in member)]
            The above is the same as 
            
            for member in members:
            if 'no' in member:
                inactive.append(member)
            '''
            #go to the beginning of the write file
            writeFile.seek(0)
            writeFile.write(header)
            for member in members:
                if (member in inactive):
                    appendFile.write(member)
                else:
                    writeFile.write(member)
            writeFile.truncate()
```

Test code:

```{python}
memReg = '../data/members.txt'
exReg = '../data/inactive.txt'
cleanFiles(memReg,exReg)

# code to help you see the files
headers = "Membership No  Date Joined  Active  \n"

with open(memReg,'r') as readFile:
    print("Active Members: \n\n")
    print(readFile.read())
    
with open(exReg,'r') as readFile:
    print("Inactive Members: \n\n")
    print(readFile.read())
    
```


Automated test code:

```{python}
def testMsg(passed):
    if passed:
       return 'Test Passed'
    else :
       return 'Test Failed'

testWrite = "../data/testWrite.txt"
testAppend = "../data/testAppend.txt" 
passed = True

genFiles(testWrite,testAppend)

with open(testWrite,'r') as file:
    ogWrite = file.readlines()

with open(testAppend,'r') as file:
    ogAppend = file.readlines()

try:
    cleanFiles(testWrite,testAppend)
except:
    print('Error')

with open(testWrite,'r') as file:
    clWrite = file.readlines()

with open(testAppend,'r') as file:
    clAppend = file.readlines()
        
# checking if total no of rows is same, including headers

if (len(ogWrite) + len(ogAppend) != len(clWrite) + len(clAppend)):
    print("The number of rows do not add up. Make sure your final files have the same header and format.")
    passed = False
    
for line in clWrite:
    if  'no' in line:
        passed = False
        print("Inactive members in file")
        break
    else:
        if line not in ogWrite:
            print("../data in file does not match original file")
            passed = False
print ("{}".format(testMsg(passed)))
```

## Pandas

Pandas is a popular library for data analysis built on top of the Python programming language. Pandas generally provide two data structures for manipulating data, They are:

- DataFrame: a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.
- Series: represents a one-dimensional array of indexed data. It has two main components :
    - An array of actual data.
    - An associated array of indexes or data labels.

We input a library, a set of pre-written functions with the import command followed by the name of the library. Since always writing the library name, we can shorten it with the as statement. Pd is the standard abbreviation often used for pandas.

```{python}
import pandas as pd
```

This gives us access to a number of pre-build classes and functions. 

### Loading data with pandas

We import a table with and store it in a dataframe. A dataframe is comprised of rows and columns. 

```{python}
#read in a dataframe
df = pd.read_csv("../data/file1.csv")

#examine the first 5 rows of a dataframe
df.head()
```

We also can create a dataframe out of a dictionary. The keys correspond to the table headers, the values correspond to the rows.

```{python}
#Define a dictionary 'x'
x = {'Name': ['Rose','John', 'Jane', 'Mary'], 
        'ID': [1, 2, 3, 4], 
        'Department': ['Architect Group', 'Software Group', 'Design Team', 'Infrastructure'], 
        'Salary':[100000, 80000, 50000, 60000]}

#casting the dictionary to a DataFrame
df = pd.DataFrame(x)

#display the result df
df
```

We can create a new df consisting of one column.

```{python}
x = df[["ID"]]
x
```

Let's use the <code>type()</code> function and check the type of the variable.

```{python}
#check the type of x
type(x)
```

We can also do this for multiple columns:

```{python}
z = df[['Department','Salary','ID']]
z
```

To view the column as a series, we just use one bracket.

```{python}
x = df["Name"]
x
```

```{python}
#check the type of x
type(x)
```

### loc() and iloc() functions

loc() is a label-based data selecting method which means that we have to pass the name of the row or column that we want to select. This method includes the last element of the range passed in it.

Simple syntax for your understanding:

`loc[row_label, column_label]`

iloc() is an indexed-based selecting method which means that we have to pass integer index in the method to select a specific row/column. This method does not include the last element of the range passed in it.

Simple syntax for your understanding:

`iloc[row_index, column_index]`


```{python}
# Access the value on the first row and the first column
df.iloc[0, 0]
```

```{python}
# Access the value on the first row and the third column
df.iloc[0,2]
```

```{python}
# Access the column using the name
df.loc[0, 'Salary']
```

Let us create a new dataframe called 'df1' and assign 'df' to it. Now, let us set the "Name" column as an index column using the method set_index().

```{python}
df1=df
df1=df1.set_index("Name")

#To display the first 5 rows of new dataframe
df1.head()
```

```{python}
#Now, let us access the column using the name
df1.loc['Jane', 'Salary']
```

### Slicing

Slicing uses the [] operator to select a set of rows and/or columns from a DataFrame.

To slice out a set of rows, you use this syntax: data[start:stop],

here the start represents the index from where to consider, and stop represents the index one step BEYOND the row you want to select. You can perform slicing using both the index and the name of the column.

**NOTE: When slicing in pandas, the start bound is included in the output.**

So if you want to select rows 0, 1, and 2 your code would look like this: df.iloc[0:3].

It means you are telling Python to start at index 0 and select rows 0, 1, 2 up to but not including 3.

**NOTE: Labels must be found in the DataFrame or you will get a KeyError.**

Indexing by labels(i.e. using loc()) differs from indexing by integers (i.e. using iloc()). With loc(), both the start bound and the stop bound are inclusive. When using loc(), integers can be used, but the integers refer to the index label and not the position.

For example, using loc() and select 1:4 will get a different result than using iloc() to select rows 1:4.

```{python}
# let us do the slicing using old dataframe df
df.iloc[0:2, 0:3]
```

```{python}
#let us do the slicing using loc() function on old dataframe df where index column is having labels as 0,1,2
df.loc[0:2,'ID':'Department']
```

### Working with and Saving Data

#### Make a list of unique elements

```{python}
# Read data from CSV file
csv_path = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%204/data/TopSellingAlbums.csv'
df = pd.read_csv(csv_path)
df.head()
```

```{python}
# Access to the column Released
x = df[['Released']]
x
```

```{python}
#apply the unique method to remove duplicated years
df['Released'].unique()
```

### Selecting rows by conditions

Lets find all the albums released after 1980

```{python}
#find albums after 1980
#the results is a list of boolean values
print(df["Released"]>=1980)

#select the specified columns from our dataframe
df1 = df[df["Released"]>=1980]
df1.head()
```


### Save dataframes

```{python}
#save new df to csv
df.to_csv("../data/new_songs.csv")
```


## Numpy

Numpy is a package for scientific computing and has many useful functions.

### Basics

NumPy is a Python library used for working with arrays, linear algebra, fourier transform, and matrices.A numpy array is similar to a list. NumPy stands for Numerical Python and it is an open source project.The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

NumPy is usually imported under the np alias.

It's usually fixed in size and each element is of the same type. We can cast a list to a numpy array by first importing numpy:

```{python}
#load numpy
import numpy as np

#The version string is stored under version attribute.
print(np.__version__)
```

```{python}
#create an array
a = np.array([0,1,2,3,4])
print(a)

#access individual elements
print(a[2])

#check the type
print(type(a))

#obtain the data type of the array element
print(a.dtype)

#check the attribute size, the number of elements in the array
print(a.size)

#show the array dimensions
print(a.ndim)

#show the size of the array in each dimension
print(a.shape)
```


### Indexing and slicing

Change elements of an array:

```{python}
#define an array
c = np.array([20,1,2,3,4])
print(c)

#change the first element to 100
c[0]=100
print(c)

#change the 5th element
c[4]=5
print(c)
```

Like lists, we can slice the numpy array. Slicing in python means taking the elements from the given index to another given index.

We pass slice like this: [start:end].

We can select the elements from 1 to 3 and assign it to a new numpy array as follows:

```{python}
#select the elements from 1 to 3
print(c[1:4])

## Set the fourth element and fifth element to 300 and 400
c[3:5] = 300, 400
print(c)
```

We can also define the steps in slicing, like this: [start:end:step].

```{python}
arr = np.array([1, 2, 3, 4, 5, 6, 7])
print(arr[1:5:2])
```

If we don't pass start its considered 0

```{python}
print(arr[1:5])
```

If we don't pass end it considers till the length of array.

```{python}
print(arr[3:])
```

If we don't pass step its considered 1

```{python}
print(arr[1:5:])
```


### Basic operations

#### Vector addition and subtraction

```{python}
#define some vectors
u = np.array([1,0])
v = np.array([0,1])

#add vectors
z = u+v
print(z)

#subtract vectors
z = u-v
print(z)
```

#### Array multiplication with a scalar

```{python}
y = np.array([1,2])

#multiply vector
z= 2*y
print(z)

```

#### Product of two numpy arrays

```{python}
u = np.array([1,2])
v = np.array([3,2])

#multiply two vectors
z = u*v
print(z)
```

#### Dot products 

The dot product is a single number given by the following term and represents how similar two vectors are.

```{python}
u = np.array([1,2])
v = np.array([3,1])

#dot product
#1*3 + 2*5
result = np.dot(u,v)
print(result)
```

#### Adding constant to a numpy array 

```{python}
u = np.array([1,2,3,-1])

#add a scalar to each element of an array, i.e. broadcasting
z = u + 1
print(z)
```


### Universal functions

A universal function is a function that operates on ND arrays. We can apply a universal function to a numpy array. 

#### Calculating the mean of an array

```{python}
a = np.array([1,-1,1,-1])

#calculate the mean
mean_a = a.mean()
print(mean_a)
```

#### Standard deviation

```{python}
a = np.array([1,-1,1,-1])

sdev = a.std()
print(sdev)

```

#### Find the max and min

```{python}
b = np.array([1,-2,3,4,5])

#calculate the mean
max_b = b.max()
print(max_b)
```

We can use numpy to create functions that map numpy arrays to new numpy arrays.

```{python}
#access pi with
print(np.pi)

# We can create the following numpy array in radians
x = np.array([0,np.pi/2,np.pi])

#apply the function sin to our array x
#this way we apply the sin function to each element in the array
y = np.sin(x)

#the result is a new array, y
print(y)
```

#### Using Linspace

A useful function for plotting mathematical functions is **line space**. Line space returns evenly spaced numbers over specified interval. We specify the starting point of the sequence, the ending point of the sequence. The parameter num indicates the number of samples to generate, in this case five.

```{python}
print(np.linspace(-2,2,num=5))
print(np.linspace(-2,2,num=9))
```

Plotting mathematics functions: We can use the function line space to generate 100 evenly spaced samples from the interval zero to two pie. We can use the numpy function sin to map the array x to a new array y. We can import the library pyplot as plt to help us plot the function.

```{python}
#generate 100 evenly spaced samples from the interval zero to two pie
x = np.linspace(0,2*np.pi,100)

#use sin to map the array x to a new array y
y = np.sin(x)

#import the matplot lib to help us plot the function
import matplotlib.pyplot as plt

#plot the graph
#first value = values plotted on x-axis, second input = values plotted on x-axis
plt.plot(x,y)
plt.show()
```

#### Iterating 1-D Arrays

terating means going through elements one by one.

If we iterate on a 1-D array it will go through each element one by one.

```{python}
arr1 = np.array([1, 2, 3])

for x in arr1:
    print(x)
```


#### Plot arrays

Generate a function for plotting

```{python}
# | warning: false

# Import the libraries
import time 
import sys
import numpy as np 

import matplotlib.pyplot as plt

def Plotvec2(a,b):
    ax = plt.axes()# to generate the full window axes
    ax.arrow(0, 0, *a, head_width=0.05, color ='r', head_length=0.1)#Add an arrow to the  a Axes with arrow head width 0.05, color red and arrow head length 0.1
    plt.text(*(a + 0.1), 'a')
    ax.arrow(0, 0, *b, head_width=0.05, color ='b', head_length=0.1)#Add an arrow to the  b Axes with arrow head width 0.05, color blue and arrow head length 0.1
    plt.text(*(b + 0.1), 'b')
    plt.ylim(-2, 2)#set the ylim to bottom(-2), top(2)
    plt.xlim(-2, 2)#set the xlim to left(-2), right(2)
```


Plot:

```{python}
arr1 = np.array([-1,1])
arr2 = np.array([1,1])

Plotvec2(arr1,arr2)
plt.show()
```



### 2D numpy arrays

Let's first create a nested list with 3 lists, each of equal size.

```{python}
a = np.array([[1,3,4],[10,11,12]])
print(a)

#cast the list to a numpy array
# each separate list = 1 row in the matrix
A = np.array(a)
print(A)

#We can use the attribute ndim to obtain the number of axes or dimensions
#referred to as the rank 
print(A.ndim)
```

It's useful to think of ndim as the number of nested lists. The first list represents the first dimension. This list contains another set of lists. This represents the second dimension or axis. The number of lists the list contains does not have to do with the dimension but the shape of the list.

```{python}
#Attribute shape returns a tuple corresponding to the size or number of each dimension.
print(A.shape)
```

The first element in the tuple corresponds to the number of nested lists contained in the original list or the number of rows in the rectangular representation, in this case three. The second element corresponds to the size of each of the nested list or the number of columns in the rectangular array zero.

```{python}
#The total number of elements in the array is given by the attribute size.
print(A.size)
```

We see there are three rows and three columns. Multiplying the number of columns and rows together, we get the total number of elements, in this case nine.

We can use rectangular brackets to access the different elements of the array. The index in the first bracket corresponds to the different nested lists each a different color. The second bracket corresponds to the index of a particular element within the nested list. Using the rectangular representation, the first index corresponds to the row index. The second index corresponds to the column index.

```{python}
#get the second row and third column
print(A[1][2])

#get the first row and first column
print(A[0][0])
print(A[0,0])
```

We can also slice:

```{python}
#get the first row and the first 2 columns
print(A[0,0:2])

#get the first 2 rows and the 3rd column
print(A[0:2,2])
```

We can also add (or use other mathematical operations) on two arrays:

```{python}
#define two arrays
X = np.array([[1,0],[0,1]])
Y = np.array([[2,1],[1,2]])

#view arrays
print(X)
print(Y)

#combine the arrays
print(X+Y)

#perform matrix multiplication on the numpy arrays  A and  B
print(np.dot(X,Y))
```

