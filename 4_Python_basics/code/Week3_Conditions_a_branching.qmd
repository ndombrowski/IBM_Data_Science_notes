# Conditions and branching

## Comparison Operations

```{python}
#test for equality
a = 6
a == 7

#greater than
i = 6
i > 5

#greater than or equal to
i = 5
i >= 5

#test for inequality
i = 5
i != 6

#we can compare strings as well
"AC/DC" == "Thriller"
"AC/DC" != "Thriller"
```

## Branching

-   Branching allows us to run different statements for different input

### The if statement

If a statement is true, then you can enter the room and run some pre-defined task.
If the statement is false, our program will skip the task.

As an example, make a statement were you only can enter a concert if you are older than 19

```{python}
#define our age
age = 20

#run the statement
if (age>18):
  print("you can enter the concert")
print("move on")
```

### The else statement

-   The else statement will run a different block of code if the same condition is false.
-   Now lets say that they can not go to ACDC if they are less than 18 but they can go to the meat loaf concert. If they are over 18 they go to the ACDC concert

```{python}
#define our age
age = 17

#run the statement
if (age>18):
  print("you can enter the ACDC concert")
else:
  print("go see Meat Loaf")
print("move on")
```

### The elif statement

-   The elif statement, short for else-if, allows us to check additional conditions if the preceding condition is false. If the condition is true, the alternate expressions will be run
-   For example: If we are 18, we will go to Pink Floyd instead of ACDC or Meat Loaf. For less than 18 and older than 18 the old rules apply.

```{python}
#define our age
age = 18

#run the statement
if (age>18):
  print("you can enter the ACDC concert")
elif(age==18):
  print("go see Pink Floyd")
else:
  print("go see Meat Loaf")
print("move on")
```

## Logic operators

-   Logic operators take boolean values and produce different boolean values

### The or operator

```{python}
album_year = 1981

if(album_year <1980) or (album_year > 1989):
  print("The album was made in the 70s or 90s")
else:
  print("The Album was made in the 80s")

print("")
```

### The and operator

```{python}
album_year = 1981

if(album_year > 1979) and (album_year < 1990):
  print("The album was made in the 80s")

print("")
```

### The not statement

The not statement checks if the statement is false:

```{python}
# Condition statement example
album_year = 1984

if not (album_year == 1984):
    print ("Album year is not 1984")

print("")
```

## Loops

### The range function

The range function outputs and ordered sequence as a list I.
If the input is a positive integer, the output is a sequence.
The sequence contains the same number of elements as the input but starts at zero.

In Python 3, range() creates an object of type range..
An object of type range does not store values, but creates when needed, so its values are not displayed with print().
Since it is an iterable object, the value can be printed in the for loop.

### For loops

Loops perform a task over and over again.

Lets try to print the values of a range.

```{python}
for i in range(3):
    print(i)
```

```{python}
for i in range(12,15):
    print(i)
```

For a list of colors, replace each color value with `white.`

```{python}
squares = ["red", "yellow", "green"]

for i in range(0,3):
    squares[i]="white"

squares
```

Iterate through a list without a range:

```{python}
squares = ["red", "yellow", "green"]

for i in squares:
    i

squares
```

Another example: print all years present in a list with dates:

```{python}
#define the list
dates = [1982, 1980, 1973]

#calculate the length of the index
N = len(dates)

#execute the code N times
for i in range(N):
    print(dates[i])
```

Alternatively, we can access the elements like this:

```{python}
#define the list
dates = [1982, 1980, 1973]

#execute the code N times
for i in dates:
    print(i)
```

We can also recover the index with enumerate().

When you use enumerate(), the function gives you back two loop variables:

The count of the current iteration The value of the item at the current iteration

```{python}
squares = ["red", "yellow", "green"]

for index,value in enumerate(squares):
    value
    index
```

We can also print this in a nicer looking table:

```{python}
squares = ["red", "yellow", "green"]

for index,value in enumerate(squares):
    print(index, value)
```

### While loops

While loops are similar to for loops but instead of executing a statement a set number of times, a while loop only runs if a condition is met.

For example: We have a list of colors and want to copy these into a new list until we encounter a non-orange value.

```{python}
squares = ["orange", "orange", "purple", "orange"]

#create an empty list in which we want to store our new list
Newsquares=[]

#start the index at 0
i=0

#execute the statement until the condition is false
while(squares[i]=="orange"):
    #append the value of the i-th element of the list squares to the new list
    Newsquares.append(squares[i])
    #increase the index value by one to be able to access the 2nd element in the next round
    i=i+1

Newsquares
```

Alternatively, we could do:

```{python}
squares = ["orange", "red", "purple", "green"]

#create an empty list in which we want to store our new list
Newsquares=[]

#start the index at 0
i=0

while(squares[i]!="purple"):
    Newsquares.append(squares[i])
    i=i+1

Newsquares
```

Let's say we would like to iterate through list dates and stop at the year 1973, then print out the number of iterations.
This can be done with the following block of code:

```{python}
dates = [1982 ,1980, 1973, 2000]

#set counter and empty list
i=0
year=dates[0]

while(year!=1973):
    print(year)
    i = i+1
    year=dates[i]

print("It took ", i, "repetitions to get out of the loop")
```

### Exercises Loops

Write a for loop the prints out all the element between -5 and 5 using the range function.

```{python}
for i in range(-4,5):
    print(i)
```

Print the elements of the following list: Genres=\[ 'rock', 'R&B', 'Soundtrack', 'R&B', 'soul', 'pop'\] Make sure you follow Python conventions.

```{python}
Genres=[ 'rock', 'R&B', 'Soundtrack', 'R&B', 'soul', 'pop']

for i in Genres:
    print(i)
```

Write a while loop to display the values of the Rating of an album playlist stored in the list PlayListRatings.
If the score is less than 6, exit the loop.
The list PlayListRatings is given by: PlayListRatings = \[10, 9.5, 10, 8, 7.5, 5, 10, 10\]

```{python}
PlayListRatings = [10, 9.5, 10, 8, 7.5, 5, 10, 10]

i=0
Rating=PlayListRatings[0]

while(Rating>6):
    print(Rating)
    i=i+1
    Rating=PlayListRatings[i]
    #i=i+1 #Try uncommenting the line and comment the previous i = i + 1, and see the difference, 10 value will get printed twice because when the loop starts it will print Rating and then with PlayListRatings[0], it will again assign the value 10 to Ratings.
```

## Functions

-   Functions take some input then produce some output or change. You can use your own functions or use pythons build in functions.
-   Functions are used to make reusable modules and make the code we run shorter.

### sum()

I.e. the function sum() takes a tuple or list as input and returns the sum of the values

```{python}
ratings = [10,8,5]
S = sum(ratings)
S
```

### sort()

Sort() is a list method.
Methods are similar to functions.Generally **functions** take an input, i.e. a list, they produce a new output and the original input stays unchanged.
If we use the **method** sort, our list will change and no new list will be created.

```{python}
ratings = [10,8,5]

#apply the function sorted
sorted_ratings = sorted(ratings)
sorted_ratings
ratings

#apply the sort method
ratings.sort()
ratings
```

### building functions

-   to build a function we start with the key word: def
-   Follow this by the name of the function, i.e. add1
-   in brackets we add the functions formal parameters, i.e. the input to our function
-   After the colon comes the code block with an indent
-   A variable that is declared inside a function is called a local variable. The parameter only exists within the function (i.e. the point where the function starts and stops).
-   we then return, our output, something

```{python}
#define a function
def add1(a):
    b=a+1
    return b

#call a function
add1(2)
```

Lets now document the function better.

```{python}
#define a function with a documenting string
def add1(a):
    """
    add 1 to a
    """
    b=a+1
    return b

#display the documentation
help(add1)
```

A function can have multiple parameters.

```{python}
#define the mult function, which multiplies two integers
def mult(a,b):
    c=a*b
    return c

mult(3,3)
mult(2,"hello")
```

Functions don't need a return statement.
Practically speaking, if your function has no return statement, you can treat it as if the function returns nothing at all.
The function word_return simply prints the name 'hello'.

```{python}
def word_return():
    print("hello")

word_return()
```

We can define an empty function like this.
pass is simply used to have a empty code block.

```{python}
def NoWork():
    pass

print(NoWork())
```

Functions can perform more than one task.
I.e. the function below prints a statement then returns a value.

```{python}
def add1(a):
    b = a+1
    print(a, "plus 1 equals= ", b)
    return b

add1(2)
```

We can also use loops in functions.
I.e. lets define a function that prints out the values and indexes of a list or tuple.

```{python}
def printStuff(stuff):
    for i,s in enumerate(stuff):
        print("Album", i, "rating is ", s)
        
album_ratings = [10,8,7]
printStuff(album_ratings)
```

We can also loop through elements in a list.

```{python}
def Print(A):
    for a in A:
        print(a+'1')
        
Print(['a','b','c'])
```

Variadic parameters allow us to input a variable number of elements.
Consider the following function; the function has an asterisk on the parameter names.
When we call the function, three parameters are packed into the tuple names.

```{python}
def ArtistNames(*names):
    for i in names:
        print(i)
        
Artists = ["MJ", "AC/DC"]
ArtistNames("MJ", "AC/DC")
```

Similarly, The arguments can also be packed into a dictionary as shown:

```{python}
def printDictionary(**args):
    for key in args:
        print(key + " : " + args[key])

printDictionary(Country='Canada',Province='Ontario',City='Toronto')
```

The scope of a variable is the part of the program where that variable is accessible.
Variables that are defined outside of any function are said to be within the global scope, meaning they can be accessed anywhere after they are defined.
Local variables only exist within the scope of a function.
Variables inside the global scope can have the same name as variables in the local scope with no conflict.

I.e. in the following we can not access the variable internal_var1 outside of the function

```{python}
# Example of global variable
artist = "Michael Jackson"

def printer1(artist):
    internal_var1 = artist
    print(artist, "is an artist")
    
printer1(artist)
```

But we can if we set a variable in a function to a global variable:

```{python}
artist = "Michael Jackson"

def printer(artist):
    global internal_var 
    internal_var= "Whitney Houston"
    print(artist,"is an artist")

printer(artist) 
printer(internal_var)
```

The return() function is particularly useful if you have any IF statements in the function, when you want your output to be dependent on some condition:

```{python}
# Function example
def type_of_album(artist, album, year_released):
    #print(artist, album, year_released)
    if year_released > 1980:
        return "Modern"
    else:
        return "Oldie"
    
x = type_of_album("Michael Jackson", "Thriller", 1980)
print(x)
```

You can set a **default value for arguments** in your function.
For example, in the isGoodRating() function, what if we wanted to create a threshold for what we consider to be a good rating?
Perhaps by default, we should have a default rating of 4:

```{python}
# Example for setting param with default value
def isGoodRating(rating=4): 
    if(rating < 7):
        print("this album sucks it's rating is",rating)      
    else:
        print("this album is good its rating is",rating)

isGoodRating()
```

### Exercises functions

```{python}
def Equation(a,b):
    c = a + b + 2 * a * b - 1
    if(c < 0):
        c = 0 
    else:
        c = 5
    return(c) 

Equation(0,0)
```

```{python}
L=[1,3,2]
sorted(L)
L
```

## Exception handling

-   Make error messages appear when performing "wrong" operations. I.e. if you only can input letters, not numbers.

### The try...except statement

This statement will first attempt to excecute the statement in a try code block but if an error occurs it will kick out and start searching for the except statement that matches the error.
Once it finds the correct except statement to handle the error it will execute that line of code.

Let's try to write an example of code to open a file, however, if the file can not be opened, give an error.

IOError = an error related to a file

```{python}
#| eval: false

try:
    getfile=open("myfile", "r")
    getfile.write("File for exception handling")
    except IOError:
        print("Unable to open or read the data in the file")
```

Now, what to do when we encounter another error?
In the example below we catch an error but the type is not specified.
While this may seem a logical step so the program will catch all errors and not terminate this is not a best practice.
Because this error had no details you might end up spending hours trying to pinpoint and fix the error.

```{python}
#| eval: false

try:
    getfile=open("myfile", "r")
    getfile.write("File for exception handling")
    except IOError:
        print("Unable to open or read the data in the file")
    except:
        print("Some other error occurred")
```

We can also add an else statement to show that our prgram run successfully.

```{python}
#| eval: false

try:
    getfile=open("myfile", "r")
    getfile.write("File for exception handling")
    except IOError:
        print("Unable to open or read the data in the file")
    except:
        print("Some other error occurred")
    else:
        print("The file was written successfully")
```

The last thing to do is close the file by adding the finally statement.

```{python}
#| eval: false

try:
    getfile=open("myfile", "r")
    getfile.write("File for exception handling")
    except IOError:
        print("Unable to open or read the data in the file")
    except:
        print("Some other error occurred")
    else:
        print("The file was written successfully")
    finally:
        getfile.close()
        print("File is now closed")
```

### Exercise exceptions

In this example we are trying to divide a number given by the user, save the outcome in the variable a, and then we would like to print the result of the operation.
When taking user input and dividing a number by it there are a couple of exceptions that can be raised.
For example if we divide by zero.
Try running the following block of code with b as a number.
An exception will only be raised if b is zero.

```{python}
#| eval: false
a = 1

try:
    b = int(input("Please enter a number to divide a"))
    a=a/b
    print("Success a=", a)
except:
    print("There was an error")
```

Now, lets add a more specific error message:

```{python}
#| eval: false

a = 1

try:
    b = int(input("Please enter a number to divide a"))
    a = a/b
    print("Success a=",a)
except ZeroDivisionError:
    print("The number you provided cant divide 1 because it is 0")
except ValueError:
    print("You did not provide a number")
except:
    print("Something went wrong")
```

## Objects and classes

Python has many different data types, such as integers, floats, strings, lists, dictionaries, booleanes.
In python , each of these is an object.
An object consists of the following:

-   a type
-   an internal data representation (a blueprint)
-   a set of procedures for interacting with an object (methods)

An Object is an instance of a particular type.
I.e. every time we create an integer, we are creating an instance of type integer, or we are creating an integer object.

We can find out the type of an object by using the `type()` command.

```{python}
type(["a"])
```

### Types methods

Types methods are functions that every instance of a class or type provides.
Its how we interact with an object.
For example sorting is a method that interacts with the data of an object.

I.e. Consider the list ratings, the data is a series of numbers contained within the list.
The method sort will change the data within the object.
We call the method by adding a period at the end of an object followed by the methods name

```{python}
Ratings = [10,9,6,4,5,8]
Ratings.sort()
Ratings
```

Let's also import a library to plot data:

```{python}
# | warning: false
# Import the library
import matplotlib.pyplot as plt
%matplotlib inline  
```

#code below doesn't work in r bc specific language #%matplotlib inline

### Creating your own types

For example, lets create a class type, which has data attributes and methods.
I.e. the \*class circle\*\* contains the data attributed radius and color while the *class rectangle* contains the attributed width, height and color.

Let's create the class Circle by using the class definition, followed by the name of the class (here: circle) and the class parent.
Next, we initialize each instance of the class with data attributes.

The function **init** is a constructor used to initialize data attributes, its a special function that tells python that we are making a new class.
The radius and color parameters are used to initialize the radius and color data attributes of the class instance.
The self parameter refers to the newly created instance of the class.
The parameters, radius, and color can be used in the constructors body to access the values passed to the class constructor when the class is constructed.

```{python}
#define the class Circle
class Circle(object):
    #initialize each class with data attributes
    def __init__(self, radius, color):
        self.radius=radius;
        self.color=color;
```

After we have created the class, we can create an object of the class circle:

```{python}
#create a circle object
RedCircle = Circle(10,"red")

#we can check the color attribute with
RedCircle.color

#change the color attribute
RedCircle.color="blue"
RedCircle.color

#return a dict of the attributes in an object
RedCircle.__dict__
```

### Create Methods for our own functions

Methods give you a way to change or interact with the object; they are functions that interact with objects.
For example, let's say we would like to increase the radius of a circle by a specified amount.
For this, we add a method, add_radius, to our class.

```{python}
#define the class
class Circle(object):
    #initialize each class with data attributes
    def __init__(self, radius, color):
        self.radius=radius;
        self.color=color;
    def add_radius(self,r):
        self.radius=self.radius + r
```

```{python}
#create a new object
C1 = Circle(2,"red")

#check the radius
C1.radius

#change the radius
C1.add_radius(8)
C1.radius
```

### The dir function

The dir function is useful for obtaining the list of data attributes and methods associated with a class.
The object you're interested in is passed as an argument.
The return value is a list of the objects data attributes.
The attribute surrounded by underscores are for internal use, and you shouldn't have to worry about them.

```{python}
dir(Circle)
```

### Exercises objects and classes

### Create a class circle with a method to draw the circle

```{python}
class Circle(object):
    #Instructor, including defaults
    def __init__(self, radius=3, color="blue"):
        self.radius=radius
        self.color=color
    #add method1
    def add_radius(self,r):
        self.radius=self.radius+r
        return(self.radius)
    #add method2
    def drawCircle(self):
        plt.gca().add_patch(plt.Circle((0, 0), radius=self.radius, fc=self.color))
        plt.axis('scaled')
        plt.show()  
```

```{python}
#create an object of the class circle
RedCircle = Circle(10, "red")

#find out the methods we can use with the object redcircle
dir(RedCircle)

# Print the object attribute radius
RedCircle.radius

# Set the object attribute radius
RedCircle.radius = 1
RedCircle.radius

# Call the method drawCircle
RedCircle.drawCircle()
```

### Text analysis

You have been recruited by your friend, a linguistics enthusiast, to create a utility tool that can perform analysis on a given piece of text.
Complete the class 'analysedText' with the following methods -

-   Constructor (**init**) - This method should take the argument text, make it lower case, and remove all punctuation. Assume only the following punctuation is used: period (.), exclamation mark (!), comma (,) and question mark (?). Assign this newly formatted text to a new attribute called fmtText.
-   freqAll - This method should create and return dictionary of all unique words in the text, along with the number of times they occur in the text. Each key in the dictionary should be the unique word appearing in the text and the associated value should be the number of times it occurs in the text. Create this dictionary from the fmtText attribute.
-   freqOf - This method should take a word as an argument and return the number of occurrences of that word in fmtText.

```{python}
class analysedText(object):
    
    def __init__ (self, text):
        # remove punctuation and make lower case
        self.fmtText = text.replace('.','').replace('!','').replace('?','').replace(',','').lower()
    def freqAll(self):        
        # split text into words
        wordList = self.fmtText.split(' ')
        # Create dictionary
        freqMap = {}
        for word in set(wordList): # use set to remove duplicates in list
            freqMap[word] = wordList.count(word)
        return freqMap
    
    def freqOf(self,word):
        # get frequency map
        freqDict = self.freqAll()
        if word in freqDict:
            return freqDict[word]
        else:
            return 0
```

Test function individually:

```{python}
samplePassage = analysedText("Lorem ipsum dolor! diam amet, consetetur Lorem magna. sed diam nonumy eirmod tempor. diam et labore? et diam magna. et diam amet.")

#edit text
samplePassage.fmtText
```

```{python}
#count occurrence of words
wordMap = samplePassage.freqAll()
wordMap
```

```{python}
#count frequency of individual word
samplePassage.freqOf("dolor")
```

test run:

```{python}
import sys

sampleMap = {'eirmod': 1,'sed': 1, 'amet': 2, 'diam': 5, 'consetetur': 1, 'labore': 1, 'tempor': 1, 'dolor': 1, 'magna': 2, 'et': 3, 'nonumy': 1, 'ipsum': 1, 'lorem': 2}

def testMsg(passed):
    if passed:
       return 'Test Passed'
    else :
       return 'Test Failed'

print("Constructor: ")
try:
    samplePassage = analysedText("Lorem ipsum dolor! diam amet, consetetur Lorem magna. sed diam nonumy eirmod tempor. diam et labore? et diam magna. et diam amet.")
    print(testMsg(samplePassage.fmtText == "lorem ipsum dolor diam amet consetetur lorem magna sed diam nonumy eirmod tempor diam et labore et diam magna et diam amet"))
except:
    print("Error detected. Recheck your function " )
print("freqAll: ")
try:
    wordMap = samplePassage.freqAll()
    print(testMsg(wordMap==sampleMap))
except:
    print("Error detected. Recheck your function " )
print("freqOf: ")
try:
    passed = True
    for word in sampleMap:
        if samplePassage.freqOf(word) != sampleMap[word]:
            passed = False
            break
    print(testMsg(passed))
    
except:
    print("Error detected. Recheck your function  " )
    
```
