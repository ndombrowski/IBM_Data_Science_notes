{"title":"Python Basics","markdown":{"headingText":"Python Basics","containsRefs":false,"markdown":"\n## Types\n\n- A type is how Python represents different types of data\n- Types can be types of the following.:\n  - Integers, like 11 (an example of the datatype **int**, integer)\n  - Real numbers, like 21.21 (an example of the datatype  **float**)\n  - Words, like \"Hello, world\" (an example of the datatype  **str**, string)\n- We can identify the type of our data with the `type()` command\n\n\n```\ntype(11)\ntype(2.1)\ntype(\"Hello\")\n```\n\n### Integers\n\n- int, i.e. 1,2,3\n- can be negative or positive\n- there is a finite, but large range of integers\n\n\n### Floats\n\n- Include integers but also numbers in between integers, i.e. 0.3 or 0.33\n- There is limit, but it is quite small\n\n\n### Boolean\n\n- Boolean can take on two values: True and False (beware, first letter is upper case)\n- `int(True)` gives 1\n- `int(False)` gives 0\n\n\n### Changing type\n\n- We can change the type of our data\n- this is also called type casting\n- Convert an int to a float: `float(2)` gives 2.0\n- Convert an integer to a float: \n  - `int(1.1)` gives 1\n  - However, **beware**  we loose some information here\n  - also `int(3.99)` gives 3 , so , the conversion truncates towards zero, i.e.you just get rid of the numbers after the decimal place\n- convert an int to a string: `str(1)` becomes \"1\"\n\n\n## Expressions and variables\n\n### Expressions\n\n- Expressions: a type of operation the computers perform & operations that python performs, i.e. `32 + 10` results in 42. The numbers in the expression are called **operands** and the math symbols are called **operators**. \n- The symbol `\\\\` means integer symbol and results in results being rounded down. I.e. `11\\\\2` becomes 5\n\n\n### Variables\n\n- We use variables to store values, i.e. `my_variable=1`. Here, the value of 1 is assigned to the variable my_variable. By typing the exact name of the variable, we can use it elsewhere in the code.\n- If we do `my_variable=10`, then we assign a new value to my_variable and the old value is lost\n- We can store also the results of expressions in a value and perform operations on variables\n- Use meaningful variable names\n  - commonly an underscore is used to mark the beginning of a new word, i.e. total_min\n\n\n## Exercise:\n\nCheck the lab **PY0101EN-1-1-Write_your_first_python_code.ipynb**\n\nIn addition to writing code, note that it's always a good idea to add comments to your code. It will help others understand what you were trying to accomplish (the reason why you wrote a given snippet of code). Not only does this help other people understand your code, it can also serve as a reminder to you when you come back to it weeks or months later.\n\nTo write comments in Python, use the number symbol # before writing your comment. When you run your code, Python will ignore everything past the # on a given line. After executing the cell above, you should notice that `Try your first Python output` a string did not appear in the output, because it was a comment (and thus ignored by Python).\n\n```{python}\n# Try your first Python output\nprint('Hello, Python!')\n```\n\n\n###  What version of Python are we using?\n\nThere are two popular versions of the Python programming language in use today: Python 2 and Python 3. The Python community has decided to move on from Python 2 to Python 3, and many popular libraries have announced that they will no longer support Python 2.\n\nSince Python 3 is the future, in this course we will be using it exclusively. How do we know that our notebook is executed by a Python 3 runtime? We can look in the top-right hand corner of this notebook and see \"Python 3\".\n\nWe can also ask Python directly and obtain a detailed answer. Try executing the following code:\n\n```{python}\n# Check the Python Version\nimport sys\nprint(sys.version)\n```\n\n**sys** is a built-in module that contains many system-specific parameters and functions, including the Python version in use. Before using it, we must explictly import it.\n\n\n### Errors in Python\n\nEveryone makes mistakes. For many types of mistakes, Python will tell you that you have made a mistake by giving you an error message. It is important to read error messages carefully to really understand where you made a mistake and how you may go about correcting it.\n\nFor example, if you spell print as frint, Python will display an error message. Give it a try:\n\n```\n# Try your first Python output\nfrint('Hello, Python!')\n```\n\nThe error message tells you:\n\nwhere the error occurred (more useful in large notebook cells or scripts), and\nwhat kind of error it was (NameError)\nHere, Python attempted to run the function frint, but could not determine what frint is since it's not a built-in function and it has not been previously defined by us either.\n\nYou'll notice that if we make a different type of mistake, by forgetting to close the string, we'll obtain a different error (i.e., a SyntaxError). Try it below:\n\n```\n# Try your first Python output\nprint(\"Hello, Python!)\n```\n\n\n### Does Python know about your error before it runs your code?\n\nPython is what is called an interpreted language. Compiled languages examine your entire program at compile time, and are able to warn you about a whole class of errors prior to execution. In contrast, Python interprets your script line by line as it executes it. Python will stop executing the entire program when it encounters an error (unless the error is expected and handled by the programmer, a more advanced subject that we'll cover later on in this course).\n\nTry to run the code in the cell below and see what happens:\n\n```\nprint(\"This will be printed\")\nfrint(\"This will cause an error\")\nprint(\"This will NOT be printed\")\n```\n\n\n### learn more about the specifics of floats for your runtime environment\n\n\n```{python}\nsys.float_info\n```\n\n\n## String operations\n\n- A sequence of characters, which are contained withing two quotes. I.e. \"Hello world\" or 'Hello world'\n- A string can be spaces or digits, i.e. \"1 2 3\"\n- A string can also be special characters\n- A string can be bound in a variable and each part can be accessed by its index, i.e. \"Hello world\" would have the indexes 012345(space)678910. We can for example access the H with `variable[0]`\n- We can also use negative indexing and the last index is given with negative 1, i.e.  -11-10-9-8-7-6(space)-5-4-3-2-1. Here, `variable[-1]0` gives d\n- We can also perform a sequence operation\"\n  - variable[0-3] gives Hell\n  - variable[::2] gives every 2nd variable\n  - variable[0:5:2]: we perform slicing and return every 2nd variable up to index 4\n  - len(variable) gives the length of the string\n  - We can concatenate or combine strings, i.e. `variable + \"everyone\"`\n  - We can replicate values of a string, i.e. `3* variable`\n- String are immutable, i.e this does not work \n- Tip]: When taking the slice, the first number means the index (start at 0), and the second number means the length from the index to the last element you want (start at 1)\n\n```\nname = \"hello world\"\nname[0] = \"J\"\n```\n\nbut we can create a new string like this:\n\n```\nname = name + \"everyone\"\n```\n\n- Backslashes, '\\' indicate the beginning of escape sequences. \n  - Escape sequences = strings that might be difficult to input\n  - i.e. ```print(\"Hello \\n world\")```, here ```\\n``` represents a new line\n  - '\\t' represents a tab\n  - If we want to use an actual backslash in the string we do it like this `Hello \\\\ world`\n  - `print(r\"Hello \\ World\")` is an alternative way to use the literal backslash\n\n\n## String methods\n\n- Strings are sequences and as such have apply methods that work on list and tubles = **Sequence methods**\n- Strings also have a set of methods that just work on strings: **String methods**\n- When we apply a method to a string A, we get a new string B\n- Lets start with defining a string with mixed cases\n\n```\nA = \"Hello World\"\n```\n\n- the method 'upper()' converts lower case to upper case characters, HELLO WORLD\n\n```\nB = A.upper()\n```\n\n- the method 'replace()' changes part of the string to another ; Hello People\n\n```\nB = A.replace(\"World\", \"People\")\n```\n\n- the 'find()' method finds substrings and uses the argument which substring we want to find; i.e. the output is the first index of the sequence; i.e. 2. If the sub-string is not in the string then the output is a negative one. For example, the string 'Jasdfasdasdf' is not a substring:\n\n```\nB = A.find(ll)\n```\n\n\n### Excercise\n\n```{python}\nx=1/1\ntype(x)\n```\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Week1-Basics.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.168","knitr":{"opts_chunk":{"collapse":true}},"space-before-code-block":"10pt","space-after-code-block":"8pt","linespacing":"22pt plus2pt","frontmatter-linespacing":"17pt plus1pt minus1pt","title-size":"22pt","title-size-linespacing":"28pt","gap-before-crest":"25mm","gap-after-crest":"25mm","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"pdflatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","highlight-style":"github","output-file":"Week1-Basics.pdf"},"language":{},"metadata":{"block-headings":true,"knitr":{"opts_chunk":{"collapse":true}},"space-before-code-block":"10pt","space-after-code-block":"8pt","linespacing":"22pt plus2pt","frontmatter-linespacing":"17pt plus1pt minus1pt","title-size":"22pt","title-size-linespacing":"28pt","gap-before-crest":"25mm","gap-after-crest":"25mm","documentclass":"scrreprt","geometry":["heightrounded"],"pandoc_args":"--listings","header-includes":["\\usepackage{fvextra} \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}"],"colorlinks":true,"code-block-bg":"D3D3D3"},"extensions":{"book":{}}}}}