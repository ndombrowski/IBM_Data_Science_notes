{"title":"Python: Lists and Tuples","markdown":{"headingText":"Python: Lists and Tuples","containsRefs":false,"markdown":"\n= Compound data types\n\n## Tuples\n\n- An ordered sequence \n- Comma separated elements within parentheses\n\n```{python}\nRatings = (10,9,6,4,10,8,8,6)\nRatings\n```\n\n- Strings, integers and floats can all be contained in a tuple\n\n```{python}\ntuple1 = ('disco', 10, 1.2)\ntuple1\n```\n\n- We can access each element of a tuple via an **index**\n\n### Indexing tuples\n\n```{python}\n#access the first element\ntuple1[0]\n\n#access the third element\ntuple1[2]\n\n#access the last element\ntuple1[-1]\n```\n\n### Adding tuples\n\n- We can combine tuples, by adding them \n\n```{python}\ntuple2 =  tuple1 + (\"hard rock\", 10)\ntuple2\n```\n\n### Slice tuples\n\n- If we want multiple elements from a tuple, we can slice tuples\n\n\n```{python}\n#get the first 3 elements, the last index is on larger than the index we want\ntuple2[0:3]\n```\n\n### Get the length of tuples\n\n- We get the length of a tuple with the **len()** command\n\n```{python}\nlen(tuple2)\n```\n\n### Tuples are immutable\n\n\n- Tuples are immutable = we can not change them but we can assign a different tuple to the ratings variable. So if we want to manipulate a tuple we have to create a new tuple instead\n\n```{python}\n#store ratings in a new variable\nRatings1 = Ratings\n\n#we can not use Ratings[2]=2 to change the 2nd element of a tuple\n#but we can change the contents of our variable with:\nRatings = (1,4,2)\n\n#we can also sort a tuple and store it in a new variable\nRatings_sorted = sorted(Ratings)\nRatings_sorted\n```\n\n### Nesting tuples\n\n- A tuple can be **nested** = i.e. contain other tuples\n\n```{python}\nNT = (1,2,(\"pop\", \"rock\"), (3,4), (\"disco\",(1,2)))\nNT\n\n#access the second element\nNT[2]\n\n#access the 2nd element inside it\nNT[2][1]\n```\n\n\n## Lists\n\n- Ordered sequences\n- Represented by square brackets\n- Lists are mutable\n- Otherwise shares similar respects than tuples (i.e. using an index, slicing, nesting, combining them by adding)\n\n\n```{python}\nL = [\"Michael Jackson\", 10.1, 1982]\nL\n```\n\n### Extending lists\n\n- We can extend list, i.e. modify it, using the **extend()** function\n\n```{python}\nL = [\"Michael Jackson\", 10.1, 1982]\nL.extend([\"pop\",10])\nL\n```\n\n### Appending lists\n\n- We can also append a list, i.e. we add only one element to a list\n\n```{python}\nL = [\"Michael Jackson\", 10.1, 1982]\nL.append([\"pop\",10])\nL\n```\n\n### Extending lists\n\n- **extend()** adds two new elements to the list\n\n```{python}\nL = [\"Michael Jackson\", 10.1, 1982]\nL.extend([\"pop\",10])\nL\n```\n\n### Lists are mutable\n\n- We can change elements in lists\n\n```{python}\n#change the first element in the list\nL = [\"Michael Jackson\", 10.1, 1982]\nL[0] = \"hard rock\"\nL\n```\n\n### Delete elements in lists\n\n- We can delete an element in a list with the **del()** command\n\n```{python}\n#delete the first element in the list\nL = [\"Michael Jackson\", 10.1, 1982]\ndel(L[0])\nL\n```\n\n### Converting strings to lists\n\n- We can convert a string to a list using **split()**\n\n```{python}\n#normally split, splits strings by the space\n\"hard rock\".split()\n\n#we can also use a specific character, i.e. a delimiter, which we add as an argument\n\"A,B,C,D\".split(\",\")\n```\n\n### Aliasing\n\n- **Aliasing** = Multiple names referring to the same object\n\n```{python}\n#make an alias\nA = [\"hard rock\", 10, 1.2]\nB = A\n\n#if we now change A, B change as well!\nA[0] = \"banana\"\nA\nB\n```\n\n### Cloning\n\n- We can **clone** list A using the following syntax\n\n```{python}\n#clone a list\nA = [\"hard rock\", 10, 1.2]\nB = A[:]\n\n#if we now change A, B will not change\nA[0] = \"banana\"\nA\nB\n```\n\n\n## Exercise A\n\nSee Module 2_PY0101EN-2-2-Lists.ipynb\n\n\n\n## Dictionaries\n\n- Dictionaries = A type of collection in python\n- Consists of keys and values\n    - Key = analogous to the index. They are like addresses but don't have to be integers and usually are characters. The are immutable and unique\n    - Values are similar to the element in a list and contain information. The values can be immutable, mutable and duplicates.\n- Dictionaries are generated using curly brackets and the keys are the first elements. Each key is followed by a value followed by a colon. Each key/value pair is separated by a comma\n\n### Generating a dictionary\n\n```{python}\ndic1 = {\"key1\":1, \"key2\":\"2\", \"key3\":[3,3,3], \"key4\":(4,4,4), \"key5\":5}\ndic1\n```\n\n- The key is used to look up the value\n\n```{python}\ndic1[\"key2\"]\n```\n\n### Adding new elements to dictionaries\n\n```{python}\ndic1[\"key6\"]=\"hello\"\ndic1\n```\n\n### Delete an entry in a dictionary\n\n```{python}\ndel(dic1[\"key6\"])\ndic1\n```\n\n### Verify if an element is in the dictionary using the in command\n\n```{python}\n\"key2\" in dic1\n\"key12\" in dic1\n```\n\n### Print all the keys in a dictionary via the keys() command\n\n```{python}\ndic1.keys()\n```\n\n### Print all the values in a dictionary via the values() command\n\n```{python}\ndic1.values()\n```\n\n\n### Exercise\n\nSee: Module 2_PY0101EN-2-4-Dictionaries.ipynb\n\n## Sets\n\n- A type of collection: like with lists and tuples, we can input different python types \n- Unlike lists and tuples they are unordered, this means that sets do not record element positions\n- Sets only have unique elements: there is only one of a particular element in a set\n- To define a set, we use curly brackets and place the elements of a set inside\n\n### Making a set\n\n```{python}\n#generate a set with duplicate items\nset1 = {\"pop\", \"rock\", \"soul\", \"hard rock\", \"rock\"}\n\n#view set: duplicate items are not present when the set is created\nset1\n```\n\n### Converting a list to a set with the function set()\n\n- This process is called type casting\n\n```{python}\n#create a list\nalbum_list = [\"Jackson\", \"Thriller\", \"Thriller\", 1982]\nalbum_list\n\n#convert to a set (notice the lack of duplicated elements)\nalbum_set = set(album_list)\nalbum_set\n```\n\n### Set Operations\n\n- Set operations can be used to change the set\n\n### Add items with the add() method\n\n```{python}\n#create a set\nA = {\"Thriller\", \"Back in black\", \"AC/DC\"}\n\n#add an item\nA.add(\"NSYNC\")\nA\n\n#add the same item twice (and nothing will happen)\nA.add(\"NSYNC\")\nA\n```\n\n\n### Remove items from a set\n\n```{python}\n#remove an item\nA.remove(\"NSYNC\")\nA\n```\n\n### Check if elements are in a set\n\n```{python}\n\"AC/DC\" in A\n\"Who\" in A\n```\n\n\n### Mathematical operations\n\n```{python}\n#define two sets\nset1 = {\"Back in black\", \"AC/DC\", \"Thriller\"}\nset2 = {\"AC/DC\", \"Back in black\", \"Dark side of the moon\"}\nset3 = {\"Back in black\", \"AC/DC\"}\n\n#define the intersection with `&`\nset3 = set1 & set2\nset3\n\n#create the union of both sets, ie. all the elements found in both sets\nset1.union(set2)\n\n#check if a set is a subset of another\nset3.issubset(set1)\n\n#find all the elements that are only contained in a set using the difference method\nset1.difference(set3)\n\n# check if a set is a superset or subset of another set\nset1.issuperset(set3)\nset3.issuperset(set1)\n```\n\n```{python}\n#define two sets with numbers\nA = [1, 2, 2, 1]\nA\n\nB = set([1, 2, 2, 1])\nB\n\n#compare the two sets\nsum(A) == sum(B)\n\n#to explain the result:\nprint(\"the sum of A is:\", sum(A))\nprint(\"the sum of B is:\", sum(B))\n```\n\n\n## Exercise\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Week2-Lists_Tuples.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.168","knitr":{"opts_chunk":{"collapse":true}},"space-before-code-block":"10pt","space-after-code-block":"8pt","linespacing":"22pt plus2pt","frontmatter-linespacing":"17pt plus1pt minus1pt","title-size":"22pt","title-size-linespacing":"28pt","gap-before-crest":"25mm","gap-after-crest":"25mm","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"pdflatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","highlight-style":"github","output-file":"Week2-Lists_Tuples.pdf"},"language":{},"metadata":{"block-headings":true,"knitr":{"opts_chunk":{"collapse":true}},"space-before-code-block":"10pt","space-after-code-block":"8pt","linespacing":"22pt plus2pt","frontmatter-linespacing":"17pt plus1pt minus1pt","title-size":"22pt","title-size-linespacing":"28pt","gap-before-crest":"25mm","gap-after-crest":"25mm","documentclass":"scrreprt","geometry":["heightrounded"],"pandoc_args":"--listings","header-includes":["\\usepackage{fvextra} \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}"],"colorlinks":true,"code-block-bg":"D3D3D3"},"extensions":{"book":{}}}}}