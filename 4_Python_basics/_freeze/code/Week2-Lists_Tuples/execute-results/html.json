{
  "hash": "5a8131d7d3fc0b9c6f4a7618f6a99aa2",
  "result": {
    "markdown": "# Python: Lists and Tuples\n\n= Compound data types\n\n## Tuples\n\n- An ordered sequence \n- Comma separated elements within parentheses\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nRatings = (10,9,6,4,10,8,8,6)\nRatings\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n(10, 9, 6, 4, 10, 8, 8, 6)\n```\n:::\n:::\n\n\n- Strings, integers and floats can all be contained in a tuple\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntuple1 = ('disco', 10, 1.2)\ntuple1\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n('disco', 10, 1.2)\n```\n:::\n:::\n\n\n- We can access each element of a tuple via an **index**\n\n### Indexing tuples\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#access the first element\ntuple1[0]\n\n#access the third element\ntuple1[2]\n\n#access the last element\ntuple1[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n1.2\n```\n:::\n:::\n\n\n### Adding tuples\n\n- We can combine tuples, by adding them \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntuple2 =  tuple1 + (\"hard rock\", 10)\ntuple2\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n('disco', 10, 1.2, 'hard rock', 10)\n```\n:::\n:::\n\n\n### Slice tuples\n\n- If we want multiple elements from a tuple, we can slice tuples\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#get the first 3 elements, the last index is on larger than the index we want\ntuple2[0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n('disco', 10, 1.2)\n```\n:::\n:::\n\n\n### Get the length of tuples\n\n- We get the length of a tuple with the **len()** command\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nlen(tuple2)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n5\n```\n:::\n:::\n\n\n### Tuples are immutable\n\n\n- Tuples are immutable = we can not change them but we can assign a different tuple to the ratings variable. So if we want to manipulate a tuple we have to create a new tuple instead\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n#store ratings in a new variable\nRatings1 = Ratings\n\n#we can not use Ratings[2]=2 to change the 2nd element of a tuple\n#but we can change the contents of our variable with:\nRatings = (1,4,2)\n\n#we can also sort a tuple and store it in a new variable\nRatings_sorted = sorted(Ratings)\nRatings_sorted\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n[1, 2, 4]\n```\n:::\n:::\n\n\n### Nesting tuples\n\n- A tuple can be **nested** = i.e. contain other tuples\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nNT = (1,2,(\"pop\", \"rock\"), (3,4), (\"disco\",(1,2)))\nNT\n\n#access the second element\nNT[2]\n\n#access the 2nd element inside it\nNT[2][1]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'rock'\n```\n:::\n:::\n\n\n## Lists\n\n- Ordered sequences\n- Represented by square brackets\n- Lists are mutable\n- Otherwise shares similar respects than tuples (i.e. using an index, slicing, nesting, combining them by adding)\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nL = [\"Michael Jackson\", 10.1, 1982]\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n['Michael Jackson', 10.1, 1982]\n```\n:::\n:::\n\n\n### Extending lists\n\n- We can extend list, i.e. modify it, using the **extend()** function\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nL = [\"Michael Jackson\", 10.1, 1982]\nL.extend([\"pop\",10])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n['Michael Jackson', 10.1, 1982, 'pop', 10]\n```\n:::\n:::\n\n\n### Appending lists\n\n- We can also append a list, i.e. we add only one element to a list\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nL = [\"Michael Jackson\", 10.1, 1982]\nL.append([\"pop\",10])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n['Michael Jackson', 10.1, 1982, ['pop', 10]]\n```\n:::\n:::\n\n\n### Extending lists\n\n- **extend()** adds two new elements to the list\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nL = [\"Michael Jackson\", 10.1, 1982]\nL.extend([\"pop\",10])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n['Michael Jackson', 10.1, 1982, 'pop', 10]\n```\n:::\n:::\n\n\n### Lists are mutable\n\n- We can change elements in lists\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n#change the first element in the list\nL = [\"Michael Jackson\", 10.1, 1982]\nL[0] = \"hard rock\"\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n['hard rock', 10.1, 1982]\n```\n:::\n:::\n\n\n### Delete elements in lists\n\n- We can delete an element in a list with the **del()** command\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n#delete the first element in the list\nL = [\"Michael Jackson\", 10.1, 1982]\ndel(L[0])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n[10.1, 1982]\n```\n:::\n:::\n\n\n### Converting strings to lists\n\n- We can convert a string to a list using **split()**\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n#normally split, splits strings by the space\n\"hard rock\".split()\n\n#we can also use a specific character, i.e. a delimiter, which we add as an argument\n\"A,B,C,D\".split(\",\")\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n['A', 'B', 'C', 'D']\n```\n:::\n:::\n\n\n### Aliasing\n\n- **Aliasing** = Multiple names referring to the same object\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n#make an alias\nA = [\"hard rock\", 10, 1.2]\nB = A\n\n#if we now change A, B change as well!\nA[0] = \"banana\"\nA\nB\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n['banana', 10, 1.2]\n```\n:::\n:::\n\n\n### Cloning\n\n- We can **clone** list A using the following syntax\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n#clone a list\nA = [\"hard rock\", 10, 1.2]\nB = A[:]\n\n#if we now change A, B will not change\nA[0] = \"banana\"\nA\nB\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n['hard rock', 10, 1.2]\n```\n:::\n:::\n\n\n## Exercise A\n\nSee Module 2_PY0101EN-2-2-Lists.ipynb\n\n\n\n## Dictionaries\n\n- Dictionaries = A type of collection in python\n- Consists of keys and values\n    - Key = analogous to the index. They are like addresses but don't have to be integers and usually are characters. The are immutable and unique\n    - Values are similar to the element in a list and contain information. The values can be immutable, mutable and duplicates.\n- Dictionaries are generated using curly brackets and the keys are the first elements. Each key is followed by a value followed by a colon. Each key/value pair is separated by a comma\n\n### Generating a dictionary\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndic1 = {\"key1\":1, \"key2\":\"2\", \"key3\":[3,3,3], \"key4\":(4,4,4), \"key5\":5}\ndic1\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n{'key1': 1, 'key2': '2', 'key3': [3, 3, 3], 'key4': (4, 4, 4), 'key5': 5}\n```\n:::\n:::\n\n\n- The key is used to look up the value\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndic1[\"key2\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'2'\n```\n:::\n:::\n\n\n### Adding new elements to dictionaries\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndic1[\"key6\"]=\"hello\"\ndic1\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n{'key1': 1,\n 'key2': '2',\n 'key3': [3, 3, 3],\n 'key4': (4, 4, 4),\n 'key5': 5,\n 'key6': 'hello'}\n```\n:::\n:::\n\n\n### Delete an entry in a dictionary\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndel(dic1[\"key6\"])\ndic1\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n{'key1': 1, 'key2': '2', 'key3': [3, 3, 3], 'key4': (4, 4, 4), 'key5': 5}\n```\n:::\n:::\n\n\n### Verify if an element is in the dictionary using the in command\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n\"key2\" in dic1\n\"key12\" in dic1\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nFalse\n```\n:::\n:::\n\n\n### Print all the keys in a dictionary via the keys() command\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndic1.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\ndict_keys(['key1', 'key2', 'key3', 'key4', 'key5'])\n```\n:::\n:::\n\n\n### Print all the values in a dictionary via the values() command\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndic1.values()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\ndict_values([1, '2', [3, 3, 3], (4, 4, 4), 5])\n```\n:::\n:::\n\n\n### Exercise\n\nSee: Module 2_PY0101EN-2-4-Dictionaries.ipynb\n\n## Sets\n\n- A type of collection: like with lists and tuples, we can input different python types \n- Unlike lists and tuples they are unordered, this means that sets do not record element positions\n- Sets only have unique elements: there is only one of a particular element in a set\n- To define a set, we use curly brackets and place the elements of a set inside\n\n### Making a set\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n#generate a set with duplicate items\nset1 = {\"pop\", \"rock\", \"soul\", \"hard rock\", \"rock\"}\n\n#view set: duplicate items are not present when the set is created\nset1\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n{'hard rock', 'pop', 'rock', 'soul'}\n```\n:::\n:::\n\n\n### Converting a list to a set with the function set()\n\n- This process is called type casting\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n#create a list\nalbum_list = [\"Jackson\", \"Thriller\", \"Thriller\", 1982]\nalbum_list\n\n#convert to a set (notice the lack of duplicated elements)\nalbum_set = set(album_list)\nalbum_set\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n{1982, 'Jackson', 'Thriller'}\n```\n:::\n:::\n\n\n### Set Operations\n\n- Set operations can be used to change the set\n\n### Add items with the add() method\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n#create a set\nA = {\"Thriller\", \"Back in black\", \"AC/DC\"}\n\n#add an item\nA.add(\"NSYNC\")\nA\n\n#add the same item twice (and nothing will happen)\nA.add(\"NSYNC\")\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n{'AC/DC', 'Back in black', 'NSYNC', 'Thriller'}\n```\n:::\n:::\n\n\n### Remove items from a set\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n#remove an item\nA.remove(\"NSYNC\")\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n{'AC/DC', 'Back in black', 'Thriller'}\n```\n:::\n:::\n\n\n### Check if elements are in a set\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n\"AC/DC\" in A\n\"Who\" in A\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nFalse\n```\n:::\n:::\n\n\n### Mathematical operations\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n#define two sets\nset1 = {\"Back in black\", \"AC/DC\", \"Thriller\"}\nset2 = {\"AC/DC\", \"Back in black\", \"Dark side of the moon\"}\nset3 = {\"Back in black\", \"AC/DC\"}\n\n#define the intersection with `&`\nset3 = set1 & set2\nset3\n\n#create the union of both sets, ie. all the elements found in both sets\nset1.union(set2)\n\n#check if a set is a subset of another\nset3.issubset(set1)\n\n#find all the elements that are only contained in a set using the difference method\nset1.difference(set3)\n\n# check if a set is a superset or subset of another set\nset1.issuperset(set3)\nset3.issuperset(set1)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n#define two sets with numbers\nA = [1, 2, 2, 1]\nA\n\nB = set([1, 2, 2, 1])\nB\n\n#compare the two sets\nsum(A) == sum(B)\n\n#to explain the result:\nprint(\"the sum of A is:\", sum(A))\nprint(\"the sum of B is:\", sum(B))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe sum of A is: 6\nthe sum of B is: 3\n```\n:::\n:::\n\n\n## Exercise\n\n",
    "supporting": [
      "Week2-Lists_Tuples_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}