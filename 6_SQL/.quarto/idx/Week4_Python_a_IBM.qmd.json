{"title":"SQL and python","markdown":{"headingText":"SQL and python","containsRefs":false,"markdown":"\n## Access databases via python\n\n- Python database api (DB-API) to access relational databases\n- Useful interfaces via the jupyter notebooks; a open-source web-application\n- Accessing databases using python: **user <-> jupyter notebook + python programs <-DP API calls to connect to a adtabase-> DBMS** (Database Management Systems)\n- AQL API: consists of library function calls as application programming interface (API) for the dbms\n  - We begin with API calls that connect to a db via connect\n  - We then send a SQL statement via the API to the DBMS\n  - execute\n  - status_check\n\n\n## Writting code via a DBI-API\n\n- dB API calls: Pythons standard API for accessing relational databases\n- Connection objects: Are used to connect to a database and manage transactions\n- Cursor objects: used to run queries; allows to scroll through the results set and retrieve results\n- Connection methods\n  - .cursor()\n  - .commit()\n  - .rollback()\n  - .close()\n- Cursor methods\n  - .callproc()\n  - .execute()\n  - .fetchall()\n- Database cursor:  a control structure that enables traversal over the records in a database. It behaves like a file name or file handle in a programming language.\n- Example\n\n```\n#import database module with \nfrom dbmodule import connect\n\n#create connection object\nConnection = connect('databasename', 'username', 'psswd')\n\n#create a cursor object (we need the cursor to run queries\nCursor = Connection.cursor())\n\n#run queries\nCursor.execute('select * from mytable')\n\n#fetch the results of the query\nResults = cursor.fetchall()\n\n#free resources by closing the connection\nCursor.close()\nConnection.close()\n```\n\n\n## Connecting to a database using ibm_db API\n\n- ibm_db: API that provides useful python functions for accessing and manipulating data in an IBM data service database\n- Uses the IBM Data service driver for ODBC and CLI APIs to connect to IBM DB and Informix\n\n0. Go to your IBM Cloud Resources dashboard (or click on IBM Cloud in the top left corner):https://cloud.ibm.com/resources\n1. Locate and click on your Db2 service listed under Services.\n2. Click on Service Credentials in the left menu\n3. Click on the button to create New credential\n4. In the prompt that comes up click the “Add” button in the bottom right:\n5. Check the box to View credentials\n6. Copy and save the credentials making a note of the following:\n\n  - port is the database port --> 30376\n  - db is the database name --> bludb\n  - host is the hostname of the database instance --> 6667d8e9-9d4d-4ccb-ba32-21da3bb5aafc.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud\n  - username is the username you'll use to connect --> jty26738\n  - password is the password you'll use to connect --> Nth9JHtETHDz3XnJ\n\n\n## Creating tables, loading data and querying data\n\n- We can create tables via db2 or with the R/Python environment\n- DB uses the `ibm_db.exec_immediate()` with the following parameters\n  - Connection\n  - Statement\n  - Options\n- i.e. lets create a trucks table\n\n```\nstmt = ibm.db.exec_immediate(conn,\n\"Create table trucks(\nserial_no varchar(20)) primary key not null,\nmodel varchar(20) not null, \nmanufacturer varchar(20) not null,\nengine_size varchar(20) not null,\ntruck_class varchar(20) not null)\"\n)\n```\n  \n- now lets load some data: \n\n```\nstmt = ibm.db.exec_immediate(conn, \n\"Insert into trucks (serial_no, model, manufacturer,engine_size,truck_class)\nvalues('A1234', 'Lonestar', 'International trucks', 'Cummins ISX15', 'Class 8');\"\n)\n```\n\n\n- Now we can query some data, i.e. lets view the table\n\n```\n#query the data\nstmt = ibm_db.exec_immediate(conn, \"select * from trucks\")\n\n#print results\nibm_db.fetch_both(stmt)\n```\n\n- We can also use the pandas python library to retrieve data\n\n```\nimport pandas\nimport ibm_db_dbi\n\n#prep connection\npconn = ibm_db_dbi.Connection(conn)\n\n#create a pandas dataframe\ndf = pandas.read_sql('Select * from trucks', pconn)\n\n#view \ndf\n```\n\n\n## SQL magic\n\nJupyter notebooks have a concept of Magic commands that can simplify working with Python, and are particularly useful for data analysis. You can use the SQL Magic commands to execute queries more easily. Your notebooks can have two types of magic commands:\n\n- Cell magics: start with a double %% sign and apply to the entire cell\n- Line magics: start with a single % (percent) sign and apply to a particular line in a cell\n\nTheir usage is of the format:\n\n**%magicname arguments**\n\n\nFor example if you want to execute the a query to select some data from a table and fetch its results, you can simply enter a command like the following in your Jupyter notebook cell:\n\n**%sql select * from tablename**\n\nAlthough SQL magic simplifies working with databases, it has some limitations. For example, unlike DB-API, there are no explicit methods to close a connection and free up resources.\n\nExamples can be found in: DB0201EN-Week3-1-3-SQLmagic.ipynb\n\n\n\n## Analysing data with python\n\n- Kaggle McDonalds nutrition info\n\n1. Load csv into DB2 cloud (source, target, define, finalize)\n2. Verify loaded data using sql, i.e. with select * from table\n\n```\nstmt = ibm_db.exec_immediate(conn, \"select count(*) from mcdonals\")\n```\n\n3. Use pandas to retrieve data, i.e. vs pandas.read_sql to read in data via a select statement.\n\n```\nimport pandas \nimport ibm_db_dbi\npconn = ibm_dbi.Connection(conn)\ndf = pandas.read_sql('select * from mcdonalds', pconn)\ndf\n```\n\n4. Learn about data with pandas, i.e. with `df.describe(include=\"all\")`\n\n- Lets find the food item with the max sodium content\n\n4.1. Lets first visualize the food items\n\n```\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#make categorical scatteplots\nplot = sns.swarmplot(x=\"category\", y=\"sodium\", data =df)\nplt.setp(plot.get_xticklabels(), rotation=70)\nplt.title('Sodium content')\nplt.show()\n```\n\n4.2 Find the food item with the max sodium content\n\n```\n#get summary stats\ndf['Sodium'].describe()\n\n#find the row with the max sodium value. Lets say we get 82\ndf['Sodium'].idxmax()\n\n#lets find the the item with the id retrieved in the second line of code\ndf.at[82,'Item']\n```\n\n4.3 further data vis using scatterplots\n\n```\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#create a scatterplot with protein data vs total fat content to look for correlations\nplot = sns.joinplot(x='Protein', y='Total Fat', data=df)\nplt.show()\n```\n\n\n4.4 further data vis using boxplots\n\n```\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#create a boxplot to show the distribution for the sugar data\nplot = sns.set_style(\"whitegrid\")\nax= sns.boxplot(x=df['Sugars'])\nplt.show()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Week4_Python_a_IBM.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.168","bibliography":["references.bib"],"space-before-code-block":"10pt","space-after-code-block":"8pt","linespacing":"22pt plus2pt","frontmatter-linespacing":"17pt plus1pt minus1pt","title-size":"22pt","title-size-linespacing":"28pt","gap-before-crest":"25mm","gap-after-crest":"25mm","execute-dir":"file","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"pdflatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","highlight-style":"github","output-file":"Week4_Python_a_IBM.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"space-before-code-block":"10pt","space-after-code-block":"8pt","linespacing":"22pt plus2pt","frontmatter-linespacing":"17pt plus1pt minus1pt","title-size":"22pt","title-size-linespacing":"28pt","gap-before-crest":"25mm","gap-after-crest":"25mm","execute-dir":"file","documentclass":"scrreprt","geometry":["heightrounded"],"pandoc_args":"--listings","header-includes":["\\usepackage{fvextra} \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}"],"colorlinks":true,"code-block-bg":"D3D3D3"},"extensions":{"book":{}}}}}