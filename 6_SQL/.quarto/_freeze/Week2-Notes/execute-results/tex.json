{
  "hash": "bb4691c9ad881ca0db7364b67879eaa2",
  "result": {
    "markdown": "# Relational databases\n\n## Relational model\n\n- most used model for databases\n- allows for data independence\n- Data is stored in tables providing logical/physical data independence and physical storage independence\n\n\n## Entity-relationship model\n\n- A database is seen here as a collection of entities\n- Used as a tool to design relational databases\n- In the ER model, **entities** are objects that exist independently of any other entities in the database\n- An entity can be a noun, person, place or thing and is drawn as a rectangle (i.e. a book)\n- Entities have **attributes** = data elements that describe the entity (i.e. where to find the book, title, price, etc). Drawn as ovals. \n- Attributes are connected to exactly one entity\n- The entity <book> becomes a table in the database and the attributes become the columns in a table\n- Each attribute stores data values of different formats such as characters, dates or currencies\n\n\n## Primary keys\n\n- Each table is assigned a primary key\n- This key uniquely identifies each tuple, or row, in a table preventing duplication of data and providing a way of proving relationships between tables\n\n\n## Foreign keys\n\n- Primary keys that are defined in other tables creating a link between the tables\n\n\n## Create a databse on cloud\n\n- Benefits of clouds\n  - easy of use and access via an API, web interface and cloud or remove applications\n  - scalability\n  - disaster recovery\n- Examples: IBM db2, databases for postgreSQL, Oracle database cloud database, etc\n- DBaaS (Database-as-a-Service) provides users with access to database resources in cloud without having to setup the hardware\n- IBM Db2 on via the IBM cloud, go to catalog and databases to find DB2 and create a new service\n\n\n1. Login to [IBM Cloud](https://cloud.ibm.com/)\n2. Go to the DB2 Services page on IBM Catalog.\n3. Select a location where you want the service to be hosted. Only dallas has a free plan right nw\n4. To access your database instance, go to your IBM Cloud Resource List (you may need to log into IBM Cloud in the process) directly at: cloud.ibm.com/resources. Alternative: Go to your IBM Cloud dashboard (you may need to login to IBM Cloud in the process) at: cloud.ibm.com and click Services.\n5. In the Resource list, expand the Services and locate and click on your instance of Db2 you provisioned in exercise 2 (the name typically starts with Db2-xx for example Db2-fk, Db2-50, etc.)\n5. Add new service credentials\n6. Click on the Go to UI button\n7. The Db2 console will open in a new tab in your web browser. Click on the 3-bar menu icon in the top left corner and then click on RUN SQL.\n8. On the next screen click on Create new.\n9. The SQL editor will open where you can start typing and running queries. The SQL editor has several areas for performing different tasks.\n10. Click on the Add New Script + icon if you want to add a new script for composing queries and then select Create new.\n11. When you are asked in the upcoming labs, compose the appropriate SQL query for each problem and run by clicking Run all .\n12. NOTE: You may find that some results don't appear in the result set pane; in this case, click the highlighted diagonal arrow (View More) and it will open the full Result Set window containing the results.\n\n\n## Types of SQL statements (DDL vs DML)\n\n- SQL statements are used to interact with SQL elements, i.e. tables\n- Data Definition Language statements and Data Manipulation Language statements\n\n###  DDL\n\n- DDLs are used to define, change or drop database objects, such as tables\n- Common statement types: \n  - create: create tables and define its columns\n  - alter: altering tables including adding and dropping columns and modifying their data types\n  - truncate: deleting data in a table but not the table itself\n  - drop: used to delete tables\n\n###  DML\n\n- DML statements are used to read and modify data. This are sometimes referred to as CRUD operations (Create, read, update and delete rows)\n- Common statement types: \n  - insert: insert a row or several rows\n  - select: reads or selects a row or rows from a table\n  - update: edits rows \n  - delete: remove row(s)\n\n\n\n### CREATE table statement\n\n- Syntax\n\n```\nCreate table table_name\n(\ncolumn1 datatype optional parameters,\ncolumn2 datatype,\n...\n)\n```\n- Create a table for provinces in canada, here the data types used are\n  - char = a character string with fixed length, which is 2 in this case\n  - Varchar = a character string of a variable length, which in this case can be 24 characters long\n- Issuing this statement will create a table with two columns with the names: id and name\n\n```\nCreate table provinces\n(\nid char(2) Primary Key not null,\nname varchar(24),\n...\n)\n```\n\n- Create a table for the author entity with attributes such as author_id, lastname, etc that will be the columns of the table. We want author_id to be the primary key, so that no dupliacte values can exist and uniquely identify each row\n\n```\nCreate table author \n(\nauthor_id char(2) Primary key not null,\nlastname varchar(15) not null\nfirstname varchar(15) not null\ncountry varchar(2)\n)\n```\n\n### Alter a table\n\n- Add or remove columns\n- Modify the data type of columns\n- Add or remove keys\n- Add or remove constrains \n\nFor example lets add a column with the name phone_nr to the author table. In this example the data type is bigint, which can hold a number up to 19 digits long \n\n```\nAlter table author\nadd column phone_nr biginit\n```\n\nNow lets try to alter the datatype of a column and allow up to 20 charactes (to be able to include `-`)\n\n```\nAlter table author\nAlter column phone_nr set data type\nchar(20);\n```\n\nBe careful though using alter with existing data that is not compatible with the data type we choose.\n\nNow lets drop a column, if we don't need it anymore\n\n```\nAlter table author\ndrop column phone_nr;\n```\n\n\n### Drop a table\n\n- Deletes a table from a database\n\n```\nDrop table author\n```\n\n\n\n### Truncate  a table\n\n- Delete the data in a table rather than deleting the table itself\n- Deletes all rows in a table\n- The immediate specifies to process the statement immediately and cannot be undone\n\n```\nTruncate table author\nimmediate;\n```\n\n\n#### Examples\n\n1. Creating a table\n\n1.1. Create a table called TEST with two columns - ID of type integer, and Name of type varchar that allows 30 characters,\n\nFirst lets create a new connection for this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\ndb3 <- dbConnect(RSQLite::SQLite(), \":memory:\")\n```\n:::\n\n::: {.cell connection='db3'}\n\n```{.sql .cell-code}\ncreate table Test\n(\nID integer\nName varchar(30)\n)\n```\n:::\n\n\n\n1.2. Now let's create a table called COUNTRY with an ID column, a two letter country code column, and a variable length country name column. The not null constraint is added after the datatype meaning that this column can not contain NULL or an empty value and we use the ID as primary key\n\n\n\n::: {.cell connection='db3'}\n\n```{.sql .cell-code}\n\ncreate table Country\n(\nID int NOT NULL,\nCountry char(2),\nName varchar(60),\nPrimary Key (ID)\n)\n```\n:::\n\n\n\n\n1.3 if the table you are trying to create already exists in the database, you will get an error indicating table XXX.YYY already exists. To circumvent this error, either create a table with a different name or first DROP the existing table. It is quite common to issue a DROP before doing a CREATE in test and development scenarios.\n\n\n\n::: {.cell connection='db3'}\n\n```{.sql .cell-code}\n\ndrop table Country;\ncreate table Country\n(\nID int NOT NULL,\nCountry char(2),\nName varchar(60),\nPrimary Key (ID)\n)\n```\n:::\n\n\n\n**WARNING**: before dropping a table ensure that it doesn't contain important data that can't be recovered easily. Note that if the table does not already exist and you try to drop it, you will see an error like XXX.YYY is an undefined name.\n\n\n2. CREATE, ALTER, TRUNCATE, DROP\n\n2.1 You need to create two tables, PETSALE and PET. To create the two tables PETSALE and PET, copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#load libs\nlibrary(RMySQL)\n\n#build placeholder\npet_db <- dbConnect(RSQLite::SQLite(), \":memory:\")\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nCREATE TABLE PETSALE (\n    ID INTEGER NOT NULL,\n    PET CHAR(20),\n    SALEPRICE DECIMAL(6,2),\n    PROFIT DECIMAL(6,2),\n    SALEDATE DATE\n    );\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nCREATE TABLE PET (\n    ID INTEGER NOT NULL,\n    ANIMAL VARCHAR(20),\n    QUANTITY INTEGER\n    );\n```\n:::\n\n\n\n2.2 Now insert some records into the two newly created tables and show all the records of the two tables. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nINSERT INTO PETSALE VALUES\n    (1,'Cat',450.09,100.47,'2018-05-29'),\n    (2,'Dog',666.66,150.76,'2018-06-01'),\n    (3,'Parrot',50.00,8.9,'2018-06-04'),\n    (4,'Hamster',60.60,12,'2018-06-11'),\n    (5,'Goldfish',48.48,3.5,'2018-06-14');\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nINSERT INTO PET VALUES\n    (1,'Cat',3),\n    (2,'Dog',4),\n    (3,'Hamster',2);\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nSELECT * FROM PETSALE;\n```\n\n\n\n\nTable: 5 records\n\n|ID |PET      | SALEPRICE| PROFIT|SALEDATE   |\n|:--|:--------|---------:|------:|:----------|\n|1  |Cat      |    450.09| 100.47|2018-05-29 |\n|2  |Dog      |    666.66| 150.76|2018-06-01 |\n|3  |Parrot   |     50.00|   8.90|2018-06-04 |\n|4  |Hamster  |     60.60|  12.00|2018-06-11 |\n|5  |Goldfish |     48.48|   3.50|2018-06-14 |\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nSELECT * FROM PET;\n```\n\n\n\n\nTable: 3 records\n\n|ID |ANIMAL  | QUANTITY|\n|:--|:-------|--------:|\n|1  |Cat     |        3|\n|2  |Dog     |        4|\n|3  |Hamster |        2|\n:::\n\n\n\n2.3 Add a new QUANTITY column to the PETSALE table and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nAlter table PETSALE\nADD column QUANTITY integer;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nselect * from PETSALE\n```\n\n\n\n\nTable: 5 records\n\n|ID |PET      | SALEPRICE| PROFIT|SALEDATE   | QUANTITY|\n|:--|:--------|---------:|------:|:----------|--------:|\n|1  |Cat      |    450.09| 100.47|2018-05-29 |       NA|\n|2  |Dog      |    666.66| 150.76|2018-06-01 |       NA|\n|3  |Parrot   |     50.00|   8.90|2018-06-04 |       NA|\n|4  |Hamster  |     60.60|  12.00|2018-06-11 |       NA|\n|5  |Goldfish |     48.48|   3.50|2018-06-14 |       NA|\n:::\n\n\n\n2.4 Now update the newly added QUANTITY column of the PETSALE table with some values and show all the records of the table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nUPDATE PETSALE SET QUANTITY = 9 WHERE ID = 1;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nUPDATE PETSALE SET QUANTITY = 3 WHERE ID = 2;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nUPDATE PETSALE SET QUANTITY = 2 WHERE ID = 3;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nUPDATE PETSALE SET QUANTITY = 6 WHERE ID = 4;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nUPDATE PETSALE SET QUANTITY = 24 WHERE ID = 5;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nselect * from PETSALE\n```\n\n\n\n\nTable: 5 records\n\n|ID |PET      | SALEPRICE| PROFIT|SALEDATE   | QUANTITY|\n|:--|:--------|---------:|------:|:----------|--------:|\n|1  |Cat      |    450.09| 100.47|2018-05-29 |        9|\n|2  |Dog      |    666.66| 150.76|2018-06-01 |        3|\n|3  |Parrot   |     50.00|   8.90|2018-06-04 |        2|\n|4  |Hamster  |     60.60|  12.00|2018-06-11 |        6|\n|5  |Goldfish |     48.48|   3.50|2018-06-14 |       24|\n:::\n\n\n\n2.5 Delete the PROFIT column from the PETSALE table and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nAlter table PETSALE\ndrop column profit;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nselect * from PETSALE;\n```\n\n\n\n\nTable: 5 records\n\n|ID |PET      | SALEPRICE|SALEDATE   | QUANTITY|\n|:--|:--------|---------:|:----------|--------:|\n|1  |Cat      |    450.09|2018-05-29 |        9|\n|2  |Dog      |    666.66|2018-06-01 |        3|\n|3  |Parrot   |     50.00|2018-06-04 |        2|\n|4  |Hamster  |     60.60|2018-06-11 |        6|\n|5  |Goldfish |     48.48|2018-06-14 |       24|\n:::\n\n\n\n\n2.6 Change the data type to VARCHAR(20) type of the column PET of the table PETSALE and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n**Statment not working yet\n\n```\n#Alter table PETSALE\n#ALTER COLUMN PET set data type varchar(20);\n```\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nselect * from PETSALE;\n```\n\n\n\n\nTable: 5 records\n\n|ID |PET      | SALEPRICE|SALEDATE   | QUANTITY|\n|:--|:--------|---------:|:----------|--------:|\n|1  |Cat      |    450.09|2018-05-29 |        9|\n|2  |Dog      |    666.66|2018-06-01 |        3|\n|3  |Parrot   |     50.00|2018-06-04 |        2|\n|4  |Hamster  |     60.60|2018-06-11 |        6|\n|5  |Goldfish |     48.48|2018-06-14 |       24|\n:::\n\n\n2.7 Rename the column PET to ANIMAL of the PETSALE table and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nAlter table PETSALE\nRENAME COLUMN PET TO ANIMAL;\n```\n:::\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nselect * from PETSALE;\n```\n\n\n\n\nTable: 5 records\n\n|ID |ANIMAL   | SALEPRICE|SALEDATE   | QUANTITY|\n|:--|:--------|---------:|:----------|--------:|\n|1  |Cat      |    450.09|2018-05-29 |        9|\n|2  |Dog      |    666.66|2018-06-01 |        3|\n|3  |Parrot   |     50.00|2018-06-04 |        2|\n|4  |Hamster  |     60.60|2018-06-11 |        6|\n|5  |Goldfish |     48.48|2018-06-14 |       24|\n:::\n\n\n\n\n2.8 Remove all rows from the PET table and show the empty table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n**Not yet working in R**\n\n```\nTRUNCATE TABLE PET IMMEDIATE;\n```\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nselect * from PETSALE;\n```\n\n\n\n\nTable: 5 records\n\n|ID |ANIMAL   | SALEPRICE|SALEDATE   | QUANTITY|\n|:--|:--------|---------:|:----------|--------:|\n|1  |Cat      |    450.09|2018-05-29 |        9|\n|2  |Dog      |    666.66|2018-06-01 |        3|\n|3  |Parrot   |     50.00|2018-06-04 |        2|\n|4  |Hamster  |     60.60|2018-06-11 |        6|\n|5  |Goldfish |     48.48|2018-06-14 |       24|\n:::\n\n\n\n\n2.9 Delete the PET table and verify if the table still exists or not (SELECT statement won't work if a table doesn't exist). Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\n\n::: {.cell connection='pet_db'}\n\n```{.sql .cell-code}\n\nDROP TABLE PET;\n```\n:::\n\n\n\n\n```\nselect * from PET;\n```\n\n\n\n## Loading several databases \n\n```bash\ncsvs-to-sqlite *csv test.db\ndatasette test.db\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\ndb_test = dbConnect(RSQLite::SQLite(), dbname =\"Week2/tables/test.db\")\n```\n:::\n\n::: {.cell connection='db_test'}\n\n```{.sql .cell-code}\nSELECT * FROM JobsHistory\n```\n\n\n\n\nTable: 9 records\n\n|E1001 |08/01/2000 | 100|  2|\n|:-----|:----------|---:|--:|\n|E1002 |08/01/2001 | 200|  5|\n|E1003 |08/16/2001 | 300|  5|\n|E1004 |08/16/2000 | 400|  5|\n|E1005 |05/30/2000 | 500|  2|\n|E1006 |08/16/2001 | 600|  2|\n|E1007 |05/30/2002 | 650|  7|\n|E1008 |05/06/2010 | 660|  7|\n|E1009 |08/16/2016 | 234|  7|\n|E1010 |08/16/2016 | 220|  5|\n:::\n\n\n\n### List all tables we have inside our database\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(db_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Departments\" \"Employees\"   \"Jobs\"        \"JobsHistory\" \"Locations\"  \n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}