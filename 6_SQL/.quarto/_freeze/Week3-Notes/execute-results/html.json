{
  "hash": "e4a2efb965c549fc7978892d7940af08",
  "result": {
    "markdown": "# Using String Patterns\n\n- What if we don't know exactly what to specify in the where clause?\n- A where clause always requires a predicate, i.e. an expression that evaluates to true, false or unknown\n- We can use the `LIKE` predicate with string patterns for searching a pattern in a column\n- For example we only remember that the authors first name starts with R we can do\n\n```\nselect firstname from Author\nwhere firstname LIKE R%\n```\n\n# Using Ranges\n\n- The percent sign (a wildcard character used to substitute other characters) can be placed before the pattern, after the pattern, or both before and after the pattern\n- Now lets retrieve the list of books whose number of pages is more than 290, but less than 300 to find a range \n\n```\nselect title,pages from Author\nwhere pages >=290 AND pages <= 300\n```\n\n- Alternatively, we can use a range of numbers to specify a condition\n\n```\nselect title,pages from Author\nwhere pages between 290 AND 300\n```\n\n# Using a set of values\n\n- In some cases, there are data values that cannot be grouped under ranges\n- I.e. retrieve authors from AU or Brasil\n\n```\nselect firstname,lastname,country from Author\nwhere country='AU' OR country='BR'\n```\n\n- How to we retrieve authors from india, australia and china without having a where clause that becomes too long? For this we can use the `IN` operator that allows us to specifiy a list of expressions\n\n\n```\nselect firstname,lastname,country from Author\nwhere country IN ('AU','BR')\n```\n\n# Sorting result sets\n\n- We can for example display the results of a search in alphabetical order to make it easier to read via the `order by` clause\n- By default ascending order is used\n\n```\nselect title from Book\nOrder by title\n```\n\n- descending order using the `DESC` keyword\n\n```\nselect title from Book\nOrder by title DESC\n```\n\n- Order by column sequence number, i.e. select by the 2nd column \n\n```\nselect title,pages from Book\nOrder by 2\n```\n\n\n# Grouping result sets\n\n## Eliminating duplicates using the DISTINCT clause\n\n- This would list all countries our authors come from but including duplicates\n\n```\nselect country from Author\nOrder by 1\n```\n\n- This would list all countries our authors without duplocates\n\n```\nselect distinct(country) from Author\n```\n\n## Grouping results with the Group by clause\n\n- How many authors come from the same country?\n\n```\nselect country, count(country) from author\nGroup by country\n```\n\n- we can assign a column name to the result set. We do this using the \"as\" keyword\n\n```\nselect country, count(country) as Count from author\nGroup by country\n```\n\n## Restricting the results set using the HAVING clause\n\n- Lets check if there are more than 4 authors from the same country\n\n```\nselect country, count(country) from author\nGroup by country\nHaving count(country) > 4\n```\n\n# Exercise\n\n1. Load hr_data database\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(RSQLite)\ndb = dbConnect(RSQLite::SQLite(), dbname =\"Week3/tables/employees.db\")\n\n#set connection for each chunk, other wise we would need `{sql, connection=\"db\"}`\nknitr::opts_chunk$set(connection = \"db\", max.print = 10)\n```\n:::\n\n\n2. Retrieve all employees whose address is in Elgin,IL. view the table as is too see how to do this\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|emp_id |f_name  |l_name  |    ssn|b_date     |sex |address                      | job_id| salary| manager_id| dep_id|\n|:------|:-------|:-------|------:|:----------|:---|:----------------------------|------:|------:|----------:|------:|\n|E1001  |John    |Thomas  | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL        |    100| 100000|      30001|      2|\n|E1002  |Alice   |James   | 123457|1972-07-31 |F   |980 Berry ln, Elgin,IL       |    200|  80000|      30002|      5|\n|E1003  |Steve   |Wells   | 123458|1980-08-10 |M   |291 Springs, Gary,IL         |    300|  50000|      30002|      5|\n|E1004  |Santosh |Kumar   | 123459|1985-07-20 |M   |511 Aurora Av, Aurora,IL     |    400|  60000|      30004|      5|\n|E1005  |Ahmed   |Hussain | 123410|1960-07-20 |M   |216 Oak Tree, Geneva,IL      |    500|  70000|      30001|      2|\n|E1006  |Nancy   |Allen   | 123411|1960-07-21 |F   |111 Green Pl, Elgin,IL       |    600|  90000|      30001|      2|\n|E1007  |Mary    |Thomas  | 123412|1960-07-22 |F   |100 Rose Pl, Gary,IL         |    650|  65000|      30003|      7|\n|E1008  |Bharath |Gupta   | 123413|1960-07-23 |M   |145 Berry Ln, Naperville,IL  |    660|  65000|      30003|      7|\n|E1009  |Andrea  |Jones   | 123414|1960-07-24 |F   |120 Fall Creek, Gary,IL      |    234|  70000|      30003|      7|\n|E1010  |Ann     |Jacob   | 123415|1960-07-25 |F   |111 Britany Springs,Elgin,IL |    220|  70000|      30004|      5|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\nwhere address like \"%Elgin,IL\"\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|emp_id |f_name |l_name |    ssn|b_date     |sex |address                      | job_id| salary| manager_id| dep_id|\n|:------|:------|:------|------:|:----------|:---|:----------------------------|------:|------:|----------:|------:|\n|E1002  |Alice  |James  | 123457|1972-07-31 |F   |980 Berry ln, Elgin,IL       |    200|  80000|      30002|      5|\n|E1006  |Nancy  |Allen  | 123411|1960-07-21 |F   |111 Green Pl, Elgin,IL       |    600|  90000|      30001|      2|\n|E1010  |Ann    |Jacob  | 123415|1960-07-25 |F   |111 Britany Springs,Elgin,IL |    220|  70000|      30004|      5|\n\n</div>\n:::\n\n\n2. Retrieve all employees who were born during the 1970's.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\nwhere b_date like '%/197%'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 0 records\n\n|emp_id |f_name |l_name | ssn|b_date |sex |address | job_id| salary| manager_id| dep_id|\n|:------|:------|:------|---:|:------|:---|:-------|------:|------:|----------:|------:|\n\n</div>\n:::\n\n\n3. Retrieve all employees in department 5 whose salary is between 60000 and 70000.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\nwhere dep_id = 5 and (salary between 60000 and 70000)\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|emp_id |f_name  |l_name |    ssn|b_date     |sex |address                      | job_id| salary| manager_id| dep_id|\n|:------|:-------|:------|------:|:----------|:---|:----------------------------|------:|------:|----------:|------:|\n|E1004  |Santosh |Kumar  | 123459|1985-07-20 |M   |511 Aurora Av, Aurora,IL     |    400|  60000|      30004|      5|\n|E1010  |Ann     |Jacob  | 123415|1960-07-25 |F   |111 Britany Springs,Elgin,IL |    220|  70000|      30004|      5|\n\n</div>\n:::\n\n\n4. Retrieve a list of employees ordered by department ID.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect f_name,dep_id from employees\norder by dep_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|f_name  | dep_id|\n|:-------|------:|\n|John    |      2|\n|Ahmed   |      2|\n|Nancy   |      2|\n|Alice   |      5|\n|Steve   |      5|\n|Santosh |      5|\n|Ann     |      5|\n|Mary    |      7|\n|Bharath |      7|\n|Andrea  |      7|\n\n</div>\n:::\n\n5. Retrieve a list of employees ordered in descending order by department ID and within each department ordered alphabetically in descending order by last name.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect f_name,l_name,dep_id from employees\norder by dep_id DESC, l_name desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|f_name  |l_name  | dep_id|\n|:-------|:-------|------:|\n|Mary    |Thomas  |      7|\n|Andrea  |Jones   |      7|\n|Bharath |Gupta   |      7|\n|Steve   |Wells   |      5|\n|Santosh |Kumar   |      5|\n|Alice   |James   |      5|\n|Ann     |Jacob   |      5|\n|John    |Thomas  |      2|\n|Ahmed   |Hussain |      2|\n|Nancy   |Allen   |      2|\n\n</div>\n:::\n\n6. Retrieve a list of employees ordered in descending order by department ID and within each department ordered alphabetically in descending order by last name. BUT  use department name instead of department ID. Retrieve a list of employees ordered by department name, and within each department ordered alphabetically in descending order by last name.\n\n**Notice** In the SQL Query above, D and E are aliases for the table names. Once you define an alias like D in your query, you can simply write D.COLUMN_NAME rather than the full form DEPARTMENTS.COLUMN_NAME.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect d.dep_name,e.f_name,e.l_name from employees as E, departments as D\nwhere e.dep_id = d.dep_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|dep_name        |f_name  |l_name  |\n|:---------------|:-------|:-------|\n|Architect Group |John    |Thomas  |\n|Software Group  |Alice   |James   |\n|Software Group  |Steve   |Wells   |\n|Software Group  |Santosh |Kumar   |\n|Architect Group |Ahmed   |Hussain |\n|Architect Group |Nancy   |Allen   |\n|Design Team     |Mary    |Thomas  |\n|Design Team     |Bharath |Gupta   |\n|Design Team     |Andrea  |Jones   |\n|Software Group  |Ann     |Jacob   |\n\n</div>\n:::\n\n7. For each department ID retrieve the number of employees in the department.\n\nselect country, count(country) from author\nGroup by country\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect dep_id, count(*) from employees\ngroup by dep_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| dep_id| count(*)|\n|------:|--------:|\n|      2|        3|\n|      5|        4|\n|      7|        3|\n\n</div>\n:::\n\n\n8. For each department retrieve the number of employees in the department, and the average employee salary in the department..\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect dep_id, count(f_name),avg(salary) from employees\ngroup by dep_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| dep_id| count(f_name)| avg(salary)|\n|------:|-------------:|-----------:|\n|      2|             3|    86666.67|\n|      5|             4|    65000.00|\n|      7|             3|    66666.67|\n\n</div>\n:::\n\n\n9. Label the computed columns in the result set of SQL problem 8 as NUM_EMPLOYEES and AVG_SALARY.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect dep_id, count(f_name) as \"num_employees\" ,avg(salary) as \"avg_salary\" from employees\ngroup by dep_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| dep_id| num_employees| avg_salary|\n|------:|-------------:|----------:|\n|      2|             3|   86666.67|\n|      5|             4|   65000.00|\n|      7|             3|   66666.67|\n\n</div>\n:::\n\n\n\n\n10. In SQL problem 9., order the result set by Average Salary..\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect dep_id, count(f_name) as \"num_employees\" ,avg(salary) as \"avg_salary\" from employees\ngroup by dep_id\norder by avg_salary\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| dep_id| num_employees| avg_salary|\n|------:|-------------:|----------:|\n|      5|             4|   65000.00|\n|      7|             3|   66666.67|\n|      2|             3|   86666.67|\n\n</div>\n:::\n\n\n11. In SQL problem 10, limit the result to departments with fewer than 4 employees.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect dep_id, count(f_name) as \"num_employees\" ,avg(salary) as \"avg_salary\" from employees\ngroup by dep_id\nhaving count(*) < 4\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n| dep_id| num_employees| avg_salary|\n|------:|-------------:|----------:|\n|      2|             3|   86666.67|\n|      7|             3|   66666.67|\n\n</div>\n:::\n\n\n# Build in database functions\n\n- Database functions can reduce the amount of data that needs to be retrieved and thus reducing network traffic and bandwidth use\n- Its also possible to define your own functions\n\n## Aggregate or Column functions\n\n- An aggregate function takes a collection of like values, such as all of the values in a column, as input, and returns a single value or null\n- Examples for an aggregate function: \n  - sum(): add up all values i.e. to add all values in the cost column\n  \n  ```\n  select SUM(cost) from petrescue\n  ```\n\n  ```\n  #use `as` to name the resulting output column \n  select SUM(cost) as sum_of_cost\n  from petrescue\n  ```\n  \n  - min(): returns the lowest value\n  - max(): returns the highest value; i.e. lets get the maximum quantity of an animal:\n  \n  ```\n  select Max(quantity) from petrescue\n  ```\n\n  ```\n  #get the min value off the ID column for only a subset of the data, i.e. only dogs\n  select min(id) from petrescue\n  where Animal='dog'\n  ```\n  \n  - avg(): return the average or mean value; i.e. specify the average cost\n  \n  ```\n  select avg(cost) from petrescue\n  ```\n  \n  ```\n  #we can also perform math operations between columns\n  #i.e. we can calulate the avg cost per dog\n  select avg(cost) from petrescue\n  select avg(cost/quantity) from petrescue\n  where animal='dog'\n  ```\n  \n  - etc(): \n\n\n\n## Scalar and string functions\n\n\n- Scalar: perform operations on every input value\n- Examples:\n  - round(): ie. round up/down every  value in the cost column we do:\n  \n  ```\n  select round(cost) from petrescue\n  ```\n  \n  - length(): for example retrieve the length of each value in the animal column. If we have strings, we perform a string function.\n  \n  ```\n  select length(animal) from petrescue\n  ```\n  \n  - ucase/lcase(): return upper or lower case values of string. I.e. if we want to retrieve the values in the animal column in uppercase:\n  \n  ```\n  select upcase(animal) from petrescue\n  ```\n\n  ```\n  #if we want to lower case value for the cat in the animal column, we can add a where clause\n  select * from petrescue\n  where lcase(animal)='cat'\n  ```\n\n  ```\n  #use disting to get unique values for the animal colum\n  select distinct(ucase(animal)) from petrescue\n  ```\n\n## Date and time build-in functions\n\n- Most databases contain special datatypes for dates and times\n- I.e. DB2 contains types for:\n  - Date: YYYYMMDD\n  - Time: HHMMSS\n  - Timestamp: YYYYXXDDHHMMSSZZZZZZ\n- Functions to extract dates/times:\n  - year()\n  - month() \n  - day() \n  - dayofmonth()     \n  - dayofweek() \n  - dayofyear() \n  - week() \n  - hour() \n  - minute() \n  - second() \n\nI.e. get the day portion from each rescue date\n\n```\nselect day(rescuedate) from petrescue\nwhere animal = 'cat'\n```\n\nI.e. get the number of rescues during the month of may\n\n```\nselect count(*) from petrescue\nwhere month(rescuedate)='05'\n```\n\nI.e. what date is it 3d after each rescue date\n\n```\nselect (rescuedate + 3 days) from petrescue\n```\n\n- Special registers:\n  - current_date\n  - current_time\n  - i.e. find out how many days have passed since each rescuedate till now. The result will be in YMMDD\n  \n  ```\n  select (current_date - rescuedate) from petrescue\n  ```\n\n\n## Exercise\n\n1. Load hr_data database\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb3 <- dbConnect(RSQLite::SQLite(), \":memory:\")\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Create the PETRESCUE table\ncreate table PETRESCUE (\n        ID INTEGER NOT NULL,\n        ANIMAL VARCHAR(20),\n        QUANTITY INTEGER,\n        COST DECIMAL(6,2),\n        RESCUEDATE DATE,\n        PRIMARY KEY (ID)\n        );\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Insert sample data into PETRESCUE table\ninsert into PETRESCUE values\n        (1,'Cat',9,450.09,'2018-05-29'),\n        (2,'Dog',3,666.66,'2018-06-01'),\n        (3,'Dog',1,100.00,'2018-06-04'),\n        (4,'Parrot',2,50.00,'2018-06-04'),\n        (5,'Dog',1,75.75,'2018-06-10'),\n        (6,'Hamster',6,60.60,'2018-06-11'),\n        (7,'Cat',1,44.44,'2018-06-11'),\n        (8,'Goldfish',24,48.48,'2018-06-14'),\n        (9,'Dog',2,222.22,'2018-06-15')\n\n;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|ID |ANIMAL   | QUANTITY|   COST|RESCUEDATE |\n|:--|:--------|--------:|------:|:----------|\n|1  |Cat      |        9| 450.09|2018-05-29 |\n|2  |Dog      |        3| 666.66|2018-06-01 |\n|3  |Dog      |        1| 100.00|2018-06-04 |\n|4  |Parrot   |        2|  50.00|2018-06-04 |\n|5  |Dog      |        1|  75.75|2018-06-10 |\n|6  |Hamster  |        6|  60.60|2018-06-11 |\n|7  |Cat      |        1|  44.44|2018-06-11 |\n|8  |Goldfish |       24|  48.48|2018-06-14 |\n|9  |Dog      |        2| 222.22|2018-06-15 |\n\n</div>\n:::\n\n\n2. Enter a function that calculates the total cost of all animal rescues in the PETRESCUE table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect sum(cost) from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| sum(cost)|\n|---------:|\n|   1718.24|\n\n</div>\n:::\n\n\n\n2. Enter a function that displays the total cost of all animal rescues in the PETRESCUE table in a column called SUM_OF_COST.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect sum(cost) as SUM_OF_COST from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| SUM_OF_COST|\n|-----------:|\n|     1718.24|\n\n</div>\n:::\n\n\n3. Enter a function that displays the maximum quantity of animals rescued.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect max(quantity) from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| max(quantity)|\n|-------------:|\n|            24|\n\n</div>\n:::\n\n\n4. Enter a function that displays the average cost of animals rescued\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect avg(cost) from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| avg(cost)|\n|---------:|\n|  190.9156|\n\n</div>\n:::\n\n\n5. Enter a function that displays the average cost of rescuing a dog.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect AVG(COST/QUANTITY) from PETRESCUE\nwhere animal='Dog'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| AVG(COST/QUANTITY)|\n|------------------:|\n|             127.27|\n\n</div>\n:::\n\n\n6. Enter a function that displays the rounded cost of each rescue.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect round(cost) from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n| round(cost)|\n|-----------:|\n|         450|\n|         667|\n|         100|\n|          50|\n|          76|\n|          61|\n|          44|\n|          48|\n|         222|\n\n</div>\n:::\n\n\n6. Enter a function that displays the length of each animal name.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect distinct(animal), length(animal) from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|ANIMAL   | length(animal)|\n|:--------|--------------:|\n|Cat      |              3|\n|Dog      |              3|\n|Parrot   |              6|\n|Hamster  |              7|\n|Goldfish |              8|\n\n</div>\n:::\n\n\n7. Enter a function that displays the animal name in each rescue in uppercase.\n\n**Notice: ucase becomes upper in SQlite**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect upper(animal) from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|upper(animal) |\n|:-------------|\n|CAT           |\n|DOG           |\n|DOG           |\n|PARROT        |\n|DOG           |\n|HAMSTER       |\n|CAT           |\n|GOLDFISH      |\n|DOG           |\n\n</div>\n:::\n\n\n8. Enter a function that displays the animal name in each rescue in uppercase without duplications.\n\n**Notice: ucase becomes upper in SQlite**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect distinct(upper(animal)) from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|(upper(animal)) |\n|:---------------|\n|CAT             |\n|DOG             |\n|PARROT          |\n|HAMSTER         |\n|GOLDFISH        |\n\n</div>\n:::\n\n\n9. Enter a query that displays all the columns from the PETRESCUE table, where the animal(s) rescued are cats. Use cat in lower case in the query.\n\n**Notice: lcase becomes lower in SQlite**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from petrescue\nwhere lower(animal)='cat'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n| ID|ANIMAL | QUANTITY|   COST|RESCUEDATE |\n|--:|:------|--------:|------:|:----------|\n|  1|Cat    |        9| 450.09|2018-05-29 |\n|  7|Cat    |        1|  44.44|2018-06-11 |\n\n</div>\n:::\n\n\n\n\n10. Enter a function that displays the day of the month when cats have been rescued.\n\n**Notice: SQlite uses a different syntax for finding time**\n\n```\nselect day(rescuedate) from petrescue\nwhere lower(animal)='cat'\n```\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect strftime('%d', RESCUEDATE)  from petrescue\nwhere lower(animal)='cat'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|strftime('%d', RESCUEDATE) |\n|:--------------------------|\n|29                         |\n|11                         |\n\n</div>\n:::\n\n\n\n11. Enter a function that displays the number of rescues on the 5th month.\n**Notice: SQlite uses a different syntax for finding time**\n\n```\nselect sum(quantity) from petrescue\nwhere month(rescuedate)='05'\n```\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect sum(quantity) from petrescue\nwhere strftime('%m', RESCUEDATE)='05'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| sum(quantity)|\n|-------------:|\n|             9|\n\n</div>\n:::\n\n12. Enter a function that displays the number of rescues on the 14th day of the month.\n\n**Notice: SQlite uses a different syntax for finding time**\n\n```\nselect count(*) from petrescue\nwhere day(rescuedate)='14'\n```\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect sum(quantity) from petrescue\nwhere strftime('%d', RESCUEDATE)='14'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| sum(quantity)|\n|-------------:|\n|            24|\n\n</div>\n:::\n\n13. Animals rescued should see the vet within three days of arrivals. Enter a function that displays the third day from each rescue.\n\n**Notice: SQlite uses a different syntax for finding time**\n\n```\nselect (rescuedate+3) from petrescue\n```\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect id,date(rescuedate, '+3 day') from petrescue\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|ID |date(rescuedate, '+3 day') |\n|:--|:--------------------------|\n|1  |2018-06-01                 |\n|2  |2018-06-04                 |\n|3  |2018-06-07                 |\n|4  |2018-06-07                 |\n|5  |2018-06-13                 |\n|6  |2018-06-14                 |\n|7  |2018-06-14                 |\n|8  |2018-06-17                 |\n|9  |2018-06-18                 |\n\n</div>\n:::\n\n\n14. Enter a function that displays the length of time the animals have been rescued; the difference between today<e2><80><99>s date and the rescue date.\n\n**Notice: SQlite uses a different syntax for finding time**\n\n```\nselect (current_date - rescuedate) from petrescue\n```\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect date(rescuedate - 'now' ) from PETRESCUE\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|date(rescuedate - 'now' ) |\n|:-------------------------|\n|-4707-06-03               |\n|-4707-06-03               |\n|-4707-06-03               |\n|-4707-06-03               |\n|-4707-06-03               |\n|-4707-06-03               |\n|-4707-06-03               |\n|-4707-06-03               |\n|-4707-06-03               |\n\n</div>\n:::\n\n\n# Sub-queries and nested selects\n\n- Sub-query: a query inside a query\n\n```\nselect column1 from table\nwhere column2 = select(max(column2) from table)\n```\n\ni.e. retrieve the list of employees who earn more than the avg salary. For this we can not use `where salary > avg(salary)` since aggregate functions can not always be used in a where clause. However, we can use a sub-select experession\n\n```\nselect emp_id, f_name,salary from employees\nwhere salary <(select avg(salary) from employees)\n```\n\nThe sub-select clause doesn't have to be in the where clause, we can also use it on the list of columns to be selected. **Column expressions** =  substitute column names with a sub-query. I.e. compare the salary of each employee with the average salary\n\n```\nselect emp_id,salary, (select avg(salary) from employees) as avg_salary from employees\n```\n\nWe can also make sub-queries a part of the FROM clause to substitute the table name with a sub-query = **derived tables or table expressions**.  I.e. lets make a derived table with only 3 columns\n\n```\nselect * from (select emp_id, f_name, l_name from employees) as EMP4ALL\n```\n\n# Nested select statement\n\n```\nSELECT column_name [, column_name ]\nFROM table1 [, table2 ]\nWHERE column_name OPERATOR\n   (SELECT column_name [, column_name ]\n   FROM table1 [, table2 ]\n   WHERE condition);\n```\n\n## Examples\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|emp_id |f_name  |l_name  |    ssn|b_date     |sex |address                      | job_id| salary| manager_id| dep_id|\n|:------|:-------|:-------|------:|:----------|:---|:----------------------------|------:|------:|----------:|------:|\n|E1001  |John    |Thomas  | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL        |    100| 100000|      30001|      2|\n|E1002  |Alice   |James   | 123457|1972-07-31 |F   |980 Berry ln, Elgin,IL       |    200|  80000|      30002|      5|\n|E1003  |Steve   |Wells   | 123458|1980-08-10 |M   |291 Springs, Gary,IL         |    300|  50000|      30002|      5|\n|E1004  |Santosh |Kumar   | 123459|1985-07-20 |M   |511 Aurora Av, Aurora,IL     |    400|  60000|      30004|      5|\n|E1005  |Ahmed   |Hussain | 123410|1960-07-20 |M   |216 Oak Tree, Geneva,IL      |    500|  70000|      30001|      2|\n|E1006  |Nancy   |Allen   | 123411|1960-07-21 |F   |111 Green Pl, Elgin,IL       |    600|  90000|      30001|      2|\n|E1007  |Mary    |Thomas  | 123412|1960-07-22 |F   |100 Rose Pl, Gary,IL         |    650|  65000|      30003|      7|\n|E1008  |Bharath |Gupta   | 123413|1960-07-23 |M   |145 Berry Ln, Naperville,IL  |    660|  65000|      30003|      7|\n|E1009  |Andrea  |Jones   | 123414|1960-07-24 |F   |120 Fall Creek, Gary,IL      |    234|  70000|      30003|      7|\n|E1010  |Ann     |Jacob   | 123415|1960-07-25 |F   |111 Britany Springs,Elgin,IL |    220|  70000|      30004|      5|\n\n</div>\n:::\n\n\n\n1. Execute a failing query (i.e. one which gives an error) to retrieve all employees records whose salary is lower than the average salary.\n\n```\nselect * from employees\nwhere salary < avg(salary)\n```\n\n2. Execute a working query using a sub-select to retrieve all employees records whose salary is lower than the average salary.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\nwhere salary <(select avg(salary) from employees)\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 7 records\n\n|emp_id |f_name  |l_name  |    ssn|b_date     |sex |address                      | job_id| salary| manager_id| dep_id|\n|:------|:-------|:-------|------:|:----------|:---|:----------------------------|------:|------:|----------:|------:|\n|E1003  |Steve   |Wells   | 123458|1980-08-10 |M   |291 Springs, Gary,IL         |    300|  50000|      30002|      5|\n|E1004  |Santosh |Kumar   | 123459|1985-07-20 |M   |511 Aurora Av, Aurora,IL     |    400|  60000|      30004|      5|\n|E1005  |Ahmed   |Hussain | 123410|1960-07-20 |M   |216 Oak Tree, Geneva,IL      |    500|  70000|      30001|      2|\n|E1007  |Mary    |Thomas  | 123412|1960-07-22 |F   |100 Rose Pl, Gary,IL         |    650|  65000|      30003|      7|\n|E1008  |Bharath |Gupta   | 123413|1960-07-23 |M   |145 Berry Ln, Naperville,IL  |    660|  65000|      30003|      7|\n|E1009  |Andrea  |Jones   | 123414|1960-07-24 |F   |120 Fall Creek, Gary,IL      |    234|  70000|      30003|      7|\n|E1010  |Ann     |Jacob   | 123415|1960-07-25 |F   |111 Britany Springs,Elgin,IL |    220|  70000|      30004|      5|\n\n</div>\n:::\n\n\n3. Execute a Column Expression that retrieves all employees records with EMP_ID, SALARY and maximum salary as MAX_SALARY in every row.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect emp_id,salary,(select max(salary)from employees) as max_salary from employees\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|emp_id | salary| max_salary|\n|:------|------:|----------:|\n|E1001  | 100000|      1e+05|\n|E1002  |  80000|      1e+05|\n|E1003  |  50000|      1e+05|\n|E1004  |  60000|      1e+05|\n|E1005  |  70000|      1e+05|\n|E1006  |  90000|      1e+05|\n|E1007  |  65000|      1e+05|\n|E1008  |  65000|      1e+05|\n|E1009  |  70000|      1e+05|\n|E1010  |  70000|      1e+05|\n\n</div>\n:::\n\n4. Execute a Table Expression for the EMPLOYEES table that excludes columns with sensitive employee data (i.e. does not include columns: SSN, B_DATE, SEX, ADDRESS, SALARY).\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from ( select EMP_ID, F_NAME, L_NAME from employees) AS EMP4ALL;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|EMP_ID |F_NAME  |L_NAME  |\n|:------|:-------|:-------|\n|E1001  |John    |Thomas  |\n|E1002  |Alice   |James   |\n|E1003  |Steve   |Wells   |\n|E1004  |Santosh |Kumar   |\n|E1005  |Ahmed   |Hussain |\n|E1006  |Nancy   |Allen   |\n|E1007  |Mary    |Thomas  |\n|E1008  |Bharath |Gupta   |\n|E1009  |Andrea  |Jones   |\n|E1010  |Ann     |Jacob   |\n\n</div>\n:::\n\n\n# Working with multiple tables\n\nWays to access multiple tables in the same query are:\n1. Sub-queries\n2. Implicit join\n3. Join operators, such as inner join, outer join, ...\n\n\n\n## Accessing tables using sub-queries\n\n- I.e. lets only retrieve employee records for which a dep_id exists in the Departments table\n\n```\nselect * from employee\nwhere dep_id in (select dep_id from departments)\n```\n\n\n- I.e. lets only retrieve employees from a specific location via the location id found in the departments table\n\n```\nselect * from employee\nwhere dep_id in (select dep_id from departments where loc_id=\"L0002\")\n```\n\n\n\n- I.e. lets retrieve the dep_id and name for employees who earn more than 70,000 dollars\n\n```\nselect dep_id,dep_name from departments\nwhere dep_id in (select dep_id from employees where salary > 70000)\n```\n\n\n## Accessing tables with an implicit join\n\n- I.e. we can specify two tables in the FROM clause as shown below. This results in a table join without using the join operator. This action below is called a full join, or a cartesian join, because every row in the first table is joined with every row in the 2nd table\n\n```\nselect * from employees,departments\n```\n\n\n- We can use additional operands to limit the results set. I.e. only show rows with matching dep_ids. Below we prefix the name of the column with the name of the table, i.e. we use employees.dep_id. \n\n```\nselect * from employees, department\nwhere employees.dep_id = departments.dep_id\n```\n\n- If the table names are long we also can use aliases. I.e. we can use the alias E for the employee table and then use these aliases in the where clause\n\n```\nselect * from employees E, department D\nwhere E.dep_id = D.dep_id\n```\n\n- lets now see the department name for each employee \n\n```\nselect emp_id, dep_name from employees E, department D\nwhere E.dep_id = D.dep_id\n```\n\n- We can also for the example above fix the column names using aliases\n\n```\nselect e.emp_id, d.dep_name from employees E, department D\nwhere E.dep_id = D.dep_id\n```\n\n## Exercise\n\n1. Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from jobs\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| job_id|job_title             | min_sal| max_sal|\n|------:|:---------------------|-------:|-------:|\n|    100|Sr. Architect         |   60000|   1e+05|\n|    200|Sr.Software Developer |   60000|   8e+04|\n|    300|Jr.Software Developer |   40000|   6e+04|\n|    400|Jr.Software Developer |   40000|   6e+04|\n|    500|Jr. Architect         |   50000|   7e+04|\n|    600|Lead Architect        |   70000|   1e+05|\n|    650|Jr. Designer          |   60000|   7e+04|\n|    660|Jr. Designer          |   60000|   7e+04|\n|    234|Sr. Designer          |   70000|   9e+04|\n|    220|Sr. Designer          |   70000|   9e+04|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\nwhere job_id in (select job_id from jobs)\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|emp_id |f_name  |l_name  |    ssn|b_date     |sex |address                      | job_id| salary| manager_id| dep_id|\n|:------|:-------|:-------|------:|:----------|:---|:----------------------------|------:|------:|----------:|------:|\n|E1001  |John    |Thomas  | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL        |    100| 100000|      30001|      2|\n|E1002  |Alice   |James   | 123457|1972-07-31 |F   |980 Berry ln, Elgin,IL       |    200|  80000|      30002|      5|\n|E1003  |Steve   |Wells   | 123458|1980-08-10 |M   |291 Springs, Gary,IL         |    300|  50000|      30002|      5|\n|E1004  |Santosh |Kumar   | 123459|1985-07-20 |M   |511 Aurora Av, Aurora,IL     |    400|  60000|      30004|      5|\n|E1005  |Ahmed   |Hussain | 123410|1960-07-20 |M   |216 Oak Tree, Geneva,IL      |    500|  70000|      30001|      2|\n|E1006  |Nancy   |Allen   | 123411|1960-07-21 |F   |111 Green Pl, Elgin,IL       |    600|  90000|      30001|      2|\n|E1007  |Mary    |Thomas  | 123412|1960-07-22 |F   |100 Rose Pl, Gary,IL         |    650|  65000|      30003|      7|\n|E1008  |Bharath |Gupta   | 123413|1960-07-23 |M   |145 Berry Ln, Naperville,IL  |    660|  65000|      30003|      7|\n|E1009  |Andrea  |Jones   | 123414|1960-07-24 |F   |120 Fall Creek, Gary,IL      |    234|  70000|      30003|      7|\n|E1010  |Ann     |Jacob   | 123415|1960-07-25 |F   |111 Britany Springs,Elgin,IL |    220|  70000|      30004|      5|\n\n</div>\n:::\n\n2. Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees\nwhere job_id in (select job_id from jobs where job_title=\"Jr. Designer\")\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|emp_id |f_name  |l_name |    ssn|b_date     |sex |address                     | job_id| salary| manager_id| dep_id|\n|:------|:-------|:------|------:|:----------|:---|:---------------------------|------:|------:|----------:|------:|\n|E1007  |Mary    |Thomas | 123412|1960-07-22 |F   |100 Rose Pl, Gary,IL        |    650|  65000|      30003|      7|\n|E1008  |Bharath |Gupta  | 123413|1960-07-23 |M   |145 Berry Ln, Naperville,IL |    660|  65000|      30003|      7|\n\n</div>\n:::\n\n\n\n3. Retrieve JOB information and who earn more than $70,000.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from jobs\nwhere job_id in (select job_id from employees where salary > 70000)\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n| job_id|job_title             | min_sal| max_sal|\n|------:|:---------------------|-------:|-------:|\n|    100|Sr. Architect         |   60000|   1e+05|\n|    200|Sr.Software Developer |   60000|   8e+04|\n|    600|Lead Architect        |   70000|   1e+05|\n\n</div>\n:::\n\n\n4. Retrieve JOB information and whose birth year is after 1976.\n\nMysql\n\n```\nselect * from jobs\nwhere job_id in (select job_id from employees where year(b_date)>1976)\n```\n\nSQlite\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from jobs\nwhere job_id in (select job_id from employees where strftime('%Y', employees.b_date) > '1976')\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n| job_id|job_title             | min_sal| max_sal|\n|------:|:---------------------|-------:|-------:|\n|    300|Jr.Software Developer |   40000|   60000|\n|    400|Jr.Software Developer |   40000|   60000|\n\n</div>\n:::\n\n5. Retrieve JOB information for female employees whose birth year is after 1976.\n\nMysql \n\n```\nselect JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from jobs \nwhere JOB_IDENT IN (select JOB_ID from employees where YEAR(B_DATE)>1976 and SEX='F' );\n```\n\n\nSQlite \n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect JOB_TITLE, min_sal,max_sal,job_id from jobs \nwhere job_id IN (select JOB_ID from employees where strftime('%Y', employees.b_date) < '1961'  and SEX='F' );\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 4 records\n\n|job_title      | min_sal| max_sal| job_id|\n|:--------------|-------:|-------:|------:|\n|Lead Architect |   70000|   1e+05|    600|\n|Jr. Designer   |   60000|   7e+04|    650|\n|Sr. Designer   |   70000|   9e+04|    234|\n|Sr. Designer   |   70000|   9e+04|    220|\n\n</div>\n:::\n\n\n6. Perform an implicit cartesian/cross join between EMPLOYEES and JOBS tables.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees,jobs\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|emp_id |f_name |l_name |    ssn|b_date     |sex |address               | job_id| salary| manager_id| dep_id| job_id|job_title             | min_sal| max_sal|\n|:------|:------|:------|------:|:----------|:---|:---------------------|------:|------:|----------:|------:|------:|:---------------------|-------:|-------:|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    100|Sr. Architect         |   60000|   1e+05|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    200|Sr.Software Developer |   60000|   8e+04|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    300|Jr.Software Developer |   40000|   6e+04|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    400|Jr.Software Developer |   40000|   6e+04|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    500|Jr. Architect         |   50000|   7e+04|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    600|Lead Architect        |   70000|   1e+05|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    650|Jr. Designer          |   60000|   7e+04|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    660|Jr. Designer          |   60000|   7e+04|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    234|Sr. Designer          |   70000|   9e+04|\n|E1001  |John   |Thomas | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL |    100|  1e+05|      30001|      2|    220|Sr. Designer          |   70000|   9e+04|\n\n</div>\n:::\n\n\n7. Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect * from employees e,jobs j\nwhere e.job_id = j.job_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|emp_id |f_name  |l_name  |    ssn|b_date     |sex |address                      | job_id| salary| manager_id| dep_id| job_id|job_title             | min_sal| max_sal|\n|:------|:-------|:-------|------:|:----------|:---|:----------------------------|------:|------:|----------:|------:|------:|:---------------------|-------:|-------:|\n|E1001  |John    |Thomas  | 123456|1976-09-01 |M   |5631 Rice, OakPark,IL        |    100| 100000|      30001|      2|    100|Sr. Architect         |   60000|   1e+05|\n|E1002  |Alice   |James   | 123457|1972-07-31 |F   |980 Berry ln, Elgin,IL       |    200|  80000|      30002|      5|    200|Sr.Software Developer |   60000|   8e+04|\n|E1003  |Steve   |Wells   | 123458|1980-08-10 |M   |291 Springs, Gary,IL         |    300|  50000|      30002|      5|    300|Jr.Software Developer |   40000|   6e+04|\n|E1004  |Santosh |Kumar   | 123459|1985-07-20 |M   |511 Aurora Av, Aurora,IL     |    400|  60000|      30004|      5|    400|Jr.Software Developer |   40000|   6e+04|\n|E1005  |Ahmed   |Hussain | 123410|1960-07-20 |M   |216 Oak Tree, Geneva,IL      |    500|  70000|      30001|      2|    500|Jr. Architect         |   50000|   7e+04|\n|E1006  |Nancy   |Allen   | 123411|1960-07-21 |F   |111 Green Pl, Elgin,IL       |    600|  90000|      30001|      2|    600|Lead Architect        |   70000|   1e+05|\n|E1007  |Mary    |Thomas  | 123412|1960-07-22 |F   |100 Rose Pl, Gary,IL         |    650|  65000|      30003|      7|    650|Jr. Designer          |   60000|   7e+04|\n|E1008  |Bharath |Gupta   | 123413|1960-07-23 |M   |145 Berry Ln, Naperville,IL  |    660|  65000|      30003|      7|    660|Jr. Designer          |   60000|   7e+04|\n|E1009  |Andrea  |Jones   | 123414|1960-07-24 |F   |120 Fall Creek, Gary,IL      |    234|  70000|      30003|      7|    234|Sr. Designer          |   70000|   9e+04|\n|E1010  |Ann     |Jacob   | 123415|1960-07-25 |F   |111 Britany Springs,Elgin,IL |    220|  70000|      30004|      5|    220|Sr. Designer          |   70000|   9e+04|\n\n</div>\n:::\n\n8. Redo the previous query, but retrieve only the Employee ID, Employee Name and Job Title.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect e.emp_id,e.f_name,j.job_title from employees e,jobs j\nwhere e.job_id = j.job_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|emp_id |f_name  |job_title             |\n|:------|:-------|:---------------------|\n|E1001  |John    |Sr. Architect         |\n|E1002  |Alice   |Sr.Software Developer |\n|E1003  |Steve   |Jr.Software Developer |\n|E1004  |Santosh |Jr.Software Developer |\n|E1005  |Ahmed   |Jr. Architect         |\n|E1006  |Nancy   |Lead Architect        |\n|E1007  |Mary    |Jr. Designer          |\n|E1008  |Bharath |Jr. Designer          |\n|E1009  |Andrea  |Sr. Designer          |\n|E1010  |Ann     |Sr. Designer          |\n\n</div>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}