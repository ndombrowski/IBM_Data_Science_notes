[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to SQL",
    "section": "",
    "text": "Intro to SQL\n\n#in terminal set python path for R:\n#nano $HOME/.Renviron\n#RETICULATE_PYTHON=\"/opt/anaconda3/bin/python3.7\"\n\n#set reticulate py version\n#ibrary(\"reticulate\")\n#repl_python()\n\n#make sure in the global options -> markdown -> to set the wdir to project\n#also make the mark at show output inline for all r markdown docs to be able to execute bash/sql\n\n#install for R internal py\n#/Users/ninadombrowski/Library/r-miniconda/envs/r-reticulate/bin/python -m pip install -U seaborn\n\n#install via terminal\n#/opt/anaconda3/bin/python3.7 -m pip install -U yfinance\n\n#watson:\n#https://eu-de.dataplatform.cloud.ibm.com/projects/c0e22bcd-1461-4381-a45a-9b55ee8d6643?context=cpdaas\n\n#notebook for watson\n#https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/Final%20Assignment.ipynb\n\n#https://eu-de.dataplatform.cloud.ibm.com/analytics/notebooks/v2/effc3192-d2ca-402c-836b-ae2bc252ffbf?projectid=c0e22bcd-1461-4381-a45a-9b55ee8d6643&context=cpdaas\n\n#link to finished notebook\n#https://eu-de.dataplatform.cloud.ibm.com/analytics/notebooks/v2/effc3192-d2ca-402c-836b-ae2bc252ffbf/view?access_token=eafb0019d830bd9df164400db6de2b78e94c787f6ed81b1c096396abfac40ab2"
  },
  {
    "objectID": "Week1-Notes.html",
    "href": "Week1-Notes.html",
    "title": "2  Basic SQL",
    "section": "",
    "text": "What is SQL?\n\nStructured English Query language\nLanguage used for relational databases\nUsed to query data\n\nWhat is data?\n\nA collection of facts with words, numbers or pictures\nOne of the most critical assets in any business\nNeeds to be secure\n\nWhat is a database?\n\nA repository of data\nProvides functionality to add, modify and query data\nDifferent kind of databases for different requirements\n\nRelational database:\n\nData is stored in tabular form, i.e. consists of rows and columns\nColumns contain properties, i.e names, age\nA table is a collection of related things, i.e. list of employees\nWe can make relationships between tables (hence: relational)\n\nDBMS:\n\nDatabase Management system, a software to manage databases\nInterchangeable use of database, database server, database sytem, data server or DBMS\n\nRDBMS:\n\nRelational database management system\nSet of software tools that controls the data\n\ncontrols access, organization and storage\n\nExamples; MySQL, Oracle, IBM Dbs, etc"
  },
  {
    "objectID": "Week1-Notes.html#the-select-statement",
    "href": "Week1-Notes.html#the-select-statement",
    "title": "2  Basic SQL",
    "section": "2.2 The SELECT statement",
    "text": "2.2 The SELECT statement\n\n2.2.1 How to retrieve rows from a table\n\nAfter creating a table and inserting data into a table we want to see the data\nSELECT statement is a data manipulation language (DML) statement used to read and modify data\nThe select statement is called a query\nThe output we get from a query is called the results\nThe basic command looks like this\n\nSELECT * from <tablename>\n\nWe can only retrieve the columns we want, i.e.\n\nSELECT <column1>, <column2> from <tablename>\n\nThe order in the columns displayed table matches the order in the used select statement\n\n\n\n2.2.2 Restricting the results set via the WHERE clause\n\nThis clause restricts the results set\nRequires a predicate that is conditions to\n\nevaluate to true, false or unknown\npredicates are used in the search condition of the where clause\n\nExample: We want to have the title from the book with the book ID B1\n\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition\n;\n\nFROM: Specifies from which table to get the data. The clause can include optional JOIN subclauses to specify the rules for joining tables.\n[Optional Clause] WHERE : Specifies which rows to retrieve.\nSome database systems require a semicolon at the end of each SQL statement for execution. It is a standard way to separate one SQL statement from another which allows more than one SQL statement to be executed in the same call to the server. So, it is good practice to use a semicolon at the end of each SQL statement.\n\nSELECT book_id, title from Book.db\n  WHERE book_id = 'B1'\n\nWe can also use other comparison operators\n\nequal to –> =\ngreater than –> >\nless than –> <\ngreater than or equal to –> >=\nless than or equal to –> <=\nnot equal to –> <>\n\n\n\n\n2.2.3 Exercise\nTo reproduce the example, we\n\nDownloaded datasette from the web\nDownloaded the SanFranciscoFilmLocations database as csv from here\nwe converted this to a datasette database with csvs-to-sqlite Film_Locations_in_San_Francisco.csv Film_Locations_in_San_Francisco.db\nand opened the datasette with datasette Film_Locations_in_San_Francisco.db\n\nWe can also load the db into r:\n\n2.2.3.1 Task A: explore the database\n\nlibrary(DBI)\ndb = dbConnect(RSQLite::SQLite(), dbname =\"Week1/Film_Locations_in_San_Francisco.db\")\n\n#set connection for each chunk, other wise we would need `{sql, connection=db}`\nknitr::opts_chunk$set(connection = \"db\", max.print = 10)\n#knitr::opts_chunk$set(connection = \"db2\", max.print = 5)\n\n#show less columns\n#options(max.print = 5)\n\n\n\n2.2.3.2 Task B: Example exercises\n\nIn this example, suppose we want to retrieve details of all the films from the “FilmLocations” table. The details of each film record should contain all the film columns.\n\n\nSELECT * FROM Film_Locations_in_San_Francisco\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTitle\nRelease Year\nLocations\nFun Facts\nProduction Company\nDistributor\nDirector\nWriter\nActor 1\nActor 2\nActor 3\n\n\n\n\nA Jitney Elopement\n1915\n20th and Folsom Streets\nNA\nThe Essanay Film Manufacturing Company\nGeneral Film Company\nCharles Chaplin\nCharles Chaplin\nCharles Chaplin\nEdna Purviance\nNA\n\n\nA Jitney Elopement\n1915\nGolden Gate Park\nDuring San Francisco’s Gold Rush era, the Park was part of an area designated as the “Great Sand Waste”.\nThe Essanay Film Manufacturing Company\nGeneral Film Company\nCharles Chaplin\nCharles Chaplin\nCharles Chaplin\nEdna Purviance\nNA\n\n\nGreed\n1924\nCliff House (1090 Point Lobos Avenue)\nIn 1887, the Cliff House was severely damaged when the schooner Parallel, abandoned and loaded with dynamite, ran aground on the rocks below.\nMetro-Goldwyn-Mayer (MGM)\nMetro-Goldwyn-Mayer (MGM)\nEric von Stroheim\nEric von Stroheim\nZasu Pitts\nGibson Gowland\nJean Hersholt\n\n\nGreed\n1924\nBush and Sutter Streets\nNA\nMetro-Goldwyn-Mayer (MGM)\nMetro-Goldwyn-Mayer (MGM)\nEric von Stroheim\nEric von Stroheim\nZasu Pitts\nGibson Gowland\nJean Hersholt\n\n\nGreed\n1924\nHayes Street at Laguna\nNA\nMetro-Goldwyn-Mayer (MGM)\nMetro-Goldwyn-Mayer (MGM)\nEric von Stroheim\nEric von Stroheim\nZasu Pitts\nGibson Gowland\nJean Hersholt\n\n\nThe Jazz Singer\n1927\nCoffee Dan’s (O’Farrell Street at Powell)\nNA\nWarner Bros. Pictures\nWarner Bros. Pictures\nAlan Crosland\nAlfred A. Cohn\nAl Jolson\nMay McAvoy\nWarner Oland\n\n\nBarbary Coast\n1935\nNA\nNA\nThe Samuel Goldwyn Company\nUnited Artists\nHoward Hawks\nBen Hecht\nMariam Hopkins\nEdward G. Robinson\nJoel McCrea\n\n\nAfter the Thin Man\n1936\nCoit Tower\nThe Tower was funded by a gift bequeathed by Lillie Hitchcock Coit, a socialite who reportedly liked to chase fires. Though the tower resembles a firehose nozzle, it was not designed this way.\nMetro-Goldwyn Mayer\nMetro-Goldwyn Mayer\nW.S. Van Dyke\nFrances Goodrich\nWilliam Powell\nMyrna Loy\nJames Stewart\n\n\nSan Francisco\n1936\nThe Barbary Coast\nThe Barbary Coast was a red-light district that was largely destroyed in the 1906 earthquake. Though some of the establishments were rebuilt after the earthquake, an anti-vice campaign put the establishments out of business.\nMetro-Goldwyn Mayer\nMetro-Goldwyn Mayer\nW.S. Van Dyke\nAnita Loos\nClark Gable\nJeanette MacDonald\nSpencer Tracy\n\n\nSan Francisco\n1936\nCity Hall\nThe dome of SF’s City Hall is almost a foot taller than that of the US Capitol Building. In 1954, Joe DiMaggio and Marilyn Monroe married at the Beaux Arts-style building.\nMetro-Goldwyn Mayer\nMetro-Goldwyn Mayer\nW.S. Van Dyke\nAnita Loos\nClark Gable\nJeanette MacDonald\nSpencer Tracy\n\n\n\n\n\n\nIn this example, now we want to retrieve selective details of all the film records. Let us retrieve the names of all the films along with director names and writer names.\n\n\nSELECT Title, Director,Writer FROM Film_Locations_in_San_Francisco\n\n\nDisplaying records 1 - 10\n\n\nTitle\nDirector\nWriter\n\n\n\n\nA Jitney Elopement\nCharles Chaplin\nCharles Chaplin\n\n\nA Jitney Elopement\nCharles Chaplin\nCharles Chaplin\n\n\nGreed\nEric von Stroheim\nEric von Stroheim\n\n\nGreed\nEric von Stroheim\nEric von Stroheim\n\n\nGreed\nEric von Stroheim\nEric von Stroheim\n\n\nThe Jazz Singer\nAlan Crosland\nAlfred A. Cohn\n\n\nBarbary Coast\nHoward Hawks\nBen Hecht\n\n\nAfter the Thin Man\nW.S. Van Dyke\nFrances Goodrich\n\n\nSan Francisco\nW.S. Van Dyke\nAnita Loos\n\n\nSan Francisco\nW.S. Van Dyke\nAnita Loos\n\n\n\n\n\n\nIn this example, we want to retrieve film names along with filming locations and release years. But we also want to restrict the output resultset so that we can retrieve only the film records released in 2001 and onwards (release years after 2001 including 2001).\n\nNotice If we have a space in the column header, we need to use quotes.\n\nSELECT Title, Locations,\"Release Year\" FROM Film_Locations_in_San_Francisco\nWHERE \"Release Year\" >=2001\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\nTitle\nLocations\nRelease Year\n\n\n\n\nBy Hook or By Crook\nThe Lexington Club (3464 19th Street at Lexington)\n2001\n\n\nBy Hook or By Crook\nRoyan Hotel (405 Valencia Street, Mission District)\n2001\n\n\nBy Hook or By Crook\nDepartment of Public Health (101 Grove Street at Polk, Civic Center)\n2001\n\n\nDr. Dolittle 2\nWest Chrissy Field (Presidio, Golden Gate National Recreation Area)\n2001\n\n\nDr. Dolittle 2\nSacramento St., Between Pierce & Broderick Streets\n2001\n\n\nDr. Dolittle 2\nHyde Street & Lombard Street\n2001\n\n\nDr. Dolittle 2\nBuilding 924, Presidio (Golden Gate National Recreation Area)\n2001\n\n\nDr. Dolittle 2\nBroadway, Between Franklin & Laguna Streets\n2001\n\n\nHaiku Tunnel\nNA\n2001\n\n\nMission (aka City of Bars)\nThe 500 Club (500 Guerrero Street, Mission District)\n2001\n\n\n\n\n\n\nRetrieve the fun facts and filming locations of all films.\n\n\nSELECT \"Fun Facts\",Locations FROM Film_Locations_in_San_Francisco\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\nFun Facts\nLocations\n\n\n\n\nNA\n20th and Folsom Streets\n\n\nDuring San Francisco’s Gold Rush era, the Park was part of an area designated as the “Great Sand Waste”.\nGolden Gate Park\n\n\nIn 1887, the Cliff House was severely damaged when the schooner Parallel, abandoned and loaded with dynamite, ran aground on the rocks below.\nCliff House (1090 Point Lobos Avenue)\n\n\nNA\nBush and Sutter Streets\n\n\nNA\nHayes Street at Laguna\n\n\nNA\nCoffee Dan’s (O’Farrell Street at Powell)\n\n\nNA\nNA\n\n\nThe Tower was funded by a gift bequeathed by Lillie Hitchcock Coit, a socialite who reportedly liked to chase fires. Though the tower resembles a firehose nozzle, it was not designed this way.\nCoit Tower\n\n\nThe Barbary Coast was a red-light district that was largely destroyed in the 1906 earthquake. Though some of the establishments were rebuilt after the earthquake, an anti-vice campaign put the establishments out of business.\nThe Barbary Coast\n\n\nThe dome of SF’s City Hall is almost a foot taller than that of the US Capitol Building. In 1954, Joe DiMaggio and Marilyn Monroe married at the Beaux Arts-style building.\nCity Hall\n\n\n\n\n\n\nRetrieve the names of all films released in the 20th century and before (release years before 2000 including 2000) that, along with filming locations and release years.\n\n\nSELECT Title,Locations,\"Release Year\" FROM Film_Locations_in_San_Francisco\nWHERE \"Release Year\" <= 2000\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\nTitle\nLocations\nRelease Year\n\n\n\n\nA Jitney Elopement\n20th and Folsom Streets\n1915\n\n\nA Jitney Elopement\nGolden Gate Park\n1915\n\n\nGreed\nCliff House (1090 Point Lobos Avenue)\n1924\n\n\nGreed\nBush and Sutter Streets\n1924\n\n\nGreed\nHayes Street at Laguna\n1924\n\n\nThe Jazz Singer\nCoffee Dan’s (O’Farrell Street at Powell)\n1927\n\n\nBarbary Coast\nNA\n1935\n\n\nAfter the Thin Man\nCoit Tower\n1936\n\n\nSan Francisco\nThe Barbary Coast\n1936\n\n\nSan Francisco\nCity Hall\n1936\n\n\n\n\n\n\nRetrieve the names, production company names, filming locations, and release years of the films which are not written by James Cameron.\n\n\nSELECT Title,\"Production Company\",Locations, \"Release Year\", Writer FROM Film_Locations_in_San_Francisco\nWHERE Writer <> \"James Cameron\"\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\nTitle\nProduction Company\nLocations\nRelease Year\nWriter\n\n\n\n\nA Jitney Elopement\nThe Essanay Film Manufacturing Company\n20th and Folsom Streets\n1915\nCharles Chaplin\n\n\nA Jitney Elopement\nThe Essanay Film Manufacturing Company\nGolden Gate Park\n1915\nCharles Chaplin\n\n\nGreed\nMetro-Goldwyn-Mayer (MGM)\nCliff House (1090 Point Lobos Avenue)\n1924\nEric von Stroheim\n\n\nGreed\nMetro-Goldwyn-Mayer (MGM)\nBush and Sutter Streets\n1924\nEric von Stroheim\n\n\nGreed\nMetro-Goldwyn-Mayer (MGM)\nHayes Street at Laguna\n1924\nEric von Stroheim\n\n\nThe Jazz Singer\nWarner Bros. Pictures\nCoffee Dan’s (O’Farrell Street at Powell)\n1927\nAlfred A. Cohn\n\n\nBarbary Coast\nThe Samuel Goldwyn Company\nNA\n1935\nBen Hecht\n\n\nAfter the Thin Man\nMetro-Goldwyn Mayer\nCoit Tower\n1936\nFrances Goodrich\n\n\nSan Francisco\nMetro-Goldwyn Mayer\nThe Barbary Coast\n1936\nAnita Loos\n\n\nSan Francisco\nMetro-Goldwyn Mayer\nCity Hall\n1936\nAnita Loos"
  },
  {
    "objectID": "Week1-Notes.html#count-distinct-limit",
    "href": "Week1-Notes.html#count-distinct-limit",
    "title": "2  Basic SQL",
    "section": "2.3 Count, Distinct, limit",
    "text": "2.3 Count, Distinct, limit\n\n2.3.1 Count\n\nNumber of rows that meet target criteria\nselect COUNT(*) from table to get the total number of rows in a table\nselect COUNT(COUNTRY) from Medals; where COUNTRY='Canada': Rows in the medals table were the country is Canada\n\n\n\n2.3.2 Distinct\n\nRemove duplicate values\nselect DISTINCT columnname from table: retrieve unique values in a column\nselect DISTINCT Country from Medals; where Medaltype == 'GOLD': get a list of unique countries that received gold medals\n\n\n\n2.3.3 Limit\n\nUsed to restrict the number of rows retrieved from a database\nselect * from table LIMIT 10: retrieve only the first 10 rows\nselect * from Medals; where YEAR = 2018 LIMIT 5: retrieve 5 rows in the Medals table for a specific year\n\n\n2.3.3.1 Exercises\n\nRetrieve the number of rows from the “FilmLocations” table.\n\n\nselect COUNT(*) from Film_Locations_in_San_Francisco\n\n\n1 records\n\n\nCOUNT(*)\n\n\n\n\n1976\n\n\n\n\n\n\nIn this example, now we want to count the number of locations of the films. But we also want to restrict the output resultset in such a way that we only retrieve the number of locations of the films written by a certain writer. Retrieve the number of locations of the films which are written by James Cameron.\n\n\nselect COUNT(Locations) from Film_Locations_in_San_Francisco\nwhere Writer = \"James Cameron\"\n\n\n1 records\n\n\nCOUNT(Locations)\n\n\n\n\n24\n\n\n\n\n\n\nRetrieve the number of locations of the films which are directed by Woody Allen.\n\n\nselect COUNT(Locations) from Film_Locations_in_San_Francisco\nwhere Director = \"Woody Allen\"\n\n\n1 records\n\n\nCOUNT(Locations)\n\n\n\n\n31\n\n\n\n\n\n\nRetrieve the number of films shot at Russian Hill.\n\n\nselect COUNT(Title) from Film_Locations_in_San_Francisco\nwhere Locations = \"Russian Hill\"\n\n\n1 records\n\n\nCOUNT(Title)\n\n\n\n\n1\n\n\n\n\n\n\nRetrieve the number of rows having a release year older than 1950 from the “FilmLocations” table.\n\n\nselect COUNT(*) from Film_Locations_in_San_Francisco\nwhere \"Release Year\" > 1950\n\n\n1 records\n\n\nCOUNT(*)\n\n\n\n\n1929\n\n\n\n\n\n\nIn this example, we want to retrieve the title of all films in the table in such a way that duplicates will be discarded in the output resultset. Retrieve the name of all films without any repeated titles.\n\n\nselect DISTINCT Title from Film_Locations_in_San_Francisco\n\n\nDisplaying records 1 - 10\n\n\nTitle\n\n\n\n\nA Jitney Elopement\n\n\nGreed\n\n\nThe Jazz Singer\n\n\nBarbary Coast\n\n\nAfter the Thin Man\n\n\nSan Francisco\n\n\nAlexander’s Ragtime Band\n\n\nShadow of the Thin Man\n\n\nThe Maltese Falcon\n\n\nGentleman Jim\n\n\n\n\n\n\nIn this example, we want to retrieve the count of release years of the films produced by a specific company in such a way that duplicate release years of those films will be discarded in the count. Retrieve the number of release years of the films distinctly, produced by Warner Bros. Pictures.\n\n\nselect COUNT(DISTINCT \"Release Year\") from Film_Locations_in_San_Francisco\nwhere \"Production Company\" = \"Warner Bros. Pictures\"\n\n\n1 records\n\n\nCOUNT(DISTINCT “Release Year”)\n\n\n\n\n14\n\n\n\n\n\n\nRetrieve the name of all unique films released in the 21st century and onwards, along with their release years.\n\n\nselect DISTINCT Title, \"Release Year\" from Film_Locations_in_San_Francisco\nwhere \"Release Year\" >= 2001\n\n\nDisplaying records 1 - 10\n\n\nTitle\nRelease Year\n\n\n\n\nBy Hook or By Crook\n2001\n\n\nDr. Dolittle 2\n2001\n\n\nHaiku Tunnel\n2001\n\n\nMission (aka City of Bars)\n2001\n\n\nNever Die Twice\n2001\n\n\nSerendipity\n2001\n\n\nSweet November\n2001\n\n\nThe Princess Diaries\n2001\n\n\nThe Wedding Planner\n2001\n\n\n40 Days and 40 Nights\n2002\n\n\n\n\n\n\nRetrieve the names of all the directors and their distinct films shot at City Hall.\n\n\nselect DISTINCT Director, Title from Film_Locations_in_San_Francisco\nwhere Locations = \"City Hall\"\n\n\nDisplaying records 1 - 10\n\n\nDirector\nTitle\n\n\n\n\nW.S. Van Dyke\nSan Francisco\n\n\nTed Post\nMagnum Force\n\n\nJames Fargo\nThe Enforcer\n\n\nColin Higgins\nFoul Play\n\n\nPhilip Kaufman\nInvasion of the Body Snatchers\n\n\nPhilip Kaufman\nThe Right Stuff\n\n\nJohn Glen\nA View to a Kill\n\n\nRichard Marquand\nJagged Edge\n\n\nFrancis Ford Coppola\nTucker: The Man and His Dream\n\n\nMichael Apted\nClass Action\n\n\n\n\n\n\nRetrieve the number of distributors distinctly who distributed films acted by Clint Eastwood as 1st actor.\n\n\nselect COUNT (DISTINCT Distributor) from Film_Locations_in_San_Francisco\nwhere \"Actor 1\" = \"Clint Eastwood\"\n\n\n1 records\n\n\nCOUNT (DISTINCT Distributor)\n\n\n\n\n3\n\n\n\n\n\n\nIn this example, let us retrieve a specific number of rows from the top of the table in such a way that rows other than those are not in the output resultset. Retrieve the first 25 rows from the “FilmLocations” table.\n\n\nselect * from Film_Locations_in_San_Francisco Limit 25\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTitle\nRelease Year\nLocations\nFun Facts\nProduction Company\nDistributor\nDirector\nWriter\nActor 1\nActor 2\nActor 3\n\n\n\n\nA Jitney Elopement\n1915\n20th and Folsom Streets\nNA\nThe Essanay Film Manufacturing Company\nGeneral Film Company\nCharles Chaplin\nCharles Chaplin\nCharles Chaplin\nEdna Purviance\nNA\n\n\nA Jitney Elopement\n1915\nGolden Gate Park\nDuring San Francisco’s Gold Rush era, the Park was part of an area designated as the “Great Sand Waste”.\nThe Essanay Film Manufacturing Company\nGeneral Film Company\nCharles Chaplin\nCharles Chaplin\nCharles Chaplin\nEdna Purviance\nNA\n\n\nGreed\n1924\nCliff House (1090 Point Lobos Avenue)\nIn 1887, the Cliff House was severely damaged when the schooner Parallel, abandoned and loaded with dynamite, ran aground on the rocks below.\nMetro-Goldwyn-Mayer (MGM)\nMetro-Goldwyn-Mayer (MGM)\nEric von Stroheim\nEric von Stroheim\nZasu Pitts\nGibson Gowland\nJean Hersholt\n\n\nGreed\n1924\nBush and Sutter Streets\nNA\nMetro-Goldwyn-Mayer (MGM)\nMetro-Goldwyn-Mayer (MGM)\nEric von Stroheim\nEric von Stroheim\nZasu Pitts\nGibson Gowland\nJean Hersholt\n\n\nGreed\n1924\nHayes Street at Laguna\nNA\nMetro-Goldwyn-Mayer (MGM)\nMetro-Goldwyn-Mayer (MGM)\nEric von Stroheim\nEric von Stroheim\nZasu Pitts\nGibson Gowland\nJean Hersholt\n\n\nThe Jazz Singer\n1927\nCoffee Dan’s (O’Farrell Street at Powell)\nNA\nWarner Bros. Pictures\nWarner Bros. Pictures\nAlan Crosland\nAlfred A. Cohn\nAl Jolson\nMay McAvoy\nWarner Oland\n\n\nBarbary Coast\n1935\nNA\nNA\nThe Samuel Goldwyn Company\nUnited Artists\nHoward Hawks\nBen Hecht\nMariam Hopkins\nEdward G. Robinson\nJoel McCrea\n\n\nAfter the Thin Man\n1936\nCoit Tower\nThe Tower was funded by a gift bequeathed by Lillie Hitchcock Coit, a socialite who reportedly liked to chase fires. Though the tower resembles a firehose nozzle, it was not designed this way.\nMetro-Goldwyn Mayer\nMetro-Goldwyn Mayer\nW.S. Van Dyke\nFrances Goodrich\nWilliam Powell\nMyrna Loy\nJames Stewart\n\n\nSan Francisco\n1936\nThe Barbary Coast\nThe Barbary Coast was a red-light district that was largely destroyed in the 1906 earthquake. Though some of the establishments were rebuilt after the earthquake, an anti-vice campaign put the establishments out of business.\nMetro-Goldwyn Mayer\nMetro-Goldwyn Mayer\nW.S. Van Dyke\nAnita Loos\nClark Gable\nJeanette MacDonald\nSpencer Tracy\n\n\nSan Francisco\n1936\nCity Hall\nThe dome of SF’s City Hall is almost a foot taller than that of the US Capitol Building. In 1954, Joe DiMaggio and Marilyn Monroe married at the Beaux Arts-style building.\nMetro-Goldwyn Mayer\nMetro-Goldwyn Mayer\nW.S. Van Dyke\nAnita Loos\nClark Gable\nJeanette MacDonald\nSpencer Tracy\n\n\n\n\n\n\nIn this example, let us take the first example to a more advanced level. Now we want to retrieve a specific number of rows from the table, but this time, not from the top of the table. This time we want to retrieve a specific number of rows starting from a specific row in the table. Retrieve the first 15 rows from the “FilmLocations” table starting from row 11. For this we use OFFSET\n\n\nselect * from Film_Locations_in_San_Francisco Limit 15 OFFSET 10\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTitle\nRelease Year\nLocations\nFun Facts\nProduction Company\nDistributor\nDirector\nWriter\nActor 1\nActor 2\nActor 3\n\n\n\n\nAlexander’s Ragtime Band\n1938\nCliff House (1090 Point Lobos Avenue)\nIn 1887, the Cliff House was severely damaged when the schooner Parallel, abandoned and loaded with dynamite, ran aground on the rocks below.\nTwentieth Century Fox Film Corporation\nTwentieth Century Fox Film Corporation\nHenry King\nKathryn Scola\nTyrone Power\nAlice Faye\nDon Ameche\n\n\nAlexander’s Ragtime Band\n1938\nSan Francisco Bay\nNA\nTwentieth Century Fox Film Corporation\nTwentieth Century Fox Film Corporation\nHenry King\nKathryn Scola\nTyrone Power\nAlice Faye\nDon Ameche\n\n\nAlexander’s Ragtime Band\n1938\nFairmont Hotel (950 Mason Street, Nob Hill)\nIn 1945 the Fairmont hosted the United Nations Conference on International Organization as delegates arrived to draft a charter for the organization. The U.S. Secretary of State, Edward Stettinius drafted the charter in the hotel’s Garden Room.\nTwentieth Century Fox Film Corporation\nTwentieth Century Fox Film Corporation\nHenry King\nKathryn Scola\nTyrone Power\nAlice Faye\nDon Ameche\n\n\nShadow of the Thin Man\n1941\nBay Bridge\nBefore opening in 1936, the bridge was blessed by Cardinal Secretary of State Eugenio Pacelli, who later became Pope Pius XII.\nMetro-Goldwyn Mayer\nMetro-Goldwyn Mayer\nW.S. Van Dyke\nHarry Kurnitz\nWilliam Powell\nMyrna Loy\nBarry Nelson\n\n\nThe Maltese Falcon\n1941\nGolden Gate Bridge\nWith 23 miles of ladders and 300,000 rivets in each tower, the Golden Gate Bridge was the world’s longest span when it opened in 1937.\nWarner Bros. Pictures\nWarner Bros. Pictures\nJohn Huston\nJohn Huston\nHumphrey Bogart\nMary Astor\nGladys George\n\n\nThe Maltese Falcon\n1941\nFerry Building\nEvery hour and half-hour, the clock bell atop the Ferry Building chimes portions of the Westminster Quarters.\nWarner Bros. Pictures\nWarner Bros. Pictures\nJohn Huston\nJohn Huston\nHumphrey Bogart\nMary Astor\nGladys George\n\n\nThe Maltese Falcon\n1941\nBurritt Alley (Off Bush Street, between Powell and Stockton Streets)\nNA\nWarner Bros. Pictures\nWarner Bros. Pictures\nJohn Huston\nJohn Huston\nHumphrey Bogart\nMary Astor\nGladys George\n\n\nGentleman Jim\n1942\nThe Barbary Coast\nThe Barbary Coast was a red-light district that was largely destroyed in the 1906 earthquake. Though some of the establishments were rebuilt after the earthquake, an anti-vice campaign put the establishments out of business.\nWarner Bros. Pictures\nWarner Bros. Pictures\nRaoul Walsh\nVincent Lawrence\nErrol Flynn\nAlexis Smith\nJack Carson\n\n\nHello Frisco, Hello\n1943\nNA\nNA\nTwentieth Century Fox Film Corporation\nTwentieth Century Fox Film Corporation\nBruce Humberstone\nRobert Ellis\nAlice Faye\nJohn Payne\nJack Oakie\n\n\nDark Passage\n1947\nGolden Gate Bridge\nWith 23 miles of ladders and 300,000 rivets in each tower, the Golden Gate Bridge was the world’s longest span when it opened in 1937.\nWarner Bros. Pictures\nWarner Bros. Pictures\nDelmer Daves\nDelmer Daves & David Goodis\nHumphrey Bogart\nLauren Bacal\nBruce Bennett\n\n\n\n\n\n\nRetrieve the name of first 50 films distinctly.\n\n\nselect Distinct Title from Film_Locations_in_San_Francisco Limit 50\n\n\nDisplaying records 1 - 10\n\n\nTitle\n\n\n\n\nA Jitney Elopement\n\n\nGreed\n\n\nThe Jazz Singer\n\n\nBarbary Coast\n\n\nAfter the Thin Man\n\n\nSan Francisco\n\n\nAlexander’s Ragtime Band\n\n\nShadow of the Thin Man\n\n\nThe Maltese Falcon\n\n\nGentleman Jim\n\n\n\n\n\n\nRetrieve first 10 film names distinctly released in 2015.\n\n\nselect Distinct Title from Film_Locations_in_San_Francisco\nwhere \"Release Year\" = 2015 Limit 10\n\n\nDisplaying records 1 - 10\n\n\nTitle\n\n\n\n\nAge of Adaline\n\n\nAmericana\n\n\nAnt-Man\n\n\nCardinal X\n\n\nI Am Michael\n\n\nLooking Season 2 ep 202\n\n\nLooking Season 2 ep 203\n\n\nLooking Season 2 ep 204\n\n\nLooking Season 2 ep 205\n\n\nLooking Season 2 ep 206\n\n\n\n\n\n\nRetrieve the next 3 film names distinctly after first 5 films released in 2015.\n\n\nselect Distinct Title from Film_Locations_in_San_Francisco\nwhere \"Release Year\" = 2015 Limit 3 OFFSET 5\n\n\n3 records\n\n\nTitle\n\n\n\n\nLooking Season 2 ep 202\n\n\nLooking Season 2 ep 203\n\n\nLooking Season 2 ep 204"
  },
  {
    "objectID": "Week1-Notes.html#insert",
    "href": "Week1-Notes.html#insert",
    "title": "2  Basic SQL",
    "section": "2.4 Insert",
    "text": "2.4 Insert\n\nThe insert statement is used to add rows to a table\nIts a DML statement used to read and modify data\n\nI.e lets add something to the author table, ie a new author:\nInsert into Author.db\n  (Author_ID, Lastname, Firstname)\nValues(\"A1\", \"Chong\", \"Raul\")\n\nImportant: the number of provided values should equal the number of column names specified in the column name list\n\nWe can insert multiple rows like this:\nInsert into Author.db\n  (Author_ID, Lastname, Firstname)\nValues\n  (\"A1\", \"Chong\", \"Raul\")\n  (\"A2\", \"Ahuja\", \"Rai\")"
  },
  {
    "objectID": "Week1-Notes.html#update",
    "href": "Week1-Notes.html#update",
    "title": "2  Basic SQL",
    "section": "2.5 Update",
    "text": "2.5 Update\n\nUpdate is used alter existing data in a table\nIf we don’t specify the where statement, ALL rows in the table will be updated\n\nWe want to update the Last and first Name for the author with the ID A2:\nUpdate Author.db\nSET LastName=\"Katta\"\n  Firstname=\"Lakshimi\"\n  Where author_id='A2'"
  },
  {
    "objectID": "Week1-Notes.html#delete",
    "href": "Week1-Notes.html#delete",
    "title": "2  Basic SQL",
    "section": "2.6 Delete",
    "text": "2.6 Delete\n\nused to remove 1 or more rows\n\nWe want to delete the rows for author ID A2 and A3\nDelete from author.db\n  Where author_id IN ('A2', \"A3\")\n\n2.6.1 Exercise\nPrepare the data by copy/pasting the data from the online tutorial into excel and save as csv. It was converted to an sql database with csvs-to-sqlite Instructor.csv Instructor.db\nPrep database for R\n\ndb2 = dbConnect(RSQLite::SQLite(), dbname =\"Week1/Instructor.db\")\n\n\nFirst have a look at the database\n\n\nSelect * from Instructor\n\n\nDisplaying records 1 - 10\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n1\nAhuja\nRav\nMarkham\nCA\n\n\n2\nChong\nRaul\nToronto\nCA\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n\n\n\n\nIn this example, suppose we want to insert a new single row into the Instructor table. Insert a new instructor record with id 4 for Sandip Saha who lives in Edmonton, CA into the “Instructor” table.\n\n\nInsert into Instructor (ins_id, lastname, firstname, city, country)\nVALUES (\"4\", \"Sandip\", \"Saha\", \"Edmonton\", \"CA\")\n\n\nSelect * from Instructor\n\n\nDisplaying records 1 - 10\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n1\nAhuja\nRav\nMarkham\nCA\n\n\n2\nChong\nRaul\nToronto\nCA\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n\n\n\n\nn this example, suppose we want to insert some new multiple rows into the Instructor table. Insert two new instructor records into the “Instructor” table. First record with id 5 for John Doe who lives in Sydney, AU. Second record with id 6 for Jane Doe who lives in Dhaka, BD.\n\n\nINSERT INTO Instructor(ins_id, lastname, firstname, city, country)\nVALUES(5, 'Doe', 'John', 'Sydney', 'AU'), (6, 'Doe', 'Jane', 'Dhaka', 'BD') \n\n\nSelect * from Instructor Limit 10\n\n\nDisplaying records 1 - 10\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n1\nAhuja\nRav\nMarkham\nCA\n\n\n2\nChong\nRaul\nToronto\nCA\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n\n\n\n\nInsert a new instructor record with id 7 for Antonio Cangiano who lives in Vancouver, CA into the “Instructor” table.\n\n\nInsert into Instructor(ins_id, lastname, firstname, city, country)\nValues(7, \"Cangiano\", \"Antonio\", \"Vancouver\", \"CA\")\n\n\nSelect * from Instructor Limit 5 OFFSET 4\n\n\n5 records\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n\n\n\n\nnsert two new instructor records into the “Instructor” table. First record with id 8 for Steve Ryan who lives in Barlby, GB. Second record with id 9 for Ramesh Sannareddy who lives in Hyderabad, IN.\n\n\nInsert into Instructor(ins_id, lastname, firstname, city, country)\nValues(8, \"Ryan\", \"Steve\", \"Varly\", \"GB\"),(9, \"Sannareddy\", \"Ramesh\", \"Hyderabad\", \"IN\")\n\n\nSelect * from Instructor Limit 5 OFFSET 4\n\n\n5 records\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n\n\n\n\nIn this example, we want to update one column of an existing row of the table. Update the city for Sandip to Toronto.\n\n\nUpdate Instructor\nSet city=\"Toronto\"\nWhere lastname=\"Sandip\"\n\n\nSelect * from Instructor\n\n\nDisplaying records 1 - 10\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n1\nAhuja\nRav\nMarkham\nCA\n\n\n2\nChong\nRaul\nToronto\nCA\n\n\n4\nSandip\nSaha\nToronto\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n4\nSandip\nSaha\nToronto\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n\n\n\n\nUpdate the city and country for Doe with id 5 to Dubai and AE respectively.\n\n\nUpdate Instructor\nSet city=\"Dubai\", country=\"AE\"\nWhere lastname=\"Doe\"\n\n\nSelect * from Instructor Limit 5 Offset 2\n\n\n5 records\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n4\nSandip\nSaha\nToronto\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n\n\n\n\nUpdate the city of the instructor record to Markham whose id is 1.\n\n\nUpdate Instructor\nSet city=\"Markham\"\nWhere ins_id=1\n\n\nSelect * from Instructor Limit 5 Offset 0\n\n\n5 records\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n1\nAhuja\nRav\nMarkham\nCA\n\n\n2\nChong\nRaul\nToronto\nCA\n\n\n4\nSandip\nSaha\nToronto\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n\n\n\n\nUpdate the city and country for Sandip with id 4 to Dhaka and BD respectively.\n\n\nUpdate Instructor\nSet city=\"Dhaka\", country=\"DB\"\nWhere ins_id=4\n\n\nSelect * from Instructor Limit 5 Offset 1\n\n\n5 records\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n2\nChong\nRaul\nToronto\nCA\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n\n\n\n\nIn this example, we want to remove a row from the table. Remove the instructor record of Doe whose id is 6.\n\n\nDelete from Instructor\nwhere ins_id=6\n\n\nSelect * from Instructor Limit 5 Offset 3\n\n\n5 records\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA\n\n\n8\nRyan\nSteve\nVarly\nGB\n\n\n9\nSannareddy\nRamesh\nHyderabad\nIN\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n\n\n\n\nRemove the instructor record of Hima.\n\n\nDelete from Instructor\nWhere firstname=\"Hima\"\n\n\nSelect * from Instructor Limit 5\n\n\n5 records\n\n\nins_id\nlastname\nfirstname\ncity\ncountry\n\n\n\n\n1\nAhuja\nRav\nMarkham\nCA\n\n\n2\nChong\nRaul\nToronto\nCA\n\n\n4\nSandip\nSaha\nDhaka\nDB\n\n\n5\nDoe\nJohn\nDubai\nAE\n\n\n7\nCangiano\nAntonio\nVancouver\nCA"
  },
  {
    "objectID": "Week2-Notes.html",
    "href": "Week2-Notes.html",
    "title": "3  Relational databases",
    "section": "",
    "text": "most used model for databases\nallows for data independence\nData is stored in tables providing logical/physical data independence and physical storage independence"
  },
  {
    "objectID": "Week2-Notes.html#entity-relationship-model",
    "href": "Week2-Notes.html#entity-relationship-model",
    "title": "3  Relational databases",
    "section": "3.2 Entity-relationship model",
    "text": "3.2 Entity-relationship model\n\nA database is seen here as a collection of entities\nUsed as a tool to design relational databases\nIn the ER model, entities are objects that exist independently of any other entities in the database\nAn entity can be a noun, person, place or thing and is drawn as a rectangle (i.e. a book)\nEntities have attributes = data elements that describe the entity (i.e. where to find the book, title, price, etc). Drawn as ovals.\nAttributes are connected to exactly one entity\nThe entity  becomes a table in the database and the attributes become the columns in a table\nEach attribute stores data values of different formats such as characters, dates or currencies"
  },
  {
    "objectID": "Week2-Notes.html#primary-keys",
    "href": "Week2-Notes.html#primary-keys",
    "title": "3  Relational databases",
    "section": "3.3 Primary keys",
    "text": "3.3 Primary keys\n\nEach table is assigned a primary key\nThis key uniquely identifies each tuple, or row, in a table preventing duplication of data and providing a way of proving relationships between tables"
  },
  {
    "objectID": "Week2-Notes.html#foreign-keys",
    "href": "Week2-Notes.html#foreign-keys",
    "title": "3  Relational databases",
    "section": "3.4 Foreign keys",
    "text": "3.4 Foreign keys\n\nPrimary keys that are defined in other tables creating a link between the tables"
  },
  {
    "objectID": "Week2-Notes.html#create-a-databse-on-cloud",
    "href": "Week2-Notes.html#create-a-databse-on-cloud",
    "title": "3  Relational databases",
    "section": "3.5 Create a databse on cloud",
    "text": "3.5 Create a databse on cloud\n\nBenefits of clouds\n\neasy of use and access via an API, web interface and cloud or remove applications\nscalability\ndisaster recovery\n\nExamples: IBM db2, databases for postgreSQL, Oracle database cloud database, etc\nDBaaS (Database-as-a-Service) provides users with access to database resources in cloud without having to setup the hardware\nIBM Db2 on via the IBM cloud, go to catalog and databases to find DB2 and create a new service\n\n\nLogin to IBM Cloud\nGo to the DB2 Services page on IBM Catalog.\nSelect a location where you want the service to be hosted. Only dallas has a free plan right nw\nTo access your database instance, go to your IBM Cloud Resource List (you may need to log into IBM Cloud in the process) directly at: cloud.ibm.com/resources. Alternative: Go to your IBM Cloud dashboard (you may need to login to IBM Cloud in the process) at: cloud.ibm.com and click Services.\nIn the Resource list, expand the Services and locate and click on your instance of Db2 you provisioned in exercise 2 (the name typically starts with Db2-xx for example Db2-fk, Db2-50, etc.)\nAdd new service credentials\nClick on the Go to UI button\nThe Db2 console will open in a new tab in your web browser. Click on the 3-bar menu icon in the top left corner and then click on RUN SQL.\nOn the next screen click on Create new.\nThe SQL editor will open where you can start typing and running queries. The SQL editor has several areas for performing different tasks.\nClick on the Add New Script + icon if you want to add a new script for composing queries and then select Create new.\nWhen you are asked in the upcoming labs, compose the appropriate SQL query for each problem and run by clicking Run all .\nNOTE: You may find that some results don’t appear in the result set pane; in this case, click the highlighted diagonal arrow (View More) and it will open the full Result Set window containing the results."
  },
  {
    "objectID": "Week2-Notes.html#types-of-sql-statements-ddl-vs-dml",
    "href": "Week2-Notes.html#types-of-sql-statements-ddl-vs-dml",
    "title": "3  Relational databases",
    "section": "3.6 Types of SQL statements (DDL vs DML)",
    "text": "3.6 Types of SQL statements (DDL vs DML)\n\nSQL statements are used to interact with SQL elements, i.e. tables\nData Definition Language statements and Data Manipulation Language statements\n\n\n3.6.1 DDL\n\nDDLs are used to define, change or drop database objects, such as tables\nCommon statement types:\n\ncreate: create tables and define its columns\nalter: altering tables including adding and dropping columns and modifying their data types\ntruncate: deleting data in a table but not the table itself\ndrop: used to delete tables\n\n\n\n\n3.6.2 DML\n\nDML statements are used to read and modify data. This are sometimes referred to as CRUD operations (Create, read, update and delete rows)\nCommon statement types:\n\ninsert: insert a row or several rows\nselect: reads or selects a row or rows from a table\nupdate: edits rows\ndelete: remove row(s)\n\n\n\n\n3.6.3 CREATE table statement\n\nSyntax\n\nCreate table table_name\n(\ncolumn1 datatype optional parameters,\ncolumn2 datatype,\n...\n)\n\nCreate a table for provinces in canada, here the data types used are\n\nchar = a character string with fixed length, which is 2 in this case\nVarchar = a character string of a variable length, which in this case can be 24 characters long\n\nIssuing this statement will create a table with two columns with the names: id and name\n\nCreate table provinces\n(\nid char(2) Primary Key not null,\nname varchar(24),\n...\n)\n\nCreate a table for the author entity with attributes such as author_id, lastname, etc that will be the columns of the table. We want author_id to be the primary key, so that no dupliacte values can exist and uniquely identify each row\n\nCreate table author \n(\nauthor_id char(2) Primary key not null,\nlastname varchar(15) not null\nfirstname varchar(15) not null\ncountry varchar(2)\n)\n\n\n3.6.4 Alter a table\n\nAdd or remove columns\nModify the data type of columns\nAdd or remove keys\nAdd or remove constrains\n\nFor example lets add a column with the name phone_nr to the author table. In this example the data type is bigint, which can hold a number up to 19 digits long\nAlter table author\nadd column phone_nr biginit\nNow lets try to alter the datatype of a column and allow up to 20 charactes (to be able to include -)\nAlter table author\nAlter column phone_nr set data type\nchar(20);\nBe careful though using alter with existing data that is not compatible with the data type we choose.\nNow lets drop a column, if we don’t need it anymore\nAlter table author\ndrop column phone_nr;\n\n\n3.6.5 Drop a table\n\nDeletes a table from a database\n\nDrop table author\n\n\n3.6.6 Truncate a table\n\nDelete the data in a table rather than deleting the table itself\nDeletes all rows in a table\nThe immediate specifies to process the statement immediately and cannot be undone\n\nTruncate table author\nimmediate;\n\n3.6.6.1 Examples\n\nCreating a table\n\n1.1. Create a table called TEST with two columns - ID of type integer, and Name of type varchar that allows 30 characters,\nFirst lets create a new connection for this:\n\nlibrary(DBI)\ndb3 <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\n\ncreate table Test\n(\nID integer\nName varchar(30)\n)\n\n1.2. Now let’s create a table called COUNTRY with an ID column, a two letter country code column, and a variable length country name column. The not null constraint is added after the datatype meaning that this column can not contain NULL or an empty value and we use the ID as primary key\n\n\ncreate table Country\n(\nID int NOT NULL,\nCountry char(2),\nName varchar(60),\nPrimary Key (ID)\n)\n\n1.3 if the table you are trying to create already exists in the database, you will get an error indicating table XXX.YYY already exists. To circumvent this error, either create a table with a different name or first DROP the existing table. It is quite common to issue a DROP before doing a CREATE in test and development scenarios.\n\n\ndrop table Country;\ncreate table Country\n(\nID int NOT NULL,\nCountry char(2),\nName varchar(60),\nPrimary Key (ID)\n)\n\nWARNING: before dropping a table ensure that it doesn’t contain important data that can’t be recovered easily. Note that if the table does not already exist and you try to drop it, you will see an error like XXX.YYY is an undefined name.\n\nCREATE, ALTER, TRUNCATE, DROP\n\n2.1 You need to create two tables, PETSALE and PET. To create the two tables PETSALE and PET, copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n#load libs\nlibrary(RMySQL)\n\n#build placeholder\npet_db <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\n\n\nCREATE TABLE PETSALE (\n    ID INTEGER NOT NULL,\n    PET CHAR(20),\n    SALEPRICE DECIMAL(6,2),\n    PROFIT DECIMAL(6,2),\n    SALEDATE DATE\n    );\n\n\n\nCREATE TABLE PET (\n    ID INTEGER NOT NULL,\n    ANIMAL VARCHAR(20),\n    QUANTITY INTEGER\n    );\n\n2.2 Now insert some records into the two newly created tables and show all the records of the two tables. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\nINSERT INTO PETSALE VALUES\n    (1,'Cat',450.09,100.47,'2018-05-29'),\n    (2,'Dog',666.66,150.76,'2018-06-01'),\n    (3,'Parrot',50.00,8.9,'2018-06-04'),\n    (4,'Hamster',60.60,12,'2018-06-11'),\n    (5,'Goldfish',48.48,3.5,'2018-06-14');\n\n\n\nINSERT INTO PET VALUES\n    (1,'Cat',3),\n    (2,'Dog',4),\n    (3,'Hamster',2);\n\n\n\nSELECT * FROM PETSALE;\n\n\n5 records\n\n\nID\nPET\nSALEPRICE\nPROFIT\nSALEDATE\n\n\n\n\n1\nCat\n450.09\n100.47\n2018-05-29\n\n\n2\nDog\n666.66\n150.76\n2018-06-01\n\n\n3\nParrot\n50.00\n8.90\n2018-06-04\n\n\n4\nHamster\n60.60\n12.00\n2018-06-11\n\n\n5\nGoldfish\n48.48\n3.50\n2018-06-14\n\n\n\n\n\n\n\nSELECT * FROM PET;\n\n\n3 records\n\n\nID\nANIMAL\nQUANTITY\n\n\n\n\n1\nCat\n3\n\n\n2\nDog\n4\n\n\n3\nHamster\n2\n\n\n\n\n\n2.3 Add a new QUANTITY column to the PETSALE table and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\nAlter table PETSALE\nADD column QUANTITY integer;\n\n\n\nselect * from PETSALE\n\n\n5 records\n\n\nID\nPET\nSALEPRICE\nPROFIT\nSALEDATE\nQUANTITY\n\n\n\n\n1\nCat\n450.09\n100.47\n2018-05-29\nNA\n\n\n2\nDog\n666.66\n150.76\n2018-06-01\nNA\n\n\n3\nParrot\n50.00\n8.90\n2018-06-04\nNA\n\n\n4\nHamster\n60.60\n12.00\n2018-06-11\nNA\n\n\n5\nGoldfish\n48.48\n3.50\n2018-06-14\nNA\n\n\n\n\n\n2.4 Now update the newly added QUANTITY column of the PETSALE table with some values and show all the records of the table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\nUPDATE PETSALE SET QUANTITY = 9 WHERE ID = 1;\n\n\n\nUPDATE PETSALE SET QUANTITY = 3 WHERE ID = 2;\n\n\n\nUPDATE PETSALE SET QUANTITY = 2 WHERE ID = 3;\n\n\n\nUPDATE PETSALE SET QUANTITY = 6 WHERE ID = 4;\n\n\n\nUPDATE PETSALE SET QUANTITY = 24 WHERE ID = 5;\n\n\n\nselect * from PETSALE\n\n\n5 records\n\n\nID\nPET\nSALEPRICE\nPROFIT\nSALEDATE\nQUANTITY\n\n\n\n\n1\nCat\n450.09\n100.47\n2018-05-29\n9\n\n\n2\nDog\n666.66\n150.76\n2018-06-01\n3\n\n\n3\nParrot\n50.00\n8.90\n2018-06-04\n2\n\n\n4\nHamster\n60.60\n12.00\n2018-06-11\n6\n\n\n5\nGoldfish\n48.48\n3.50\n2018-06-14\n24\n\n\n\n\n\n2.5 Delete the PROFIT column from the PETSALE table and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\nAlter table PETSALE\ndrop column profit;\n\n\n\nselect * from PETSALE;\n\n\n5 records\n\n\nID\nPET\nSALEPRICE\nSALEDATE\nQUANTITY\n\n\n\n\n1\nCat\n450.09\n2018-05-29\n9\n\n\n2\nDog\n666.66\n2018-06-01\n3\n\n\n3\nParrot\n50.00\n2018-06-04\n2\n\n\n4\nHamster\n60.60\n2018-06-11\n6\n\n\n5\nGoldfish\n48.48\n2018-06-14\n24\n\n\n\n\n\n2.6 Change the data type to VARCHAR(20) type of the column PET of the table PETSALE and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n**Statment not working yet\n#Alter table PETSALE\n#ALTER COLUMN PET set data type varchar(20);\n\n\nselect * from PETSALE;\n\n\n5 records\n\n\nID\nPET\nSALEPRICE\nSALEDATE\nQUANTITY\n\n\n\n\n1\nCat\n450.09\n2018-05-29\n9\n\n\n2\nDog\n666.66\n2018-06-01\n3\n\n\n3\nParrot\n50.00\n2018-06-04\n2\n\n\n4\nHamster\n60.60\n2018-06-11\n6\n\n\n5\nGoldfish\n48.48\n2018-06-14\n24\n\n\n\n\n\n2.7 Rename the column PET to ANIMAL of the PETSALE table and show the altered table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\nAlter table PETSALE\nRENAME COLUMN PET TO ANIMAL;\n\n\n\nselect * from PETSALE;\n\n\n5 records\n\n\nID\nANIMAL\nSALEPRICE\nSALEDATE\nQUANTITY\n\n\n\n\n1\nCat\n450.09\n2018-05-29\n9\n\n\n2\nDog\n666.66\n2018-06-01\n3\n\n\n3\nParrot\n50.00\n2018-06-04\n2\n\n\n4\nHamster\n60.60\n2018-06-11\n6\n\n\n5\nGoldfish\n48.48\n2018-06-14\n24\n\n\n\n\n\n2.8 Remove all rows from the PET table and show the empty table. Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\nNot yet working in R\nTRUNCATE TABLE PET IMMEDIATE;\n\n\nselect * from PETSALE;\n\n\n5 records\n\n\nID\nANIMAL\nSALEPRICE\nSALEDATE\nQUANTITY\n\n\n\n\n1\nCat\n450.09\n2018-05-29\n9\n\n\n2\nDog\n666.66\n2018-06-01\n3\n\n\n3\nParrot\n50.00\n2018-06-04\n2\n\n\n4\nHamster\n60.60\n2018-06-11\n6\n\n\n5\nGoldfish\n48.48\n2018-06-14\n24\n\n\n\n\n\n2.9 Delete the PET table and verify if the table still exists or not (SELECT statement won’t work if a table doesn’t exist). Copy the code below and paste it to the textbox of the Run SQL page. Click Run all.\n\n\nDROP TABLE PET;\n\nselect * from PET;"
  },
  {
    "objectID": "Week2-Notes.html#loading-several-databases",
    "href": "Week2-Notes.html#loading-several-databases",
    "title": "3  Relational databases",
    "section": "3.7 Loading several databases",
    "text": "3.7 Loading several databases\ncsvs-to-sqlite *csv test.db\ndatasette test.db\n\nlibrary(DBI)\ndb_test = dbConnect(RSQLite::SQLite(), dbname =\"Week2/tables/test.db\")\n\n\nSELECT * FROM JobsHistory\n\n\n9 records\n\n\nE1001\n08/01/2000\n100\n2\n\n\n\n\nE1002\n08/01/2001\n200\n5\n\n\nE1003\n08/16/2001\n300\n5\n\n\nE1004\n08/16/2000\n400\n5\n\n\nE1005\n05/30/2000\n500\n2\n\n\nE1006\n08/16/2001\n600\n2\n\n\nE1007\n05/30/2002\n650\n7\n\n\nE1008\n05/06/2010\n660\n7\n\n\nE1009\n08/16/2016\n234\n7\n\n\nE1010\n08/16/2016\n220\n5\n\n\n\n\n\n\n3.7.1 List all tables we have inside our database\n\ndbListTables(db_test)\n\n[1] \"Departments\" \"Employees\"   \"Jobs\"        \"JobsHistory\" \"Locations\""
  },
  {
    "objectID": "Week3-Notes.html",
    "href": "Week3-Notes.html",
    "title": "4  Using String Patterns",
    "section": "",
    "text": "What if we don’t know exactly what to specify in the where clause?\nA where clause always requires a predicate, i.e. an expression that evaluates to true, false or unknown\nWe can use the LIKE predicate with string patterns for searching a pattern in a column\nFor example we only remember that the authors first name starts with R we can do"
  },
  {
    "objectID": "Week3-Notes.html#eliminating-duplicates-using-the-distinct-clause",
    "href": "Week3-Notes.html#eliminating-duplicates-using-the-distinct-clause",
    "title": "4  Using String Patterns",
    "section": "8.1 Eliminating duplicates using the DISTINCT clause",
    "text": "8.1 Eliminating duplicates using the DISTINCT clause\n\nThis would list all countries our authors come from but including duplicates\n\nselect country from Author\nOrder by 1\n\nThis would list all countries our authors without duplocates\n\nselect distinct(country) from Author"
  },
  {
    "objectID": "Week3-Notes.html#grouping-results-with-the-group-by-clause",
    "href": "Week3-Notes.html#grouping-results-with-the-group-by-clause",
    "title": "4  Using String Patterns",
    "section": "8.2 Grouping results with the Group by clause",
    "text": "8.2 Grouping results with the Group by clause\n\nHow many authors come from the same country?\n\nselect country, count(country) from author\nGroup by country\n\nwe can assign a column name to the result set. We do this using the “as” keyword\n\nselect country, count(country) as Count from author\nGroup by country"
  },
  {
    "objectID": "Week3-Notes.html#restricting-the-results-set-using-the-having-clause",
    "href": "Week3-Notes.html#restricting-the-results-set-using-the-having-clause",
    "title": "4  Using String Patterns",
    "section": "8.3 Restricting the results set using the HAVING clause",
    "text": "8.3 Restricting the results set using the HAVING clause\n\nLets check if there are more than 4 authors from the same country\n\nselect country, count(country) from author\nGroup by country\nHaving count(country) > 4"
  },
  {
    "objectID": "Week3-Notes.html#aggregate-or-column-functions",
    "href": "Week3-Notes.html#aggregate-or-column-functions",
    "title": "4  Using String Patterns",
    "section": "10.1 Aggregate or Column functions",
    "text": "10.1 Aggregate or Column functions\n\nAn aggregate function takes a collection of like values, such as all of the values in a column, as input, and returns a single value or null\nExamples for an aggregate function:\n\nsum(): add up all values i.e. to add all values in the cost column\n\nselect SUM(cost) from petrescue\n#use `as` to name the resulting output column \nselect SUM(cost) as sum_of_cost\nfrom petrescue\n\nmin(): returns the lowest value\nmax(): returns the highest value; i.e. lets get the maximum quantity of an animal:\n\nselect Max(quantity) from petrescue\n#get the min value off the ID column for only a subset of the data, i.e. only dogs\nselect min(id) from petrescue\nwhere Animal='dog'\n\navg(): return the average or mean value; i.e. specify the average cost\n\nselect avg(cost) from petrescue\n#we can also perform math operations between columns\n#i.e. we can calulate the avg cost per dog\nselect avg(cost) from petrescue\nselect avg(cost/quantity) from petrescue\nwhere animal='dog'\n\netc():"
  },
  {
    "objectID": "Week3-Notes.html#scalar-and-string-functions",
    "href": "Week3-Notes.html#scalar-and-string-functions",
    "title": "4  Using String Patterns",
    "section": "10.2 Scalar and string functions",
    "text": "10.2 Scalar and string functions\n\nScalar: perform operations on every input value\nExamples:\n\nround(): ie. round up/down every value in the cost column we do:\n\nselect round(cost) from petrescue\n\nlength(): for example retrieve the length of each value in the animal column. If we have strings, we perform a string function.\n\nselect length(animal) from petrescue\n\nucase/lcase(): return upper or lower case values of string. I.e. if we want to retrieve the values in the animal column in uppercase:\n\nselect upcase(animal) from petrescue\n#if we want to lower case value for the cat in the animal column, we can add a where clause\nselect * from petrescue\nwhere lcase(animal)='cat'\n#use disting to get unique values for the animal colum\nselect distinct(ucase(animal)) from petrescue"
  },
  {
    "objectID": "Week3-Notes.html#date-and-time-build-in-functions",
    "href": "Week3-Notes.html#date-and-time-build-in-functions",
    "title": "4  Using String Patterns",
    "section": "10.3 Date and time build-in functions",
    "text": "10.3 Date and time build-in functions\n\nMost databases contain special datatypes for dates and times\nI.e. DB2 contains types for:\n\nDate: YYYYMMDD\nTime: HHMMSS\nTimestamp: YYYYXXDDHHMMSSZZZZZZ\n\nFunctions to extract dates/times:\n\nyear()\nmonth()\nday()\ndayofmonth()\n\ndayofweek()\ndayofyear()\nweek()\nhour()\nminute()\nsecond()\n\n\nI.e. get the day portion from each rescue date\nselect day(rescuedate) from petrescue\nwhere animal = 'cat'\nI.e. get the number of rescues during the month of may\nselect count(*) from petrescue\nwhere month(rescuedate)='05'\nI.e. what date is it 3d after each rescue date\nselect (rescuedate + 3 days) from petrescue\n\nSpecial registers:\n\ncurrent_date\ncurrent_time\ni.e. find out how many days have passed since each rescuedate till now. The result will be in YMMDD\n\nselect (current_date - rescuedate) from petrescue"
  },
  {
    "objectID": "Week3-Notes.html#exercise-1",
    "href": "Week3-Notes.html#exercise-1",
    "title": "4  Using String Patterns",
    "section": "10.4 Exercise",
    "text": "10.4 Exercise\n\nLoad hr_data database\n\n\ndb3 <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\n\n-- Create the PETRESCUE table\ncreate table PETRESCUE (\n        ID INTEGER NOT NULL,\n        ANIMAL VARCHAR(20),\n        QUANTITY INTEGER,\n        COST DECIMAL(6,2),\n        RESCUEDATE DATE,\n        PRIMARY KEY (ID)\n        );\n\n\n-- Insert sample data into PETRESCUE table\ninsert into PETRESCUE values\n        (1,'Cat',9,450.09,'2018-05-29'),\n        (2,'Dog',3,666.66,'2018-06-01'),\n        (3,'Dog',1,100.00,'2018-06-04'),\n        (4,'Parrot',2,50.00,'2018-06-04'),\n        (5,'Dog',1,75.75,'2018-06-10'),\n        (6,'Hamster',6,60.60,'2018-06-11'),\n        (7,'Cat',1,44.44,'2018-06-11'),\n        (8,'Goldfish',24,48.48,'2018-06-14'),\n        (9,'Dog',2,222.22,'2018-06-15')\n\n;\n\n\nselect * from petrescue\n\n\n9 records\n\n\nID\nANIMAL\nQUANTITY\nCOST\nRESCUEDATE\n\n\n\n\n1\nCat\n9\n450.09\n2018-05-29\n\n\n2\nDog\n3\n666.66\n2018-06-01\n\n\n3\nDog\n1\n100.00\n2018-06-04\n\n\n4\nParrot\n2\n50.00\n2018-06-04\n\n\n5\nDog\n1\n75.75\n2018-06-10\n\n\n6\nHamster\n6\n60.60\n2018-06-11\n\n\n7\nCat\n1\n44.44\n2018-06-11\n\n\n8\nGoldfish\n24\n48.48\n2018-06-14\n\n\n9\nDog\n2\n222.22\n2018-06-15\n\n\n\n\n\n\nEnter a function that calculates the total cost of all animal rescues in the PETRESCUE table.\n\n\nselect sum(cost) from petrescue\n\n\n1 records\n\n\nsum(cost)\n\n\n\n\n1718.24\n\n\n\n\n\n\nEnter a function that displays the total cost of all animal rescues in the PETRESCUE table in a column called SUM_OF_COST.\n\n\nselect sum(cost) as SUM_OF_COST from petrescue\n\n\n1 records\n\n\nSUM_OF_COST\n\n\n\n\n1718.24\n\n\n\n\n\n\nEnter a function that displays the maximum quantity of animals rescued.\n\n\nselect max(quantity) from petrescue\n\n\n1 records\n\n\nmax(quantity)\n\n\n\n\n24\n\n\n\n\n\n\nEnter a function that displays the average cost of animals rescued\n\n\nselect avg(cost) from petrescue\n\n\n1 records\n\n\navg(cost)\n\n\n\n\n190.9156\n\n\n\n\n\n\nEnter a function that displays the average cost of rescuing a dog.\n\n\nselect AVG(COST/QUANTITY) from PETRESCUE\nwhere animal='Dog'\n\n\n1 records\n\n\nAVG(COST/QUANTITY)\n\n\n\n\n127.27\n\n\n\n\n\n\nEnter a function that displays the rounded cost of each rescue.\n\n\nselect round(cost) from petrescue\n\n\n9 records\n\n\nround(cost)\n\n\n\n\n450\n\n\n667\n\n\n100\n\n\n50\n\n\n76\n\n\n61\n\n\n44\n\n\n48\n\n\n222\n\n\n\n\n\n\nEnter a function that displays the length of each animal name.\n\n\nselect distinct(animal), length(animal) from petrescue\n\n\n5 records\n\n\nANIMAL\nlength(animal)\n\n\n\n\nCat\n3\n\n\nDog\n3\n\n\nParrot\n6\n\n\nHamster\n7\n\n\nGoldfish\n8\n\n\n\n\n\n\nEnter a function that displays the animal name in each rescue in uppercase.\n\nNotice: ucase becomes upper in SQlite\n\nselect upper(animal) from petrescue\n\n\n9 records\n\n\nupper(animal)\n\n\n\n\nCAT\n\n\nDOG\n\n\nDOG\n\n\nPARROT\n\n\nDOG\n\n\nHAMSTER\n\n\nCAT\n\n\nGOLDFISH\n\n\nDOG\n\n\n\n\n\n\nEnter a function that displays the animal name in each rescue in uppercase without duplications.\n\nNotice: ucase becomes upper in SQlite\n\nselect distinct(upper(animal)) from petrescue\n\n\n5 records\n\n\n(upper(animal))\n\n\n\n\nCAT\n\n\nDOG\n\n\nPARROT\n\n\nHAMSTER\n\n\nGOLDFISH\n\n\n\n\n\n\nEnter a query that displays all the columns from the PETRESCUE table, where the animal(s) rescued are cats. Use cat in lower case in the query.\n\nNotice: lcase becomes lower in SQlite\n\nselect * from petrescue\nwhere lower(animal)='cat'\n\n\n2 records\n\n\nID\nANIMAL\nQUANTITY\nCOST\nRESCUEDATE\n\n\n\n\n1\nCat\n9\n450.09\n2018-05-29\n\n\n7\nCat\n1\n44.44\n2018-06-11\n\n\n\n\n\n\nEnter a function that displays the day of the month when cats have been rescued.\n\nNotice: SQlite uses a different syntax for finding time\nselect day(rescuedate) from petrescue\nwhere lower(animal)='cat'\n\nselect strftime('%d', RESCUEDATE)  from petrescue\nwhere lower(animal)='cat'\n\n\n2 records\n\n\nstrftime(‘%d’, RESCUEDATE)\n\n\n\n\n29\n\n\n11\n\n\n\n\n\n\nEnter a function that displays the number of rescues on the 5th month. Notice: SQlite uses a different syntax for finding time\n\nselect sum(quantity) from petrescue\nwhere month(rescuedate)='05'\n\nselect sum(quantity) from petrescue\nwhere strftime('%m', RESCUEDATE)='05'\n\n\n1 records\n\n\nsum(quantity)\n\n\n\n\n9\n\n\n\n\n\n\nEnter a function that displays the number of rescues on the 14th day of the month.\n\nNotice: SQlite uses a different syntax for finding time\nselect count(*) from petrescue\nwhere day(rescuedate)='14'\n\nselect sum(quantity) from petrescue\nwhere strftime('%d', RESCUEDATE)='14'\n\n\n1 records\n\n\nsum(quantity)\n\n\n\n\n24\n\n\n\n\n\n\nAnimals rescued should see the vet within three days of arrivals. Enter a function that displays the third day from each rescue.\n\nNotice: SQlite uses a different syntax for finding time\nselect (rescuedate+3) from petrescue\n\nselect id,date(rescuedate, '+3 day') from petrescue\n\n\n9 records\n\n\nID\ndate(rescuedate, ‘+3 day’)\n\n\n\n\n1\n2018-06-01\n\n\n2\n2018-06-04\n\n\n3\n2018-06-07\n\n\n4\n2018-06-07\n\n\n5\n2018-06-13\n\n\n6\n2018-06-14\n\n\n7\n2018-06-14\n\n\n8\n2018-06-17\n\n\n9\n2018-06-18\n\n\n\n\n\n\nEnter a function that displays the length of time the animals have been rescued; the difference between today<80><99>s date and the rescue date.\n\nNotice: SQlite uses a different syntax for finding time\nselect (current_date - rescuedate) from petrescue\n\nselect date(rescuedate - 'now' ) from PETRESCUE\n\n\n9 records\n\n\ndate(rescuedate - ‘now’ )\n\n\n\n\n-4707-06-03\n\n\n-4707-06-03\n\n\n-4707-06-03\n\n\n-4707-06-03\n\n\n-4707-06-03\n\n\n-4707-06-03\n\n\n-4707-06-03\n\n\n-4707-06-03\n\n\n-4707-06-03"
  },
  {
    "objectID": "Week3-Notes.html#examples",
    "href": "Week3-Notes.html#examples",
    "title": "4  Using String Patterns",
    "section": "12.1 Examples",
    "text": "12.1 Examples\n\nselect * from employees\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nemp_id\nf_name\nl_name\nssn\nb_date\nsex\naddress\njob_id\nsalary\nmanager_id\ndep_id\n\n\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n100000\n30001\n2\n\n\nE1002\nAlice\nJames\n123457\n1972-07-31\nF\n980 Berry ln, Elgin,IL\n200\n80000\n30002\n5\n\n\nE1003\nSteve\nWells\n123458\n1980-08-10\nM\n291 Springs, Gary,IL\n300\n50000\n30002\n5\n\n\nE1004\nSantosh\nKumar\n123459\n1985-07-20\nM\n511 Aurora Av, Aurora,IL\n400\n60000\n30004\n5\n\n\nE1005\nAhmed\nHussain\n123410\n1960-07-20\nM\n216 Oak Tree, Geneva,IL\n500\n70000\n30001\n2\n\n\nE1006\nNancy\nAllen\n123411\n1960-07-21\nF\n111 Green Pl, Elgin,IL\n600\n90000\n30001\n2\n\n\nE1007\nMary\nThomas\n123412\n1960-07-22\nF\n100 Rose Pl, Gary,IL\n650\n65000\n30003\n7\n\n\nE1008\nBharath\nGupta\n123413\n1960-07-23\nM\n145 Berry Ln, Naperville,IL\n660\n65000\n30003\n7\n\n\nE1009\nAndrea\nJones\n123414\n1960-07-24\nF\n120 Fall Creek, Gary,IL\n234\n70000\n30003\n7\n\n\nE1010\nAnn\nJacob\n123415\n1960-07-25\nF\n111 Britany Springs,Elgin,IL\n220\n70000\n30004\n5\n\n\n\n\n\n\nExecute a failing query (i.e. one which gives an error) to retrieve all employees records whose salary is lower than the average salary.\n\nselect * from employees\nwhere salary < avg(salary)\n\nExecute a working query using a sub-select to retrieve all employees records whose salary is lower than the average salary.\n\n\nselect * from employees\nwhere salary <(select avg(salary) from employees)\n\n\n7 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nemp_id\nf_name\nl_name\nssn\nb_date\nsex\naddress\njob_id\nsalary\nmanager_id\ndep_id\n\n\n\n\nE1003\nSteve\nWells\n123458\n1980-08-10\nM\n291 Springs, Gary,IL\n300\n50000\n30002\n5\n\n\nE1004\nSantosh\nKumar\n123459\n1985-07-20\nM\n511 Aurora Av, Aurora,IL\n400\n60000\n30004\n5\n\n\nE1005\nAhmed\nHussain\n123410\n1960-07-20\nM\n216 Oak Tree, Geneva,IL\n500\n70000\n30001\n2\n\n\nE1007\nMary\nThomas\n123412\n1960-07-22\nF\n100 Rose Pl, Gary,IL\n650\n65000\n30003\n7\n\n\nE1008\nBharath\nGupta\n123413\n1960-07-23\nM\n145 Berry Ln, Naperville,IL\n660\n65000\n30003\n7\n\n\nE1009\nAndrea\nJones\n123414\n1960-07-24\nF\n120 Fall Creek, Gary,IL\n234\n70000\n30003\n7\n\n\nE1010\nAnn\nJacob\n123415\n1960-07-25\nF\n111 Britany Springs,Elgin,IL\n220\n70000\n30004\n5\n\n\n\n\n\n\nExecute a Column Expression that retrieves all employees records with EMP_ID, SALARY and maximum salary as MAX_SALARY in every row.\n\n\nselect emp_id,salary,(select max(salary)from employees) as max_salary from employees\n\n\nDisplaying records 1 - 10\n\n\nemp_id\nsalary\nmax_salary\n\n\n\n\nE1001\n100000\n1e+05\n\n\nE1002\n80000\n1e+05\n\n\nE1003\n50000\n1e+05\n\n\nE1004\n60000\n1e+05\n\n\nE1005\n70000\n1e+05\n\n\nE1006\n90000\n1e+05\n\n\nE1007\n65000\n1e+05\n\n\nE1008\n65000\n1e+05\n\n\nE1009\n70000\n1e+05\n\n\nE1010\n70000\n1e+05\n\n\n\n\n\n\nExecute a Table Expression for the EMPLOYEES table that excludes columns with sensitive employee data (i.e. does not include columns: SSN, B_DATE, SEX, ADDRESS, SALARY).\n\n\nselect * from ( select EMP_ID, F_NAME, L_NAME from employees) AS EMP4ALL;\n\n\nDisplaying records 1 - 10\n\n\nEMP_ID\nF_NAME\nL_NAME\n\n\n\n\nE1001\nJohn\nThomas\n\n\nE1002\nAlice\nJames\n\n\nE1003\nSteve\nWells\n\n\nE1004\nSantosh\nKumar\n\n\nE1005\nAhmed\nHussain\n\n\nE1006\nNancy\nAllen\n\n\nE1007\nMary\nThomas\n\n\nE1008\nBharath\nGupta\n\n\nE1009\nAndrea\nJones\n\n\nE1010\nAnn\nJacob"
  },
  {
    "objectID": "Week3-Notes.html#accessing-tables-using-sub-queries",
    "href": "Week3-Notes.html#accessing-tables-using-sub-queries",
    "title": "4  Using String Patterns",
    "section": "13.1 Accessing tables using sub-queries",
    "text": "13.1 Accessing tables using sub-queries\n\nI.e. lets only retrieve employee records for which a dep_id exists in the Departments table\n\nselect * from employee\nwhere dep_id in (select dep_id from departments)\n\nI.e. lets only retrieve employees from a specific location via the location id found in the departments table\n\nselect * from employee\nwhere dep_id in (select dep_id from departments where loc_id=\"L0002\")\n\nI.e. lets retrieve the dep_id and name for employees who earn more than 70,000 dollars\n\nselect dep_id,dep_name from departments\nwhere dep_id in (select dep_id from employees where salary > 70000)"
  },
  {
    "objectID": "Week3-Notes.html#accessing-tables-with-an-implicit-join",
    "href": "Week3-Notes.html#accessing-tables-with-an-implicit-join",
    "title": "4  Using String Patterns",
    "section": "13.2 Accessing tables with an implicit join",
    "text": "13.2 Accessing tables with an implicit join\n\nI.e. we can specify two tables in the FROM clause as shown below. This results in a table join without using the join operator. This action below is called a full join, or a cartesian join, because every row in the first table is joined with every row in the 2nd table\n\nselect * from employees,departments\n\nWe can use additional operands to limit the results set. I.e. only show rows with matching dep_ids. Below we prefix the name of the column with the name of the table, i.e. we use employees.dep_id.\n\nselect * from employees, department\nwhere employees.dep_id = departments.dep_id\n\nIf the table names are long we also can use aliases. I.e. we can use the alias E for the employee table and then use these aliases in the where clause\n\nselect * from employees E, department D\nwhere E.dep_id = D.dep_id\n\nlets now see the department name for each employee\n\nselect emp_id, dep_name from employees E, department D\nwhere E.dep_id = D.dep_id\n\nWe can also for the example above fix the column names using aliases\n\nselect e.emp_id, d.dep_name from employees E, department D\nwhere E.dep_id = D.dep_id"
  },
  {
    "objectID": "Week3-Notes.html#exercise-2",
    "href": "Week3-Notes.html#exercise-2",
    "title": "4  Using String Patterns",
    "section": "13.3 Exercise",
    "text": "13.3 Exercise\n\nRetrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.\n\n\nselect * from jobs\n\n\nDisplaying records 1 - 10\n\n\njob_id\njob_title\nmin_sal\nmax_sal\n\n\n\n\n100\nSr. Architect\n60000\n1e+05\n\n\n200\nSr.Software Developer\n60000\n8e+04\n\n\n300\nJr.Software Developer\n40000\n6e+04\n\n\n400\nJr.Software Developer\n40000\n6e+04\n\n\n500\nJr. Architect\n50000\n7e+04\n\n\n600\nLead Architect\n70000\n1e+05\n\n\n650\nJr. Designer\n60000\n7e+04\n\n\n660\nJr. Designer\n60000\n7e+04\n\n\n234\nSr. Designer\n70000\n9e+04\n\n\n220\nSr. Designer\n70000\n9e+04\n\n\n\n\n\n\nselect * from employees\nwhere job_id in (select job_id from jobs)\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nemp_id\nf_name\nl_name\nssn\nb_date\nsex\naddress\njob_id\nsalary\nmanager_id\ndep_id\n\n\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n100000\n30001\n2\n\n\nE1002\nAlice\nJames\n123457\n1972-07-31\nF\n980 Berry ln, Elgin,IL\n200\n80000\n30002\n5\n\n\nE1003\nSteve\nWells\n123458\n1980-08-10\nM\n291 Springs, Gary,IL\n300\n50000\n30002\n5\n\n\nE1004\nSantosh\nKumar\n123459\n1985-07-20\nM\n511 Aurora Av, Aurora,IL\n400\n60000\n30004\n5\n\n\nE1005\nAhmed\nHussain\n123410\n1960-07-20\nM\n216 Oak Tree, Geneva,IL\n500\n70000\n30001\n2\n\n\nE1006\nNancy\nAllen\n123411\n1960-07-21\nF\n111 Green Pl, Elgin,IL\n600\n90000\n30001\n2\n\n\nE1007\nMary\nThomas\n123412\n1960-07-22\nF\n100 Rose Pl, Gary,IL\n650\n65000\n30003\n7\n\n\nE1008\nBharath\nGupta\n123413\n1960-07-23\nM\n145 Berry Ln, Naperville,IL\n660\n65000\n30003\n7\n\n\nE1009\nAndrea\nJones\n123414\n1960-07-24\nF\n120 Fall Creek, Gary,IL\n234\n70000\n30003\n7\n\n\nE1010\nAnn\nJacob\n123415\n1960-07-25\nF\n111 Britany Springs,Elgin,IL\n220\n70000\n30004\n5\n\n\n\n\n\n\nRetrieve only the list of employees whose JOB_TITLE is Jr. Designer.\n\n\nselect * from employees\nwhere job_id in (select job_id from jobs where job_title=\"Jr. Designer\")\n\n\n2 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nemp_id\nf_name\nl_name\nssn\nb_date\nsex\naddress\njob_id\nsalary\nmanager_id\ndep_id\n\n\n\n\nE1007\nMary\nThomas\n123412\n1960-07-22\nF\n100 Rose Pl, Gary,IL\n650\n65000\n30003\n7\n\n\nE1008\nBharath\nGupta\n123413\n1960-07-23\nM\n145 Berry Ln, Naperville,IL\n660\n65000\n30003\n7\n\n\n\n\n\n\nRetrieve JOB information and who earn more than $70,000.\n\n\nselect * from jobs\nwhere job_id in (select job_id from employees where salary > 70000)\n\n\n3 records\n\n\njob_id\njob_title\nmin_sal\nmax_sal\n\n\n\n\n100\nSr. Architect\n60000\n1e+05\n\n\n200\nSr.Software Developer\n60000\n8e+04\n\n\n600\nLead Architect\n70000\n1e+05\n\n\n\n\n\n\nRetrieve JOB information and whose birth year is after 1976.\n\nMysql\nselect * from jobs\nwhere job_id in (select job_id from employees where year(b_date)>1976)\nSQlite\n\nselect * from jobs\nwhere job_id in (select job_id from employees where strftime('%Y', employees.b_date) > '1976')\n\n\n2 records\n\n\njob_id\njob_title\nmin_sal\nmax_sal\n\n\n\n\n300\nJr.Software Developer\n40000\n60000\n\n\n400\nJr.Software Developer\n40000\n60000\n\n\n\n\n\n\nRetrieve JOB information for female employees whose birth year is after 1976.\n\nMysql\nselect JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from jobs \nwhere JOB_IDENT IN (select JOB_ID from employees where YEAR(B_DATE)>1976 and SEX='F' );\nSQlite\n\nselect JOB_TITLE, min_sal,max_sal,job_id from jobs \nwhere job_id IN (select JOB_ID from employees where strftime('%Y', employees.b_date) < '1961'  and SEX='F' );\n\n\n4 records\n\n\njob_title\nmin_sal\nmax_sal\njob_id\n\n\n\n\nLead Architect\n70000\n1e+05\n600\n\n\nJr. Designer\n60000\n7e+04\n650\n\n\nSr. Designer\n70000\n9e+04\n234\n\n\nSr. Designer\n70000\n9e+04\n220\n\n\n\n\n\n\nPerform an implicit cartesian/cross join between EMPLOYEES and JOBS tables.\n\n\nselect * from employees,jobs\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nemp_id\nf_name\nl_name\nssn\nb_date\nsex\naddress\njob_id\nsalary\nmanager_id\ndep_id\njob_id\njob_title\nmin_sal\nmax_sal\n\n\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n100\nSr. Architect\n60000\n1e+05\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n200\nSr.Software Developer\n60000\n8e+04\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n300\nJr.Software Developer\n40000\n6e+04\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n400\nJr.Software Developer\n40000\n6e+04\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n500\nJr. Architect\n50000\n7e+04\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n600\nLead Architect\n70000\n1e+05\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n650\nJr. Designer\n60000\n7e+04\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n660\nJr. Designer\n60000\n7e+04\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n234\nSr. Designer\n70000\n9e+04\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n1e+05\n30001\n2\n220\nSr. Designer\n70000\n9e+04\n\n\n\n\n\n\nRetrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.\n\n\nselect * from employees e,jobs j\nwhere e.job_id = j.job_id\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nemp_id\nf_name\nl_name\nssn\nb_date\nsex\naddress\njob_id\nsalary\nmanager_id\ndep_id\njob_id\njob_title\nmin_sal\nmax_sal\n\n\n\n\nE1001\nJohn\nThomas\n123456\n1976-09-01\nM\n5631 Rice, OakPark,IL\n100\n100000\n30001\n2\n100\nSr. Architect\n60000\n1e+05\n\n\nE1002\nAlice\nJames\n123457\n1972-07-31\nF\n980 Berry ln, Elgin,IL\n200\n80000\n30002\n5\n200\nSr.Software Developer\n60000\n8e+04\n\n\nE1003\nSteve\nWells\n123458\n1980-08-10\nM\n291 Springs, Gary,IL\n300\n50000\n30002\n5\n300\nJr.Software Developer\n40000\n6e+04\n\n\nE1004\nSantosh\nKumar\n123459\n1985-07-20\nM\n511 Aurora Av, Aurora,IL\n400\n60000\n30004\n5\n400\nJr.Software Developer\n40000\n6e+04\n\n\nE1005\nAhmed\nHussain\n123410\n1960-07-20\nM\n216 Oak Tree, Geneva,IL\n500\n70000\n30001\n2\n500\nJr. Architect\n50000\n7e+04\n\n\nE1006\nNancy\nAllen\n123411\n1960-07-21\nF\n111 Green Pl, Elgin,IL\n600\n90000\n30001\n2\n600\nLead Architect\n70000\n1e+05\n\n\nE1007\nMary\nThomas\n123412\n1960-07-22\nF\n100 Rose Pl, Gary,IL\n650\n65000\n30003\n7\n650\nJr. Designer\n60000\n7e+04\n\n\nE1008\nBharath\nGupta\n123413\n1960-07-23\nM\n145 Berry Ln, Naperville,IL\n660\n65000\n30003\n7\n660\nJr. Designer\n60000\n7e+04\n\n\nE1009\nAndrea\nJones\n123414\n1960-07-24\nF\n120 Fall Creek, Gary,IL\n234\n70000\n30003\n7\n234\nSr. Designer\n70000\n9e+04\n\n\nE1010\nAnn\nJacob\n123415\n1960-07-25\nF\n111 Britany Springs,Elgin,IL\n220\n70000\n30004\n5\n220\nSr. Designer\n70000\n9e+04\n\n\n\n\n\n\nRedo the previous query, but retrieve only the Employee ID, Employee Name and Job Title.\n\n\nselect e.emp_id,e.f_name,j.job_title from employees e,jobs j\nwhere e.job_id = j.job_id\n\n\nDisplaying records 1 - 10\n\n\nemp_id\nf_name\njob_title\n\n\n\n\nE1001\nJohn\nSr. Architect\n\n\nE1002\nAlice\nSr.Software Developer\n\n\nE1003\nSteve\nJr.Software Developer\n\n\nE1004\nSantosh\nJr.Software Developer\n\n\nE1005\nAhmed\nJr. Architect\n\n\nE1006\nNancy\nLead Architect\n\n\nE1007\nMary\nJr. Designer\n\n\nE1008\nBharath\nJr. Designer\n\n\nE1009\nAndrea\nSr. Designer\n\n\nE1010\nAnn\nSr. Designer"
  },
  {
    "objectID": "Week4_Python_a_IBM.html",
    "href": "Week4_Python_a_IBM.html",
    "title": "5  SQL and python",
    "section": "",
    "text": "Python database api (DB-API) to access relational databases\nUseful interfaces via the jupyter notebooks; a open-source web-application\nAccessing databases using python: user <-> jupyter notebook + python programs <-DP API calls to connect to a adtabase-> DBMS (Database Management Systems)\nAQL API: consists of library function calls as application programming interface (API) for the dbms\n\nWe begin with API calls that connect to a db via connect\nWe then send a SQL statement via the API to the DBMS\nexecute\nstatus_check"
  },
  {
    "objectID": "Week4_Python_a_IBM.html#writting-code-via-a-dbi-api",
    "href": "Week4_Python_a_IBM.html#writting-code-via-a-dbi-api",
    "title": "5  SQL and python",
    "section": "5.2 Writting code via a DBI-API",
    "text": "5.2 Writting code via a DBI-API\n\ndB API calls: Pythons standard API for accessing relational databases\nConnection objects: Are used to connect to a database and manage transactions\nCursor objects: used to run queries; allows to scroll through the results set and retrieve results\nConnection methods\n\n.cursor()\n.commit()\n.rollback()\n.close()\n\nCursor methods\n\n.callproc()\n.execute()\n.fetchall()\n\nDatabase cursor: a control structure that enables traversal over the records in a database. It behaves like a file name or file handle in a programming language.\nExample\n\n#import database module with \nfrom dbmodule import connect\n\n#create connection object\nConnection = connect('databasename', 'username', 'psswd')\n\n#create a cursor object (we need the cursor to run queries\nCursor = Connection.cursor())\n\n#run queries\nCursor.execute('select * from mytable')\n\n#fetch the results of the query\nResults = cursor.fetchall()\n\n#free resources by closing the connection\nCursor.close()\nConnection.close()"
  },
  {
    "objectID": "Week4_Python_a_IBM.html#connecting-to-a-database-using-ibm_db-api",
    "href": "Week4_Python_a_IBM.html#connecting-to-a-database-using-ibm_db-api",
    "title": "5  SQL and python",
    "section": "5.3 Connecting to a database using ibm_db API",
    "text": "5.3 Connecting to a database using ibm_db API\n\nibm_db: API that provides useful python functions for accessing and manipulating data in an IBM data service database\nUses the IBM Data service driver for ODBC and CLI APIs to connect to IBM DB and Informix\n\n\nGo to your IBM Cloud Resources dashboard (or click on IBM Cloud in the top left corner):https://cloud.ibm.com/resources\nLocate and click on your Db2 service listed under Services.\nClick on Service Credentials in the left menu\nClick on the button to create New credential\nIn the prompt that comes up click the “Add” button in the bottom right:\nCheck the box to View credentials\nCopy and save the credentials making a note of the following:\n\n\nport is the database port –> 30376\ndb is the database name –> bludb\nhost is the hostname of the database instance –> 6667d8e9-9d4d-4ccb-ba32-21da3bb5aafc.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud\nusername is the username you’ll use to connect –> jty26738\npassword is the password you’ll use to connect –> Nth9JHtETHDz3XnJ"
  },
  {
    "objectID": "Week4_Python_a_IBM.html#creating-tables-loading-data-and-querying-data",
    "href": "Week4_Python_a_IBM.html#creating-tables-loading-data-and-querying-data",
    "title": "5  SQL and python",
    "section": "5.4 Creating tables, loading data and querying data",
    "text": "5.4 Creating tables, loading data and querying data\n\nWe can create tables via db2 or with the R/Python environment\nDB uses the ibm_db.exec_immediate() with the following parameters\n\nConnection\nStatement\nOptions\n\ni.e. lets create a trucks table\n\nstmt = ibm.db.exec_immediate(conn,\n\"Create table trucks(\nserial_no varchar(20)) primary key not null,\nmodel varchar(20) not null, \nmanufacturer varchar(20) not null,\nengine_size varchar(20) not null,\ntruck_class varchar(20) not null)\"\n)\n\nnow lets load some data:\n\nstmt = ibm.db.exec_immediate(conn, \n\"Insert into trucks (serial_no, model, manufacturer,engine_size,truck_class)\nvalues('A1234', 'Lonestar', 'International trucks', 'Cummins ISX15', 'Class 8');\"\n)\n\nNow we can query some data, i.e. lets view the table\n\n#query the data\nstmt = ibm_db.exec_immediate(conn, \"select * from trucks\")\n\n#print results\nibm_db.fetch_both(stmt)\n\nWe can also use the pandas python library to retrieve data\n\nimport pandas\nimport ibm_db_dbi\n\n#prep connection\npconn = ibm_db_dbi.Connection(conn)\n\n#create a pandas dataframe\ndf = pandas.read_sql('Select * from trucks', pconn)\n\n#view \ndf"
  },
  {
    "objectID": "Week4_Python_a_IBM.html#sql-magic",
    "href": "Week4_Python_a_IBM.html#sql-magic",
    "title": "5  SQL and python",
    "section": "5.5 SQL magic",
    "text": "5.5 SQL magic\nJupyter notebooks have a concept of Magic commands that can simplify working with Python, and are particularly useful for data analysis. You can use the SQL Magic commands to execute queries more easily. Your notebooks can have two types of magic commands:\n\nCell magics: start with a double %% sign and apply to the entire cell\nLine magics: start with a single % (percent) sign and apply to a particular line in a cell\n\nTheir usage is of the format:\n%magicname arguments\nFor example if you want to execute the a query to select some data from a table and fetch its results, you can simply enter a command like the following in your Jupyter notebook cell:\n%sql select * from tablename\nAlthough SQL magic simplifies working with databases, it has some limitations. For example, unlike DB-API, there are no explicit methods to close a connection and free up resources.\nExamples can be found in: DB0201EN-Week3-1-3-SQLmagic.ipynb"
  },
  {
    "objectID": "Week4_Python_a_IBM.html#analysing-data-with-python",
    "href": "Week4_Python_a_IBM.html#analysing-data-with-python",
    "title": "5  SQL and python",
    "section": "5.6 Analysing data with python",
    "text": "5.6 Analysing data with python\n\nKaggle McDonalds nutrition info\n\n\nLoad csv into DB2 cloud (source, target, define, finalize)\nVerify loaded data using sql, i.e. with select * from table\n\nstmt = ibm_db.exec_immediate(conn, \"select count(*) from mcdonals\")\n\nUse pandas to retrieve data, i.e. vs pandas.read_sql to read in data via a select statement.\n\nimport pandas \nimport ibm_db_dbi\npconn = ibm_dbi.Connection(conn)\ndf = pandas.read_sql('select * from mcdonalds', pconn)\ndf\n\nLearn about data with pandas, i.e. with df.describe(include=\"all\")\n\n\nLets find the food item with the max sodium content\n\n4.1. Lets first visualize the food items\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#make categorical scatteplots\nplot = sns.swarmplot(x=\"category\", y=\"sodium\", data =df)\nplt.setp(plot.get_xticklabels(), rotation=70)\nplt.title('Sodium content')\nplt.show()\n4.2 Find the food item with the max sodium content\n#get summary stats\ndf['Sodium'].describe()\n\n#find the row with the max sodium value. Lets say we get 82\ndf['Sodium'].idxmax()\n\n#lets find the the item with the id retrieved in the second line of code\ndf.at[82,'Item']\n4.3 further data vis using scatterplots\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#create a scatterplot with protein data vs total fat content to look for correlations\nplot = sns.joinplot(x='Protein', y='Total Fat', data=df)\nplt.show()\n4.4 further data vis using boxplots\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#create a boxplot to show the distribution for the sugar data\nplot = sns.set_style(\"whitegrid\")\nax= sns.boxplot(x=df['Sugars'])\nplt.show()"
  },
  {
    "objectID": "Week5_RealData.html",
    "href": "Week5_RealData.html",
    "title": "6  Working with real world data",
    "section": "",
    "text": "many real world data files are avail. as csv files\nThe header row contains the names of the attributes\nquerying column names with mixed (upper and lower) cases. The database parser assumes uppercase names by default, however lets assume we have Id as column name, then with select ID from table we would run into trouble. To deal with this we can use double quotes”\n\nselect \"Id\" from dogs\n\nquerying column names with spaces and other characters. If in the csv the names have spaces, by default, spaces are mapped to underscores. Same is true for special characters, such as `(). Beware, this sometimes can results in two underscores.\nUsing quotes in jupyter notebooks.\n\nAssign queries to variables, i.e. selectQuery = 'select \"Id\" from dogs' .\nIn case the query contains single quotes, we need to use the backslash \\ to escape characters, i.e. selectQuery = 'select * from dogs where \"Name_of_Dog\"= \\'Huggy\\' '\nIn case of very long queries we can use the backslash to split the query into mutliple lines:\n\n%sql select \"Id\", \"Name_of_Dog\", \\\nfrom dogs \\\nwhere \"Name_of_Dog\"='Huggy'\n\nIf we use the %%sql in the first row of our cell, no backslash is needed, as it implies that the rest of the cell should be interpreted as sql magic\n\n%%sql \nselect \"Id\", \"Name_of_Dog\", \nfrom dogs \nwhere \"Name_of_Dog\"='Huggy'\n\nRestrict the number of rows retrieved\n\nselect * from data_table Limit 3"
  },
  {
    "objectID": "Week5_RealData.html#getting-table-and-column-details",
    "href": "Week5_RealData.html#getting-table-and-column-details",
    "title": "6  Working with real world data",
    "section": "6.2 Getting table and column details",
    "text": "6.2 Getting table and column details\n\n6.2.1 Get a list of available tables\n\nGetting a list of tables that are part in our databases and remind ourselves about the exact names. Database systems typically contain system or catalog tables, from where you can query the list of tables and get their properties. In DB2 this catalog is called syscat tables. In SQL Server, it’s information_schema.tables, and in Oracle it’s all_tables or user_tables\n\nDb2 (and getting all table properties):\nselect * from syscat.tables\nDb2 (but filtered):\nselect tabschema,tabname,create_time * from syscat.tables\nwhere tabschema = 'ABC1234'\nSQlite:\nSELECT * FROM sqlite_master WHERE type='table'\nor in SQlite interactive mode:\n.tables\n\n\n6.2.2 Get a list of available columns in a table\nUsing DB2:\nselect * from syscat.columns\nwhere tabname = 'Dogs'\nUsing DB2 and retrieving specific column properties:\nselect distinct(name), coltype, length from sysibm.syscolumns\nwhere tabname = 'Dogs'\nUsing SQLite:\npragma table_info(people);\nUsing SQLite (interactive):\n.schema <table>\nUsing SQLite (jupyter):\ncursor = conn.execute('select * from mytable')\ncursor.description"
  },
  {
    "objectID": "Week5_RealData.html#loading-data",
    "href": "Week5_RealData.html#loading-data",
    "title": "6  Working with real world data",
    "section": "6.3 Loading data",
    "text": "6.3 Loading data\nWhen loading data ifrom a CSV file you need to ensure the data in the dataset maps to the correct datatype and format in the database. One area that can be particularly problematic is DATEs, TIMEs, and TIMESTAMPs because their formats can vary significantly.\nIn case the database does not automatically recognize the datatype or format correctly, or the default setting does not match, you will need to manually correct it before loading otherwise you may see an error like the one below when you try to LOAD: The syntax of a datetime value is incorrect.\nIn order to prevent such errors when loading data, in the Db2 console you can preview the datatype and format of the automatically identified values with the values in the datasets in the LOAD screen such as the one below. If there is an issue, it is usually identified with an Warning icon (red triangle with an exclamation mark) next to the datatype of the column (e.g. DATE column in the example below). To correct this, you may first need to click on the “Clock” icon next to the “Time and Date format” to see the formats, if they are not already visible.\nFirst check if there is a pre-defined format in the drop down list that matches the format the date/time/timestamp is in the source dataset. If not, type the correct format. Upon doing so, the Mismatch Warning (and exclamation sign) should disappear. In this example below we changed/overwrote the default Timestamp format of YYYY-MM-DD HH:MM:SS to MM/DD/YYYY HH:MM:SS TT to match the value of 08/28/2004 05:50:56 PM in the dataset.\nFinal exercise:\n\nWrite and execute queries\n\nPerform this step in the Jupyter notebook provided in the previous section. Carefully read and understand each problem. Compose and execute the appropriate SQL queries to answer each of the problems. Take a screenshot of each query and its results and save it as a jpg file..\nProblem 1: Find the total number of crimes recorded in the CRIME table.\nProblem 2: List community areas with per capita income less than 11000.\nProblem 3: List all case numbers for crimes involving minors?\nProblem 4: List all kidnapping crimes involving a child?(children are not considered minors for the purposes of crime analysis)\nProblem 5: What kind of crimes were recorded at schools?\nProblem 6: List the average safety score for all types of schools.\nProblem 7: List 5 community areas with highest % of households below poverty line.\nProblem 8: Which community area(number) is most crime prone?\nProblem 9: Use a sub-query to find the name of the community area with highest hardship index.\nProblem 10: Use a sub-query to determine the Community Area Name with most number of crimes?\nHow to submit:\nA screenshot in JPEG format is required to be submitted for solution to each of the problems. The screenshot for each problem should clearly show the SQL query and results for the query. The screenshots will be uploaded in the following sections."
  }
]