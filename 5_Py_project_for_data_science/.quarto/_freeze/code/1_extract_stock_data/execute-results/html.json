{
  "hash": "b10d157e10da3d33331697bc9f7c2f6d",
  "result": {
    "markdown": "# Extracting Stock Data Using a Python Library\n\nA company's stock share is a piece of the company more precisely:\n\nA stock (also known as equity) is a security that represents the ownership of a fraction of a corporation. This entitles the owner of the stock to a proportion of the corporation's assets and profits equal to how much stock they own. Units of stock are called \"shares.\" [1]\n\nAn investor can buy a stock and sell it later. If the stock price increases, the investor profits, If it decreases,the investor with incur a loss.  Determining the stock price is complex; it depends on the number of outstanding shares, the size of the company's future profits, and much more. People trade stocks throughout the day the stock ticker is a report of the price of a certain stock, updated continuously throughout the trading session by the various stock market exchanges.\n\nYou are a data scientist working for a hedge fund; it's your job to determine any suspicious stock activity. In this lab you will extract stock data using a Python library. We will use the **yfinance** library, it allows us to extract data for stocks returning data in a pandas dataframe. You will use the lab to extract.\n\n## Loading required libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport yfinance as yf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n## Using the yfinance Library to Extract Stock Data\n\nUsing the Ticker module we can create an object that will allow us to access functions to extract data. To do this we need to provide the ticker symbol for the stock, here the company is Apple and the ticker symbol is AAPL.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\napple = yf.Ticker(\"AAPL\")\n```\n:::\n\n\nNow we can access functions and variables to extract the type of data we need. You can view them and what they represent here https://aroussi.com/post/python-yahoo-finance.\n\n\n## Stock info\n\nUsing the attribute info we can extract information about the stock as a Python dictionary.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\napple_info = apple.info\napple_info\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n{'zip': '95014',\n 'sector': 'Technology',\n 'fullTimeEmployees': 154000,\n 'longBusinessSummary': 'Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide. It also sells various related services. In addition, the company offers iPhone, a line of smartphones; Mac, a line of personal computers; iPad, a line of multi-purpose tablets; AirPods Max, an over-ear wireless headphone; and wearables, home, and accessories comprising AirPods, Apple TV, Apple Watch, Beats products, HomePod, and iPod touch. Further, it provides AppleCare support services; cloud services store services; and operates various platforms, including the App Store that allow customers to discover and download applications and digital content, such as books, music, video, games, and podcasts. Additionally, the company offers various services, such as Apple Arcade, a game subscription service; Apple Music, which offers users a curated listening experience with on-demand radio stations; Apple News+, a subscription news and magazine service; Apple TV+, which offers exclusive original content; Apple Card, a co-branded credit card; and Apple Pay, a cashless payment service, as well as licenses its intellectual property. The company serves consumers, and small and mid-sized businesses; and the education, enterprise, and government markets. It distributes third-party applications for its products through the App Store. The company also sells its products through its retail and online stores, and direct sales force; and third-party cellular network carriers, wholesalers, retailers, and resellers. Apple Inc. was incorporated in 1977 and is headquartered in Cupertino, California.',\n 'city': 'Cupertino',\n 'phone': '408 996 1010',\n 'state': 'CA',\n 'country': 'United States',\n 'companyOfficers': [],\n 'website': 'https://www.apple.com',\n 'maxAge': 1,\n 'address1': 'One Apple Park Way',\n 'industry': 'Consumer Electronics',\n 'ebitdaMargins': 0.33430000000000004,\n 'profitMargins': 0.25709000000000004,\n 'grossMargins': 0.43313998000000004,\n 'operatingCashflow': 118224003072,\n 'revenueGrowth': 0.019,\n 'operatingMargins': 0.30533000000000005,\n 'ebitda': 129556996096,\n 'targetLowPrice': 122,\n 'recommendationKey': 'buy',\n 'grossProfits': 152836000000,\n 'freeCashflow': 83344621568,\n 'targetMedianPrice': 185,\n 'currentPrice': 149.78,\n 'earningsGrowth': -0.077,\n 'currentRatio': 0.865,\n 'returnOnAssets': 0.22204000000000002,\n 'numberOfAnalystOpinions': 42,\n 'targetMeanPrice': 181.77,\n 'debtToEquity': 205.984,\n 'returnOnEquity': 1.62816,\n 'targetHighPrice': 220,\n 'totalCash': 48230998016,\n 'totalDebt': 119691001856,\n 'totalRevenue': 387541991424,\n 'totalCashPerShare': 3.001,\n 'financialCurrency': 'USD',\n 'revenuePerShare': 23.732,\n 'quickRatio': 0.6970000000000001,\n 'recommendationMean': 1.9,\n 'exchange': 'NMS',\n 'shortName': 'Apple Inc.',\n 'longName': 'Apple Inc.',\n 'exchangeTimezoneName': 'America/New_York',\n 'exchangeTimezoneShortName': 'EDT',\n 'isEsgPopulated': False,\n 'gmtOffSetMilliseconds': '-14400000',\n 'quoteType': 'EQUITY',\n 'symbol': 'AAPL',\n 'messageBoardId': 'finmb_24937',\n 'market': 'us_market',\n 'annualHoldingsTurnover': None,\n 'enterpriseToRevenue': 6.503,\n 'beta3Year': None,\n 'enterpriseToEbitda': 19.452,\n '52WeekChange': 0.043201447000000004,\n 'morningStarRiskRating': None,\n 'forwardEps': 6.44,\n 'revenueQuarterlyGrowth': None,\n 'sharesOutstanding': 16070800384,\n 'fundInceptionDate': None,\n 'annualReportExpenseRatio': None,\n 'totalAssets': None,\n 'bookValue': 3.61,\n 'sharesShort': 113066596,\n 'sharesPercentSharesOut': 0.0069999998,\n 'fundFamily': None,\n 'lastFiscalYearEnd': 1632528000,\n 'heldPercentInstitutions': 0.59741,\n 'netIncomeToCommon': 99632996352,\n 'trailingEps': 6.05,\n 'lastDividendValue': 0.23,\n 'SandP52WeekChange': -0.11992806,\n 'priceToBook': 41.490307,\n 'heldPercentInsiders': 0.0007,\n 'nextFiscalYearEnd': 1695600000,\n 'yield': None,\n 'mostRecentQuarter': 1656115200,\n 'shortRatio': 1.72,\n 'sharesShortPreviousMonthDate': 1659052800,\n 'floatShares': 16054199125,\n 'beta': 1.234119,\n 'enterpriseValue': 2520160403456,\n 'priceHint': 2,\n 'threeYearAverageReturn': None,\n 'lastSplitDate': 1598832000,\n 'lastSplitFactor': '4:1',\n 'legalType': None,\n 'lastDividendDate': 1659657600,\n 'morningStarOverallRating': None,\n 'earningsQuarterlyGrowth': -0.106,\n 'priceToSalesTrailing12Months': 6.330969,\n 'dateShortInterest': 1661904000,\n 'pegRatio': 2.69,\n 'ytdReturn': None,\n 'forwardPE': 23.257763,\n 'lastCapGain': None,\n 'shortPercentOfFloat': 0.0069999998,\n 'sharesShortPriorMonth': 107535584,\n 'impliedSharesOutstanding': 0,\n 'category': None,\n 'fiveYearAverageReturn': None,\n 'previousClose': 152.37,\n 'regularMarketOpen': 151.21,\n 'twoHundredDayAverage': 160.9582,\n 'trailingAnnualDividendYield': 0.0058410447,\n 'payoutRatio': 0.1471,\n 'volume24Hr': None,\n 'regularMarketDayHigh': 151.33,\n 'navPrice': None,\n 'averageDailyVolume10Day': 87109340,\n 'regularMarketPreviousClose': 152.37,\n 'fiftyDayAverage': 159.388,\n 'trailingAnnualDividendRate': 0.89,\n 'open': 151.21,\n 'toCurrency': None,\n 'averageVolume10days': 87109340,\n 'expireDate': None,\n 'algorithm': None,\n 'dividendRate': 0.92,\n 'exDividendDate': 1659657600,\n 'circulatingSupply': None,\n 'startDate': None,\n 'regularMarketDayLow': 148.37,\n 'currency': 'USD',\n 'trailingPE': 24.757023,\n 'regularMarketVolume': 60216305,\n 'lastMarket': None,\n 'maxSupply': None,\n 'openInterest': None,\n 'marketCap': 2453516320768,\n 'volumeAllCurrencies': None,\n 'strikePrice': None,\n 'averageVolume': 73894148,\n 'dayLow': 148.37,\n 'ask': 149.05,\n 'askSize': 900,\n 'volume': 60216305,\n 'fiftyTwoWeekHigh': 182.94,\n 'fromCurrency': None,\n 'fiveYearAvgDividendYield': 1.03,\n 'fiftyTwoWeekLow': 129.04,\n 'bid': 149.11,\n 'tradeable': False,\n 'dividendYield': 0.006,\n 'bidSize': 800,\n 'dayHigh': 151.33,\n 'coinMarketCapLink': None,\n 'regularMarketPrice': 149.78,\n 'preMarketPrice': 151.22,\n 'logo_url': 'https://logo.clearbit.com/apple.com',\n 'trailingPegRatio': 2.7664}\n```\n:::\n:::\n\n\nWe can get the 'country' using the key country\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(type(apple))\nprint(type(apple_info))\n\nprint(apple_info['country'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'yfinance.ticker.Ticker'>\n<class 'dict'>\nUnited States\n```\n:::\n:::\n\n\n## Extracting Share Price\n\nA **share** is the single smallest part of a company's stock that you can buy, the prices of these shares fluctuate over time. Using the **history() method** we can get the share price of the stock over a certain period of time. Using the period parameter we can set how far back from the present to get data. The options for period are 1 day (1d), 5d, 1 month (1mo) , 3mo, 6mo, 1 year (1y), 2y, 5y, 10y, ytd, and max.\n\nThe format that the data is returned in is a Pandas DataFrame. With the Date as the index the share Open, High, Low, Close, Volume, and Stock Splits are given for each day.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\napple_share_price_data = apple.history(period = \"max\")\napple_share_price_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1980-12-12</th>\n      <td>0.100039</td>\n      <td>0.100474</td>\n      <td>0.100039</td>\n      <td>0.100039</td>\n      <td>469033600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1980-12-15</th>\n      <td>0.095255</td>\n      <td>0.095255</td>\n      <td>0.094820</td>\n      <td>0.094820</td>\n      <td>175884800</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1980-12-16</th>\n      <td>0.088296</td>\n      <td>0.088296</td>\n      <td>0.087861</td>\n      <td>0.087861</td>\n      <td>105728000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1980-12-17</th>\n      <td>0.090035</td>\n      <td>0.090470</td>\n      <td>0.090035</td>\n      <td>0.090035</td>\n      <td>86441600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1980-12-18</th>\n      <td>0.092646</td>\n      <td>0.093081</td>\n      <td>0.092646</td>\n      <td>0.092646</td>\n      <td>73449600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can reset the index of the DataFrame with the `reset_index` function. We also set the `inplace` paramter to True so the change takes place to the DataFrame itself.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\napple_share_price_data.reset_index(inplace = True)\napple_share_price_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1980-12-12</td>\n      <td>0.100039</td>\n      <td>0.100474</td>\n      <td>0.100039</td>\n      <td>0.100039</td>\n      <td>469033600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1980-12-15</td>\n      <td>0.095255</td>\n      <td>0.095255</td>\n      <td>0.094820</td>\n      <td>0.094820</td>\n      <td>175884800</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1980-12-16</td>\n      <td>0.088296</td>\n      <td>0.088296</td>\n      <td>0.087861</td>\n      <td>0.087861</td>\n      <td>105728000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1980-12-17</td>\n      <td>0.090035</td>\n      <td>0.090470</td>\n      <td>0.090035</td>\n      <td>0.090035</td>\n      <td>86441600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1980-12-18</td>\n      <td>0.092646</td>\n      <td>0.093081</td>\n      <td>0.092646</td>\n      <td>0.092646</td>\n      <td>73449600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can plot the Open price against the Date:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\napple_share_price_data.plot(x='Date', y = 'Open')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_extract_stock_data_files/figure-html/cell-8-output-1.png){width=575 height=401}\n:::\n:::\n\n\n## Extracting Dividends\n\n**Dividends** are the distribution of a companys profits to shareholders. In this case they are defined as an amount of money returned per share an investor owns. Using the variable `dividends` we can get a dataframe of the data. The period of the data is given by the period defined in the 'history` function.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\napple.dividends.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nDate\n1987-05-11    0.000536\n1987-08-10    0.000536\n1987-11-17    0.000714\n1988-02-12    0.000714\n1988-05-16    0.000714\nName: Dividends, dtype: float64\n```\n:::\n:::\n\n\nWe can plot the dividens over time\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\napple.dividends.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_extract_stock_data_files/figure-html/cell-10-output-1.png){width=579 height=401}\n:::\n:::\n\n\n## Exercise\n\nNow using the Ticker module create an object for AMD (Advanced Micro Devices) with the ticker symbol is AMD called; name the object amd.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\namd = yf.Ticker(\"AMD\")\ntype(amd)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nyfinance.ticker.Ticker\n```\n:::\n:::\n\n\n- Use the key 'country' to find the country the stock belongs to, remember it as it will be a quiz question.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\namd_info = amd.info\namd_info['country']\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'United States'\n```\n:::\n:::\n\n\n- Use the key 'sector' to find the sector the stock belongs to, remember it as it will be a quiz question.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\namd_info['sector']\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'Technology'\n```\n:::\n:::\n\n\n- Obtain stock data for AMD using the history function, set the period to max. Find the Volume traded on the first day (first row).\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\namd_stock_data = amd.history(period=\"max\").reset_index()\nprint(amd_stock_data.head())\nprint(amd_stock_data.loc[0, 'Volume'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Date  Open      High       Low     Close  Volume  Dividends  \\\n0 1980-03-17   0.0  3.302083  3.125000  3.145833  219600          0   \n1 1980-03-18   0.0  3.125000  2.937500  3.031250  727200          0   \n2 1980-03-19   0.0  3.083333  3.020833  3.041667  295200          0   \n3 1980-03-20   0.0  3.062500  3.010417  3.010417  159600          0   \n4 1980-03-21   0.0  3.020833  2.906250  2.916667  130800          0   \n\n   Stock Splits  \n0           0.0  \n1           0.0  \n2           0.0  \n3           0.0  \n4           0.0  \n219600\n```\n:::\n:::\n\n\n",
    "supporting": [
      "1_extract_stock_data_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}