{
  "hash": "ee340a60af90a0fc8a656260d851e14e",
  "result": {
    "markdown": "# Extracting and Visualizing Stock Data\n\nExtracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data. In this assignment, you will extract some stock data, you will then display this data in a graph.\n\nWe will:\n\nDefine a Function that Makes a Graph\nQuestion 1: Use yfinance to Extract Stock Data\nQuestion 2: Use Webscraping to Extract Tesla Revenue Data\nQuestion 3: Use yfinance to Extract Stock Data\nQuestion 4: Use Webscraping to Extract GME Revenue Data\nQuestion 5: Plot Tesla Stock Graph\nQuestion 6: Plot GameStop Stock Graph\n\n## Load libs\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport yfinance as yf\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n```\n:::\n\n\n## Define Graphing Function\n\nIn this section, we define the function `make_graph`. You don't have to know how the function works, you should only care about the inputs. It takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef make_graph(stock_data, revenue_data, stock):\n    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=(\"Historical Share Price\", \"Historical Revenue\"), vertical_spacing = .3)\n    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']\n    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']\n    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype(\"float\"), name=\"Share Price\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype(\"float\"), name=\"Revenue\"), row=2, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=1, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=2, col=1)\n    fig.update_yaxes(title_text=\"Price ($US)\", row=1, col=1)\n    fig.update_yaxes(title_text=\"Revenue ($US Millions)\", row=2, col=1)\n    fig.update_layout(showlegend=False,\n    height=900,\n    title=stock,\n    xaxis_rangeslider_visible=True)\n    fig.show()\n```\n:::\n\n\n## Question 1: Use yfinance to Extract Stock Data\n\nUsing the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is `TSLA`.\n\nUsing the ticker object and the function history extract stock information and save it in a dataframe named tesla_data. Set the period parameter to max so we get information for the maximum amount of time.\n\nReset the index using the reset_index(inplace=True) function on the tesla_data DataFrame and display the first five rows of the tesla_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#create the ticker\ntsla = yf.Ticker(\"TSLA\")\n\n#extract stock info\ntesla_data = tsla.history(period=\"max\")\n\n#reset the index\ntesla_data.reset_index(inplace = True)\ntesla_data.head(n=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=tex}\n\\begin{tabular}{llrrrrrrr}\n\\toprule\n{} &       Date &      Open &      High &       Low &     Close &     Volume &  Dividends &  Stock Splits \\\\\n\\midrule\n0 & 2010-06-29 &  1.266667 &  1.666667 &  1.169333 &  1.592667 &  281494500 &          0 &           0.0 \\\\\n1 & 2010-06-30 &  1.719333 &  2.028000 &  1.553333 &  1.588667 &  257806500 &          0 &           0.0 \\\\\n2 & 2010-07-01 &  1.666667 &  1.728000 &  1.351333 &  1.464000 &  123282000 &          0 &           0.0 \\\\\n3 & 2010-07-02 &  1.533333 &  1.540000 &  1.247333 &  1.280000 &   77097000 &          0 &           0.0 \\\\\n4 & 2010-07-06 &  1.333333 &  1.333333 &  1.055333 &  1.074000 &  103003500 &          0 &           0.0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Question 2: Use Webscraping to Extract Tesla Revenue Data\n\nUse the requests library to download the webpage https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue. Save the text of the response as a variable named html_data.\n\nParse the html data using beautiful_soup.\n\nUsing BeautifulSoup or the read_html function extract the table with Tesla Quarterly Revenue and store it into a dataframe named tesla_revenue. The dataframe should have columns Date and Revenue.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nurl = \"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\"\nhtml_data = requests.get(url).text\nsoup = BeautifulSoup(html_data, 'html5lib')\nread_html = pd.read_html(str(soup))\ntesla_revenue = read_html[1]\ntesla_revenue.columns = ['Date', 'Revenue']\ntesla_revenue.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=tex}\n\\begin{tabular}{lll}\n\\toprule\n{} &        Date &  Revenue \\\\\n\\midrule\n0 &  2022-06-30 &  \\$16,934 \\\\\n1 &  2022-03-31 &  \\$18,756 \\\\\n2 &  2021-12-31 &  \\$17,719 \\\\\n3 &  2021-09-30 &  \\$13,757 \\\\\n4 &  2021-06-30 &  \\$11,958 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nRemove the comma and dollar sign from the Revenue column.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntesla_revenue[\"Revenue\"] = tesla_revenue['Revenue'].str.replace(',|\\$',\"\")\ntesla_revenue.head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning:\n\nThe default value of regex will change from True to False in a future version.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=tex}\n\\begin{tabular}{lll}\n\\toprule\n{} &        Date & Revenue \\\\\n\\midrule\n0 &  2022-06-30 &   16934 \\\\\n1 &  2022-03-31 &   18756 \\\\\n2 &  2021-12-31 &   17719 \\\\\n3 &  2021-09-30 &   13757 \\\\\n4 &  2021-06-30 &   11958 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nRemove an null or empty strings in the Revenue column\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntesla_revenue.dropna(inplace=True)\ntesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != \"\"]\ntesla_revenue.tail(n=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=tex}\n\\begin{tabular}{lll}\n\\toprule\n{} &        Date & Revenue \\\\\n\\midrule\n47 &  2010-09-30 &      31 \\\\\n48 &  2010-06-30 &      28 \\\\\n49 &  2010-03-31 &      21 \\\\\n51 &  2009-09-30 &      46 \\\\\n52 &  2009-06-30 &      27 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Question 3: Use yfinance to Extract Stock Data\n\nUsing the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is GME.\n\nUsing the ticker object and the function history extract stock information and save it in a dataframe named gme_data. Set the period parameter to max so we get information for the maximum amount of time.\n\nReset the index using the reset_index(inplace=True) function on the gme_data DataFrame and display the first five rows of the gme_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ngme_ticker = yf.Ticker(\"GME\")\ngme_data = gme_ticker.history(period = \"max\")\ngme_data.reset_index(inplace = True)\ngme_data.head(n=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=tex}\n\\begin{tabular}{llrrrrrrr}\n\\toprule\n{} &       Date &      Open &      High &       Low &     Close &    Volume &  Dividends &  Stock Splits \\\\\n\\midrule\n0 & 2002-02-13 &  1.620128 &  1.693350 &  1.603296 &  1.691666 &  76216000 &        0.0 &           0.0 \\\\\n1 & 2002-02-14 &  1.712707 &  1.716074 &  1.670626 &  1.683250 &  11021600 &        0.0 &           0.0 \\\\\n2 & 2002-02-15 &  1.683250 &  1.687458 &  1.658002 &  1.674834 &   8389600 &        0.0 &           0.0 \\\\\n3 & 2002-02-19 &  1.666418 &  1.666418 &  1.578047 &  1.607504 &   7410400 &        0.0 &           0.0 \\\\\n4 & 2002-02-20 &  1.615920 &  1.662210 &  1.603296 &  1.662210 &   6892800 &        0.0 &           0.0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Use the requests library to download the webpage\n\nhttps://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html. Save the text of the response as a variable named html_data.\n\nParse the html data using beautiful_soup.\n\nUsing BeautifulSoup or the read_html function extract the table with GameStop Quarterly Revenue and store it into a dataframe named gme_revenue. The dataframe should have columns Date and Revenue. Make sure the comma and dollar sign is removed from the Revenue column using a method similar to what you did in Question 2.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nurl = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html\"\nhtml_data = requests.get(url).text\nsoup = BeautifulSoup(html_data,'html5lib')\nread_html = pd.read_html(str(soup))\n\ngme_revenue = read_html[1]\ngme_revenue.columns = ['Date', 'Revenue']\ngme_revenue.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=tex}\n\\begin{tabular}{lll}\n\\toprule\n{} &        Date & Revenue \\\\\n\\midrule\n0 &  2020-04-30 &  \\$1,021 \\\\\n1 &  2020-01-31 &  \\$2,194 \\\\\n2 &  2019-10-31 &  \\$1,439 \\\\\n3 &  2019-07-31 &  \\$1,286 \\\\\n4 &  2019-04-30 &  \\$1,548 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ngme_revenue[\"Revenue\"] = gme_revenue['Revenue'].str.replace(',|\\$',\"\")\ngme_revenue.dropna(inplace=True)\ngme_revenue = gme_revenue[gme_revenue['Revenue'] != \"\"]\ngme_revenue.tail(n=5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning:\n\nThe default value of regex will change from True to False in a future version.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=tex}\n\\begin{tabular}{lll}\n\\toprule\n{} &        Date & Revenue \\\\\n\\midrule\n57 &  2006-01-31 &    1667 \\\\\n58 &  2005-10-31 &     534 \\\\\n59 &  2005-07-31 &     416 \\\\\n60 &  2005-04-30 &     475 \\\\\n61 &  2005-01-31 &     709 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Question 5: Plot Tesla Stock Graph\n\nUse the make_graph function to graph the Tesla Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(tesla_data, tesla_revenue, 'Tesla'). Note the graph will only show data upto June 2021.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nmake_graph(tesla_data, tesla_revenue, 'Tesla')\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n##Question 6: Plot GameStop Stock Graph\n\nUse the make_graph function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(gme_data, gme_revenue, 'GameStop'). Note the graph will only show data upto June 2021.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nmake_graph(gme_data, gme_revenue, 'GameStop')\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n",
    "supporting": [
      "3_exam_files"
    ],
    "filters": []
  }
}