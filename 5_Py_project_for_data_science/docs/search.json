[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python example project",
    "section": "",
    "text": "For this project, you will assume the role of a Data Scientist / Data Analyst working for a new startup investment firm that helps customers invest their money in stocks. Your job is to extract financial data like historical share price and quarterly revenue reportings from various sources using Python libraries and webscraping on popular stocks. After collecting this data you will visualize it in a dashboard to identify patterns or trends. The stocks we will work with are Tesla, Amazon, AMD, and GameStop."
  },
  {
    "objectID": "code/1_extract_stock_data.html",
    "href": "code/1_extract_stock_data.html",
    "title": "2  Extracting Stock Data Using a Python Library",
    "section": "",
    "text": "A company’s stock share is a piece of the company more precisely:\nA stock (also known as equity) is a security that represents the ownership of a fraction of a corporation. This entitles the owner of the stock to a proportion of the corporation’s assets and profits equal to how much stock they own. Units of stock are called “shares.” [1]\nAn investor can buy a stock and sell it later. If the stock price increases, the investor profits, If it decreases,the investor with incur a loss. Determining the stock price is complex; it depends on the number of outstanding shares, the size of the company’s future profits, and much more. People trade stocks throughout the day the stock ticker is a report of the price of a certain stock, updated continuously throughout the trading session by the various stock market exchanges.\nYou are a data scientist working for a hedge fund; it’s your job to determine any suspicious stock activity. In this lab you will extract stock data using a Python library. We will use the yfinance library, it allows us to extract data for stocks returning data in a pandas dataframe. You will use the lab to extract."
  },
  {
    "objectID": "code/1_extract_stock_data.html#loading-required-libraries",
    "href": "code/1_extract_stock_data.html#loading-required-libraries",
    "title": "2  Extracting Stock Data Using a Python Library",
    "section": "2.1 Loading required libraries",
    "text": "2.1 Loading required libraries\n\nimport yfinance as yf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "code/1_extract_stock_data.html#using-the-yfinance-library-to-extract-stock-data",
    "href": "code/1_extract_stock_data.html#using-the-yfinance-library-to-extract-stock-data",
    "title": "2  Extracting Stock Data Using a Python Library",
    "section": "2.2 Using the yfinance Library to Extract Stock Data",
    "text": "2.2 Using the yfinance Library to Extract Stock Data\nUsing the Ticker module we can create an object that will allow us to access functions to extract data. To do this we need to provide the ticker symbol for the stock, here the company is Apple and the ticker symbol is AAPL.\n\napple = yf.Ticker(\"AAPL\")\n\nNow we can access functions and variables to extract the type of data we need. You can view them and what they represent here https://aroussi.com/post/python-yahoo-finance."
  },
  {
    "objectID": "code/1_extract_stock_data.html#stock-info",
    "href": "code/1_extract_stock_data.html#stock-info",
    "title": "2  Extracting Stock Data Using a Python Library",
    "section": "2.3 Stock info",
    "text": "2.3 Stock info\nUsing the attribute info we can extract information about the stock as a Python dictionary.\n\napple_info = apple.info\napple_info\n\n{'zip': '95014',\n 'sector': 'Technology',\n 'fullTimeEmployees': 154000,\n 'longBusinessSummary': 'Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide. It also sells various related services. In addition, the company offers iPhone, a line of smartphones; Mac, a line of personal computers; iPad, a line of multi-purpose tablets; AirPods Max, an over-ear wireless headphone; and wearables, home, and accessories comprising AirPods, Apple TV, Apple Watch, Beats products, HomePod, and iPod touch. Further, it provides AppleCare support services; cloud services store services; and operates various platforms, including the App Store that allow customers to discover and download applications and digital content, such as books, music, video, games, and podcasts. Additionally, the company offers various services, such as Apple Arcade, a game subscription service; Apple Music, which offers users a curated listening experience with on-demand radio stations; Apple News+, a subscription news and magazine service; Apple TV+, which offers exclusive original content; Apple Card, a co-branded credit card; and Apple Pay, a cashless payment service, as well as licenses its intellectual property. The company serves consumers, and small and mid-sized businesses; and the education, enterprise, and government markets. It distributes third-party applications for its products through the App Store. The company also sells its products through its retail and online stores, and direct sales force; and third-party cellular network carriers, wholesalers, retailers, and resellers. Apple Inc. was incorporated in 1977 and is headquartered in Cupertino, California.',\n 'city': 'Cupertino',\n 'phone': '408 996 1010',\n 'state': 'CA',\n 'country': 'United States',\n 'companyOfficers': [],\n 'website': 'https://www.apple.com',\n 'maxAge': 1,\n 'address1': 'One Apple Park Way',\n 'industry': 'Consumer Electronics',\n 'ebitdaMargins': 0.33430000000000004,\n 'profitMargins': 0.25709000000000004,\n 'grossMargins': 0.43313998000000004,\n 'operatingCashflow': 118224003072,\n 'revenueGrowth': 0.019,\n 'operatingMargins': 0.30533000000000005,\n 'ebitda': 129556996096,\n 'targetLowPrice': 122,\n 'recommendationKey': 'buy',\n 'grossProfits': 152836000000,\n 'freeCashflow': 83344621568,\n 'targetMedianPrice': 185,\n 'currentPrice': 149.78,\n 'earningsGrowth': -0.077,\n 'currentRatio': 0.865,\n 'returnOnAssets': 0.22204000000000002,\n 'numberOfAnalystOpinions': 42,\n 'targetMeanPrice': 181.77,\n 'debtToEquity': 205.984,\n 'returnOnEquity': 1.62816,\n 'targetHighPrice': 220,\n 'totalCash': 48230998016,\n 'totalDebt': 119691001856,\n 'totalRevenue': 387541991424,\n 'totalCashPerShare': 3.001,\n 'financialCurrency': 'USD',\n 'revenuePerShare': 23.732,\n 'quickRatio': 0.6970000000000001,\n 'recommendationMean': 1.9,\n 'exchange': 'NMS',\n 'shortName': 'Apple Inc.',\n 'longName': 'Apple Inc.',\n 'exchangeTimezoneName': 'America/New_York',\n 'exchangeTimezoneShortName': 'EDT',\n 'isEsgPopulated': False,\n 'gmtOffSetMilliseconds': '-14400000',\n 'quoteType': 'EQUITY',\n 'symbol': 'AAPL',\n 'messageBoardId': 'finmb_24937',\n 'market': 'us_market',\n 'annualHoldingsTurnover': None,\n 'enterpriseToRevenue': 6.503,\n 'beta3Year': None,\n 'enterpriseToEbitda': 19.452,\n '52WeekChange': 0.043201447000000004,\n 'morningStarRiskRating': None,\n 'forwardEps': 6.44,\n 'revenueQuarterlyGrowth': None,\n 'sharesOutstanding': 16070800384,\n 'fundInceptionDate': None,\n 'annualReportExpenseRatio': None,\n 'totalAssets': None,\n 'bookValue': 3.61,\n 'sharesShort': 113066596,\n 'sharesPercentSharesOut': 0.0069999998,\n 'fundFamily': None,\n 'lastFiscalYearEnd': 1632528000,\n 'heldPercentInstitutions': 0.59741,\n 'netIncomeToCommon': 99632996352,\n 'trailingEps': 6.05,\n 'lastDividendValue': 0.23,\n 'SandP52WeekChange': -0.11992806,\n 'priceToBook': 41.490307,\n 'heldPercentInsiders': 0.0007,\n 'nextFiscalYearEnd': 1695600000,\n 'yield': None,\n 'mostRecentQuarter': 1656115200,\n 'shortRatio': 1.72,\n 'sharesShortPreviousMonthDate': 1659052800,\n 'floatShares': 16054199125,\n 'beta': 1.234119,\n 'enterpriseValue': 2520160403456,\n 'priceHint': 2,\n 'threeYearAverageReturn': None,\n 'lastSplitDate': 1598832000,\n 'lastSplitFactor': '4:1',\n 'legalType': None,\n 'lastDividendDate': 1659657600,\n 'morningStarOverallRating': None,\n 'earningsQuarterlyGrowth': -0.106,\n 'priceToSalesTrailing12Months': 6.330969,\n 'dateShortInterest': 1661904000,\n 'pegRatio': 2.69,\n 'ytdReturn': None,\n 'forwardPE': 23.257763,\n 'lastCapGain': None,\n 'shortPercentOfFloat': 0.0069999998,\n 'sharesShortPriorMonth': 107535584,\n 'impliedSharesOutstanding': 0,\n 'category': None,\n 'fiveYearAverageReturn': None,\n 'previousClose': 152.37,\n 'regularMarketOpen': 151.21,\n 'twoHundredDayAverage': 160.9582,\n 'trailingAnnualDividendYield': 0.0058410447,\n 'payoutRatio': 0.1471,\n 'volume24Hr': None,\n 'regularMarketDayHigh': 151.33,\n 'navPrice': None,\n 'averageDailyVolume10Day': 87109340,\n 'regularMarketPreviousClose': 152.37,\n 'fiftyDayAverage': 159.388,\n 'trailingAnnualDividendRate': 0.89,\n 'open': 151.21,\n 'toCurrency': None,\n 'averageVolume10days': 87109340,\n 'expireDate': None,\n 'algorithm': None,\n 'dividendRate': 0.92,\n 'exDividendDate': 1659657600,\n 'circulatingSupply': None,\n 'startDate': None,\n 'regularMarketDayLow': 148.37,\n 'currency': 'USD',\n 'trailingPE': 24.757023,\n 'regularMarketVolume': 60216305,\n 'lastMarket': None,\n 'maxSupply': None,\n 'openInterest': None,\n 'marketCap': 2453516320768,\n 'volumeAllCurrencies': None,\n 'strikePrice': None,\n 'averageVolume': 73894148,\n 'dayLow': 148.37,\n 'ask': 149.05,\n 'askSize': 900,\n 'volume': 60216305,\n 'fiftyTwoWeekHigh': 182.94,\n 'fromCurrency': None,\n 'fiveYearAvgDividendYield': 1.03,\n 'fiftyTwoWeekLow': 129.04,\n 'bid': 149.11,\n 'tradeable': False,\n 'dividendYield': 0.006,\n 'bidSize': 800,\n 'dayHigh': 151.33,\n 'coinMarketCapLink': None,\n 'regularMarketPrice': 149.78,\n 'preMarketPrice': 151.22,\n 'logo_url': 'https://logo.clearbit.com/apple.com',\n 'trailingPegRatio': 2.7664}\n\n\nWe can get the ‘country’ using the key country\n\nprint(type(apple))\nprint(type(apple_info))\n\nprint(apple_info['country'])\n\n<class 'yfinance.ticker.Ticker'>\n<class 'dict'>\nUnited States"
  },
  {
    "objectID": "code/1_extract_stock_data.html#extracting-share-price",
    "href": "code/1_extract_stock_data.html#extracting-share-price",
    "title": "2  Extracting Stock Data Using a Python Library",
    "section": "2.4 Extracting Share Price",
    "text": "2.4 Extracting Share Price\nA share is the single smallest part of a company’s stock that you can buy, the prices of these shares fluctuate over time. Using the history() method we can get the share price of the stock over a certain period of time. Using the period parameter we can set how far back from the present to get data. The options for period are 1 day (1d), 5d, 1 month (1mo) , 3mo, 6mo, 1 year (1y), 2y, 5y, 10y, ytd, and max.\nThe format that the data is returned in is a Pandas DataFrame. With the Date as the index the share Open, High, Low, Close, Volume, and Stock Splits are given for each day.\n\napple_share_price_data = apple.history(period = \"max\")\napple_share_price_data.head()\n\n\n\n\n\n  \n    \n      \n      Open\n      High\n      Low\n      Close\n      Volume\n      Dividends\n      Stock Splits\n    \n    \n      Date\n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1980-12-12\n      0.100039\n      0.100474\n      0.100039\n      0.100039\n      469033600\n      0.0\n      0.0\n    \n    \n      1980-12-15\n      0.095255\n      0.095255\n      0.094820\n      0.094820\n      175884800\n      0.0\n      0.0\n    \n    \n      1980-12-16\n      0.088296\n      0.088296\n      0.087861\n      0.087861\n      105728000\n      0.0\n      0.0\n    \n    \n      1980-12-17\n      0.090035\n      0.090470\n      0.090035\n      0.090035\n      86441600\n      0.0\n      0.0\n    \n    \n      1980-12-18\n      0.092646\n      0.093081\n      0.092646\n      0.092646\n      73449600\n      0.0\n      0.0\n    \n  \n\n\n\n\nWe can reset the index of the DataFrame with the reset_index function. We also set the inplace paramter to True so the change takes place to the DataFrame itself.\n\napple_share_price_data.reset_index(inplace = True)\napple_share_price_data.head()\n\n\n\n\n\n  \n    \n      \n      Date\n      Open\n      High\n      Low\n      Close\n      Volume\n      Dividends\n      Stock Splits\n    \n  \n  \n    \n      0\n      1980-12-12\n      0.100039\n      0.100474\n      0.100039\n      0.100039\n      469033600\n      0.0\n      0.0\n    \n    \n      1\n      1980-12-15\n      0.095255\n      0.095255\n      0.094820\n      0.094820\n      175884800\n      0.0\n      0.0\n    \n    \n      2\n      1980-12-16\n      0.088296\n      0.088296\n      0.087861\n      0.087861\n      105728000\n      0.0\n      0.0\n    \n    \n      3\n      1980-12-17\n      0.090035\n      0.090470\n      0.090035\n      0.090035\n      86441600\n      0.0\n      0.0\n    \n    \n      4\n      1980-12-18\n      0.092646\n      0.093081\n      0.092646\n      0.092646\n      73449600\n      0.0\n      0.0\n    \n  \n\n\n\n\nWe can plot the Open price against the Date:\n\napple_share_price_data.plot(x='Date', y = 'Open')\nplt.show()"
  },
  {
    "objectID": "code/1_extract_stock_data.html#extracting-dividends",
    "href": "code/1_extract_stock_data.html#extracting-dividends",
    "title": "2  Extracting Stock Data Using a Python Library",
    "section": "2.5 Extracting Dividends",
    "text": "2.5 Extracting Dividends\nDividends are the distribution of a companys profits to shareholders. In this case they are defined as an amount of money returned per share an investor owns. Using the variable dividends we can get a dataframe of the data. The period of the data is given by the period defined in the ’history` function.\n\napple.dividends.head()\n\nDate\n1987-05-11    0.000536\n1987-08-10    0.000536\n1987-11-17    0.000714\n1988-02-12    0.000714\n1988-05-16    0.000714\nName: Dividends, dtype: float64\n\n\nWe can plot the dividens over time\n\napple.dividends.plot()\nplt.show()"
  },
  {
    "objectID": "code/1_extract_stock_data.html#exercise",
    "href": "code/1_extract_stock_data.html#exercise",
    "title": "2  Extracting Stock Data Using a Python Library",
    "section": "2.6 Exercise",
    "text": "2.6 Exercise\nNow using the Ticker module create an object for AMD (Advanced Micro Devices) with the ticker symbol is AMD called; name the object amd.\n\namd = yf.Ticker(\"AMD\")\ntype(amd)\n\nyfinance.ticker.Ticker\n\n\n\nUse the key ‘country’ to find the country the stock belongs to, remember it as it will be a quiz question.\n\n\namd_info = amd.info\namd_info['country']\n\n'United States'\n\n\n\nUse the key ‘sector’ to find the sector the stock belongs to, remember it as it will be a quiz question.\n\n\namd_info['sector']\n\n'Technology'\n\n\n\nObtain stock data for AMD using the history function, set the period to max. Find the Volume traded on the first day (first row).\n\n\namd_stock_data = amd.history(period=\"max\").reset_index()\nprint(amd_stock_data.head())\nprint(amd_stock_data.loc[0, 'Volume'])\n\n        Date  Open      High       Low     Close  Volume  Dividends  \\\n0 1980-03-17   0.0  3.302083  3.125000  3.145833  219600          0   \n1 1980-03-18   0.0  3.125000  2.937500  3.031250  727200          0   \n2 1980-03-19   0.0  3.083333  3.020833  3.041667  295200          0   \n3 1980-03-20   0.0  3.062500  3.010417  3.010417  159600          0   \n4 1980-03-21   0.0  3.020833  2.906250  2.916667  130800          0   \n\n   Stock Splits  \n0           0.0  \n1           0.0  \n2           0.0  \n3           0.0  \n4           0.0  \n219600"
  },
  {
    "objectID": "code/2_extract_stock_data_w_webscraping.html",
    "href": "code/2_extract_stock_data_w_webscraping.html",
    "title": "3  Extracting Stock Data Using Web Scraping",
    "section": "",
    "text": "Not all stock data is available via API in this assignment; you will use web-scraping to obtain financial data. Using beautiful soup we will extract historical share data from a web-page."
  },
  {
    "objectID": "code/2_extract_stock_data_w_webscraping.html#prepare-libs",
    "href": "code/2_extract_stock_data_w_webscraping.html#prepare-libs",
    "title": "3  Extracting Stock Data Using Web Scraping",
    "section": "3.1 Prepare libs",
    "text": "3.1 Prepare libs\n\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup"
  },
  {
    "objectID": "code/2_extract_stock_data_w_webscraping.html#extract-the-data",
    "href": "code/2_extract_stock_data_w_webscraping.html#extract-the-data",
    "title": "3  Extracting Stock Data Using Web Scraping",
    "section": "3.2 Extract the data",
    "text": "3.2 Extract the data\nFirst we must use the request library to download the webpage, and extract the text. We will extract Netflix stock data https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/netflix_data_webpage.html.\n\n#set url\nurl = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/netflix_data_webpage.html\"\n\n#request data\ndata  = requests.get(url).text\n\n#parse the data into text using beautiful soup\nsoup = BeautifulSoup(data, 'html5lib')\n\nTurn the html table into a pandas df\n\n#create empty df\nnetflix_data = pd.DataFrame(columns=[\"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\"])\n\n# First we isolate the body of the table which contains all the information\n# Then we loop through each row and find all the column values for each row\nfor row in soup.find(\"tbody\").find_all('tr'):\n    col = row.find_all(\"td\")\n    date = col[0].text\n    Open = col[1].text\n    high = col[2].text\n    low = col[3].text\n    close = col[4].text\n    adj_close = col[5].text\n    volume = col[6].text\n    \n    # Finally we append the data of each row to the table\n    netflix_data = netflix_data.append({\"Date\":date, \"Open\":Open, \"High\":high, \"Low\":low, \"Close\":close, \"Adj_Close\":adj_close, \"Volume\":volume}, ignore_index=True)    \n\n#print df\nnetflix_data.head()\n\n\n\n\n\n  \n    \n      \n      Date\n      Open\n      High\n      Low\n      Close\n      Volume\n      Adj_Close\n    \n  \n  \n    \n      0\n      Jun 01, 2021\n      504.01\n      536.13\n      482.14\n      528.21\n      78,560,600\n      528.21\n    \n    \n      1\n      May 01, 2021\n      512.65\n      518.95\n      478.54\n      502.81\n      66,927,600\n      502.81\n    \n    \n      2\n      Apr 01, 2021\n      529.93\n      563.56\n      499.00\n      513.47\n      111,573,300\n      513.47\n    \n    \n      3\n      Mar 01, 2021\n      545.57\n      556.99\n      492.85\n      521.66\n      90,183,900\n      521.66\n    \n    \n      4\n      Feb 01, 2021\n      536.79\n      566.65\n      518.28\n      538.85\n      61,902,300\n      538.85\n    \n  \n\n\n\n\nWe can also use the pandas read_html function using the url\n\nread_html_pandas_data = pd.read_html(url)\n\nOr we can convert the BeautifulSoup object to a string\n\nread_html_pandas_data = pd.read_html(str(soup))\n\nBeacause there is only one table on the page, we just take the first table in the list returned\n\nnetflix_dataframe = read_html_pandas_data[0]\nnetflix_dataframe.head()\n\n\n\n\n\n  \n    \n      \n      Date\n      Open\n      High\n      Low\n      Close*\n      Adj Close**\n      Volume\n    \n  \n  \n    \n      0\n      Jun 01, 2021\n      504.01\n      536.13\n      482.14\n      528.21\n      528.21\n      78560600\n    \n    \n      1\n      May 01, 2021\n      512.65\n      518.95\n      478.54\n      502.81\n      502.81\n      66927600\n    \n    \n      2\n      Apr 01, 2021\n      529.93\n      563.56\n      499.00\n      513.47\n      513.47\n      111573300\n    \n    \n      3\n      Mar 01, 2021\n      545.57\n      556.99\n      492.85\n      521.66\n      521.66\n      90183900\n    \n    \n      4\n      Feb 01, 2021\n      536.79\n      566.65\n      518.28\n      538.85\n      538.85\n      61902300"
  },
  {
    "objectID": "code/2_extract_stock_data_w_webscraping.html#using-webscraping-to-extract-stock-data-exercise",
    "href": "code/2_extract_stock_data_w_webscraping.html#using-webscraping-to-extract-stock-data-exercise",
    "title": "3  Extracting Stock Data Using Web Scraping",
    "section": "3.3 Using Webscraping to Extract Stock Data Exercise",
    "text": "3.3 Using Webscraping to Extract Stock Data Exercise\nUse the requests library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/amazon_data_webpage.html. Save the text of the response as a variable named html_data.\n\n#set url\nurl2 = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/amazon_data_webpage.html\"\n\n#request data\nhtml_data = requests.get(url2).text\n\nParse the html data using beautiful_soup\n\nsoup2 = BeautifulSoup(html_data, 'html5lib')\n\n\nWhat is the content of the title attribute:\n\n\nsoup.find(\"title\")\n\n<title>Netflix, Inc. (NFLX) Stock Historical Prices &amp; Data - Yahoo Finance</title>\n\n\nUsing beautiful soup extract the table with historical share prices and store it into a dataframe named amazon_data. The dataframe should have columns Date, Open, High, Low, Close, Adj Close, and Volume. Fill in each variable with the correct data from the list col.\n\namazon_data = pd.DataFrame(columns=[\"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\"])\n\nfor row in soup.find(\"tbody\").find_all(\"tr\"):\n    col = row.find_all(\"td\")\n    date = col[0].text\n    Open = col[1].text\n    high = col[2].text\n    low = col[3].text\n    close = col[4].text\n    adj_close = col[5].text\n    volume = col[6].text\n    \n    amazon_data = amazon_data.append({\"Date\":date, \"Open\":Open, \"High\":high, \"Low\":low, \"Close\":close, \"Adj Close\":adj_close, \"Volume\":volume}, ignore_index=True)\n\n#Print out the first five rows of the `amazon_data` dataframe you created.\namazon_data.head(n=5)\n\n\n\n\n\n  \n    \n      \n      Date\n      Open\n      High\n      Low\n      Close\n      Volume\n      Adj Close\n    \n  \n  \n    \n      0\n      Jun 01, 2021\n      504.01\n      536.13\n      482.14\n      528.21\n      78,560,600\n      528.21\n    \n    \n      1\n      May 01, 2021\n      512.65\n      518.95\n      478.54\n      502.81\n      66,927,600\n      502.81\n    \n    \n      2\n      Apr 01, 2021\n      529.93\n      563.56\n      499.00\n      513.47\n      111,573,300\n      513.47\n    \n    \n      3\n      Mar 01, 2021\n      545.57\n      556.99\n      492.85\n      521.66\n      90,183,900\n      521.66\n    \n    \n      4\n      Feb 01, 2021\n      536.79\n      566.65\n      518.28\n      538.85\n      61,902,300\n      538.85\n    \n  \n\n\n\n\n\nWhat is the name of the columns of the dataframe\n\n\nprint(amazon_data.columns)\n\nIndex(['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close'], dtype='object')\n\n\n\nWhat is the Open of the last row of the amazon_data dataframe?\n\n\namazon_data.tail()\namazon_data['Open'].iloc[-1]\n\n'109.35'"
  },
  {
    "objectID": "code/3_exam.html",
    "href": "code/3_exam.html",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "",
    "text": "Extracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data. In this assignment, you will extract some stock data, you will then display this data in a graph.\nWe will:\nDefine a Function that Makes a Graph Question 1: Use yfinance to Extract Stock Data Question 2: Use Webscraping to Extract Tesla Revenue Data Question 3: Use yfinance to Extract Stock Data Question 4: Use Webscraping to Extract GME Revenue Data Question 5: Plot Tesla Stock Graph Question 6: Plot GameStop Stock Graph"
  },
  {
    "objectID": "code/3_exam.html#load-libs",
    "href": "code/3_exam.html#load-libs",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "4.1 Load libs",
    "text": "4.1 Load libs\n\nimport yfinance as yf\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots"
  },
  {
    "objectID": "code/3_exam.html#define-graphing-function",
    "href": "code/3_exam.html#define-graphing-function",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "4.2 Define Graphing Function",
    "text": "4.2 Define Graphing Function\nIn this section, we define the function make_graph. You don’t have to know how the function works, you should only care about the inputs. It takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.\n\ndef make_graph(stock_data, revenue_data, stock):\n    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=(\"Historical Share Price\", \"Historical Revenue\"), vertical_spacing = .3)\n    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']\n    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']\n    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype(\"float\"), name=\"Share Price\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype(\"float\"), name=\"Revenue\"), row=2, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=1, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=2, col=1)\n    fig.update_yaxes(title_text=\"Price ($US)\", row=1, col=1)\n    fig.update_yaxes(title_text=\"Revenue ($US Millions)\", row=2, col=1)\n    fig.update_layout(showlegend=False,\n    height=900,\n    title=stock,\n    xaxis_rangeslider_visible=True)\n    fig.show()"
  },
  {
    "objectID": "code/3_exam.html#question-1-use-yfinance-to-extract-stock-data",
    "href": "code/3_exam.html#question-1-use-yfinance-to-extract-stock-data",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "4.3 Question 1: Use yfinance to Extract Stock Data",
    "text": "4.3 Question 1: Use yfinance to Extract Stock Data\nUsing the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is TSLA.\nUsing the ticker object and the function history extract stock information and save it in a dataframe named tesla_data. Set the period parameter to max so we get information for the maximum amount of time.\nReset the index using the reset_index(inplace=True) function on the tesla_data DataFrame and display the first five rows of the tesla_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.\n\n#create the ticker\ntsla = yf.Ticker(\"TSLA\")\n\n#extract stock info\ntesla_data = tsla.history(period=\"max\")\n\n#reset the index\ntesla_data.reset_index(inplace = True)\ntesla_data.head(n=5)\n\n\n\n\n\n  \n    \n      \n      Date\n      Open\n      High\n      Low\n      Close\n      Volume\n      Dividends\n      Stock Splits\n    \n  \n  \n    \n      0\n      2010-06-29\n      1.266667\n      1.666667\n      1.169333\n      1.592667\n      281494500\n      0\n      0.0\n    \n    \n      1\n      2010-06-30\n      1.719333\n      2.028000\n      1.553333\n      1.588667\n      257806500\n      0\n      0.0\n    \n    \n      2\n      2010-07-01\n      1.666667\n      1.728000\n      1.351333\n      1.464000\n      123282000\n      0\n      0.0\n    \n    \n      3\n      2010-07-02\n      1.533333\n      1.540000\n      1.247333\n      1.280000\n      77097000\n      0\n      0.0\n    \n    \n      4\n      2010-07-06\n      1.333333\n      1.333333\n      1.055333\n      1.074000\n      103003500\n      0\n      0.0"
  },
  {
    "objectID": "code/3_exam.html#question-2-use-webscraping-to-extract-tesla-revenue-data",
    "href": "code/3_exam.html#question-2-use-webscraping-to-extract-tesla-revenue-data",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "4.4 Question 2: Use Webscraping to Extract Tesla Revenue Data",
    "text": "4.4 Question 2: Use Webscraping to Extract Tesla Revenue Data\nUse the requests library to download the webpage https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue. Save the text of the response as a variable named html_data.\nParse the html data using beautiful_soup.\nUsing BeautifulSoup or the read_html function extract the table with Tesla Quarterly Revenue and store it into a dataframe named tesla_revenue. The dataframe should have columns Date and Revenue.\n\nurl = \"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\"\nhtml_data = requests.get(url).text\nsoup = BeautifulSoup(html_data, 'html5lib')\nread_html = pd.read_html(str(soup))\ntesla_revenue = read_html[1]\ntesla_revenue.columns = ['Date', 'Revenue']\ntesla_revenue.head()\n\n\n\n\n\n  \n    \n      \n      Date\n      Revenue\n    \n  \n  \n    \n      0\n      2022-06-30\n      $16,934\n    \n    \n      1\n      2022-03-31\n      $18,756\n    \n    \n      2\n      2021-12-31\n      $17,719\n    \n    \n      3\n      2021-09-30\n      $13,757\n    \n    \n      4\n      2021-06-30\n      $11,958\n    \n  \n\n\n\n\nRemove the comma and dollar sign from the Revenue column.\n\ntesla_revenue[\"Revenue\"] = tesla_revenue['Revenue'].str.replace(',|\\$',\"\")\ntesla_revenue.head()\n\n/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning:\n\nThe default value of regex will change from True to False in a future version.\n\n\n\n\n\n\n\n  \n    \n      \n      Date\n      Revenue\n    \n  \n  \n    \n      0\n      2022-06-30\n      16934\n    \n    \n      1\n      2022-03-31\n      18756\n    \n    \n      2\n      2021-12-31\n      17719\n    \n    \n      3\n      2021-09-30\n      13757\n    \n    \n      4\n      2021-06-30\n      11958\n    \n  \n\n\n\n\nRemove an null or empty strings in the Revenue column\n\ntesla_revenue.dropna(inplace=True)\ntesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != \"\"]\ntesla_revenue.tail(n=5)\n\n\n\n\n\n  \n    \n      \n      Date\n      Revenue\n    \n  \n  \n    \n      47\n      2010-09-30\n      31\n    \n    \n      48\n      2010-06-30\n      28\n    \n    \n      49\n      2010-03-31\n      21\n    \n    \n      51\n      2009-09-30\n      46\n    \n    \n      52\n      2009-06-30\n      27"
  },
  {
    "objectID": "code/3_exam.html#question-3-use-yfinance-to-extract-stock-data",
    "href": "code/3_exam.html#question-3-use-yfinance-to-extract-stock-data",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "4.5 Question 3: Use yfinance to Extract Stock Data",
    "text": "4.5 Question 3: Use yfinance to Extract Stock Data\nUsing the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is GME.\nUsing the ticker object and the function history extract stock information and save it in a dataframe named gme_data. Set the period parameter to max so we get information for the maximum amount of time.\nReset the index using the reset_index(inplace=True) function on the gme_data DataFrame and display the first five rows of the gme_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.\n\ngme_ticker = yf.Ticker(\"GME\")\ngme_data = gme_ticker.history(period = \"max\")\ngme_data.reset_index(inplace = True)\ngme_data.head(n=5)\n\n\n\n\n\n  \n    \n      \n      Date\n      Open\n      High\n      Low\n      Close\n      Volume\n      Dividends\n      Stock Splits\n    \n  \n  \n    \n      0\n      2002-02-13\n      1.620128\n      1.693350\n      1.603296\n      1.691666\n      76216000\n      0.0\n      0.0\n    \n    \n      1\n      2002-02-14\n      1.712708\n      1.716074\n      1.670626\n      1.683251\n      11021600\n      0.0\n      0.0\n    \n    \n      2\n      2002-02-15\n      1.683250\n      1.687458\n      1.658001\n      1.674834\n      8389600\n      0.0\n      0.0\n    \n    \n      3\n      2002-02-19\n      1.666418\n      1.666418\n      1.578047\n      1.607504\n      7410400\n      0.0\n      0.0\n    \n    \n      4\n      2002-02-20\n      1.615921\n      1.662210\n      1.603296\n      1.662210\n      6892800\n      0.0\n      0.0"
  },
  {
    "objectID": "code/3_exam.html#use-the-requests-library-to-download-the-webpage",
    "href": "code/3_exam.html#use-the-requests-library-to-download-the-webpage",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "4.6 Use the requests library to download the webpage",
    "text": "4.6 Use the requests library to download the webpage\nhttps://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html. Save the text of the response as a variable named html_data.\nParse the html data using beautiful_soup.\nUsing BeautifulSoup or the read_html function extract the table with GameStop Quarterly Revenue and store it into a dataframe named gme_revenue. The dataframe should have columns Date and Revenue. Make sure the comma and dollar sign is removed from the Revenue column using a method similar to what you did in Question 2.\n\nurl = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html\"\nhtml_data = requests.get(url).text\nsoup = BeautifulSoup(html_data,'html5lib')\nread_html = pd.read_html(str(soup))\n\ngme_revenue = read_html[1]\ngme_revenue.columns = ['Date', 'Revenue']\ngme_revenue.head()\n\n\n\n\n\n  \n    \n      \n      Date\n      Revenue\n    \n  \n  \n    \n      0\n      2020-04-30\n      $1,021\n    \n    \n      1\n      2020-01-31\n      $2,194\n    \n    \n      2\n      2019-10-31\n      $1,439\n    \n    \n      3\n      2019-07-31\n      $1,286\n    \n    \n      4\n      2019-04-30\n      $1,548\n    \n  \n\n\n\n\n\ngme_revenue[\"Revenue\"] = gme_revenue['Revenue'].str.replace(',|\\$',\"\")\ngme_revenue.dropna(inplace=True)\ngme_revenue = gme_revenue[gme_revenue['Revenue'] != \"\"]\ngme_revenue.tail(n=5)\n\n/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning:\n\nThe default value of regex will change from True to False in a future version.\n\n\n\n\n\n\n\n  \n    \n      \n      Date\n      Revenue\n    \n  \n  \n    \n      57\n      2006-01-31\n      1667\n    \n    \n      58\n      2005-10-31\n      534\n    \n    \n      59\n      2005-07-31\n      416\n    \n    \n      60\n      2005-04-30\n      475\n    \n    \n      61\n      2005-01-31\n      709"
  },
  {
    "objectID": "code/3_exam.html#question-5-plot-tesla-stock-graph",
    "href": "code/3_exam.html#question-5-plot-tesla-stock-graph",
    "title": "4  Extracting and Visualizing Stock Data",
    "section": "4.7 Question 5: Plot Tesla Stock Graph",
    "text": "4.7 Question 5: Plot Tesla Stock Graph\nUse the make_graph function to graph the Tesla Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(tesla_data, tesla_revenue, ‘Tesla’). Note the graph will only show data upto June 2021.\n\nmake_graph(tesla_data, tesla_revenue, 'Tesla')\n\n\n                                                \n\n\n##Question 6: Plot GameStop Stock Graph\nUse the make_graph function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(gme_data, gme_revenue, ‘GameStop’). Note the graph will only show data upto June 2021.\n\nmake_graph(gme_data, gme_revenue, 'GameStop')"
  }
]